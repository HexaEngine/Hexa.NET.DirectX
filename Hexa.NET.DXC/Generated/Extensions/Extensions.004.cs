// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXC
{
	public static unsafe partial class Extensions
	{

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			return ret;
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char** ppArguments = &pArguments)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (Define* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, ppResult);
			return ret;
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, ppResult);
			return ret;
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					ppResult = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					ppResult = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					ppResult = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					ppResult = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, (char*)ppSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, string pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pSource, pStr0, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
							{
								fixed (IDxcOperationResult** pppResult = &ppResult)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Preprocess source text<br/>
		/// </summary>
		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, string pSourceName, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppSource, pStr0, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, IDxcBlobEncoding** ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pSource, ppDisassembly);
			return ret;
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, IDxcBlobEncoding** ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)ppSource, ppDisassembly);
				return ret;
			}
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, IDxcBlobEncoding** ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)pSource.Handle, ppDisassembly);
			return ret;
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ref IDxcBlobEncoding* ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** pppDisassembly = &ppDisassembly)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pSource, (IDxcBlobEncoding**)pppDisassembly);
				return ret;
			}
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, out ComPtr<IDxcBlobEncoding> ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppDisassembly = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pSource, (IDxcBlobEncoding**)ppDisassembly.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ref IDxcBlobEncoding* ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcBlobEncoding** pppDisassembly = &ppDisassembly)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)ppSource, (IDxcBlobEncoding**)pppDisassembly);
					return ret;
				}
			}
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, out ComPtr<IDxcBlobEncoding> ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppDisassembly = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)pSource.Handle, (IDxcBlobEncoding**)ppDisassembly.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcCompiler2> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcCompiler2> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcCompiler2> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcCompiler2* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcCompiler2> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcCompiler2> comObj) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcCompiler2> comObj) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			return ret;
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			return ret;
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char*)ppSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pStr0, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pStr0, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, pStr0, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, pStr0, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, string pSourceName, string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pStr0, pStr1, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char* ppEntryPoint = pEntryPoint)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, string pSourceName, string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				char* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntryPoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = (char*)pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = '\0';
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pStr0, pStr1, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, pEntryPoint, pStr0, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetProfile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pStr0, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, string pSourceName, char* pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pStr0, pEntryPoint, pStr1, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, string pSourceName, char* pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				char* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetProfile != null)
				{
					pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = (char*)pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
					pStr1[pStrOffset1] = '\0';
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pStr0, pEntryPoint, pStr1, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, string pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, pStr0, pStr1, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, string pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				char* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetProfile != null)
				{
					pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = (char*)pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
					pStr1[pStrOffset1] = '\0';
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, pStr0, pStr1, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, string pSourceName, string pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pStr0, pStr1, pStr2, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char* ppEntryPoint = pEntryPoint)
					{
						fixed (char* ppTargetProfile = pTargetProfile)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, string pSourceName, string pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				char* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntryPoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = (char*)pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = '\0';
				}
				char* pStr2 = null;
				int pStrSize2 = 0;
				if (pTargetProfile != null)
				{
					pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = (char*)pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
					pStr2[pStrOffset2] = '\0';
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pStr0, pStr1, pStr2, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char*)ppSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pStr0, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char** ppArguments = &pArguments)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pStr0, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, pStr0, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char** ppArguments = &pArguments)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, pStr0, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char** ppArguments = &pArguments)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, string pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pStr0, pStr1, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char* ppEntryPoint = pEntryPoint)
					{
						fixed (char** ppArguments = &pArguments)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, string pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				char* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntryPoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = (char*)pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pStr0, pStr1, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, pEntryPoint, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetProfile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, string pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pStr0, pEntryPoint, pStr1, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, string pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				char* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetProfile != null)
				{
					pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = (char*)pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
					pStr1[pStrOffset1] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pStr0, pEntryPoint, pStr1, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, pStr0, pStr1, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				char* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetProfile != null)
				{
					pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = (char*)pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
					pStr1[pStrOffset1] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, pStr0, pStr1, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, string pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pStr0, pStr1, pStr2, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char* ppEntryPoint = pEntryPoint)
					{
						fixed (char* ppTargetProfile = pTargetProfile)
						{
							fixed (char** ppArguments = &pArguments)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, string pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				char* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntryPoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = (char*)pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = '\0';
				}
				char* pStr2 = null;
				int pStrSize2 = 0;
				if (pTargetProfile != null)
				{
					pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = (char*)pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
					pStr2[pStrOffset2] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pStr0, pStr1, pStr2, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char*)ppSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pStr0, pEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, pIncludeHandler, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}
	}
}
