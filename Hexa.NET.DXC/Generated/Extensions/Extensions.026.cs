// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXC
{
	public static unsafe partial class Extensions
	{

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, ref char* pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, ref char* pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, char** pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, char** pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (Guid*)priid, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, char** pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, char** pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, ref char* pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, ref char* pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, ref char* pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, ref char* pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (Guid*)priid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, char** pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (void** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, char** pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, pArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, ref char* pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char**)ppArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, ref char* pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, char** pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, char** pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (void** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, riid, (void**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, char** pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, char** pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, ref char* pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, ref char* pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, ref char* pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, ref char* pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, riid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, char** pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, char** pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, ref char* pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, ref char* pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Guid* priid = &riid)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, char** pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, char** pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, pArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (Guid*)priid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, char** pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Guid* priid = &riid)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, char** pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, ref char* pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Guid* priid = &riid)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, ref char* pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, ref char* pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Guid* priid = &riid)
						{
							fixed (void** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, (void**)pppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, ref char* pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Guid* priid = &riid)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (Guid*)priid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, Buffer* pObject, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, Guid*, void**, HResult>)(handle->LpVtbl[4]))(handle, pObject, riid, ppResult);
			return ret;
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, ref Buffer pObject, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppObject = &pObject)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, Guid*, void**, HResult>)(handle->LpVtbl[4]))(handle, (Buffer*)ppObject, riid, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, Buffer* pObject, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, Guid*, void**, HResult>)(handle->LpVtbl[4]))(handle, pObject, (Guid*)priid, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, ref Buffer pObject, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppObject = &pObject)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, Guid*, void**, HResult>)(handle->LpVtbl[4]))(handle, (Buffer*)ppObject, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, Buffer* pObject, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (void** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, Guid*, void**, HResult>)(handle->LpVtbl[4]))(handle, pObject, riid, (void**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, ref Buffer pObject, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppObject = &pObject)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, Guid*, void**, HResult>)(handle->LpVtbl[4]))(handle, (Buffer*)ppObject, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, Buffer* pObject, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, Guid*, void**, HResult>)(handle->LpVtbl[4]))(handle, pObject, (Guid*)priid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Disassemble a program.<br/>
		/// </summary>
		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, ref Buffer pObject, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppObject = &pObject)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, Guid*, void**, HResult>)(handle->LpVtbl[4]))(handle, (Buffer*)ppObject, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcValidator> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcValidator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcValidator> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcValidator* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcValidator> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcValidator* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcValidator> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcValidator* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcValidator> comObj) 
		{
			IDxcValidator* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcValidator> comObj) 
		{
			IDxcValidator* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator> comObj, IDxcBlob* pShader, uint flags, IDxcOperationResult** ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pShader, flags, ppResult);
			return ret;
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator> comObj, ref IDxcBlob pShader, uint flags, IDxcOperationResult** ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppShader, flags, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator> comObj, ComPtr<IDxcBlob> pShader, uint flags, IDxcOperationResult** ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pShader.Handle, flags, ppResult);
			return ret;
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator> comObj, IDxcBlob* pShader, uint flags, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pShader, flags, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator> comObj, IDxcBlob* pShader, uint flags, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pShader, flags, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator> comObj, ref IDxcBlob pShader, uint flags, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppShader, flags, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator> comObj, ComPtr<IDxcBlob> pShader, uint flags, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pShader.Handle, flags, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcValidator2> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcValidator2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcValidator2> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcValidator2> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcValidator2* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcValidator2> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcValidator2> comObj) 
		{
			IDxcValidator2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcValidator2> comObj) 
		{
			IDxcValidator2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, uint flags, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pShader, flags, ppResult);
			return ret;
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator2> comObj, ref IDxcBlob pShader, uint flags, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppShader, flags, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator2> comObj, ComPtr<IDxcBlob> pShader, uint flags, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pShader.Handle, flags, ppResult);
			return ret;
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, uint flags, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pShader, flags, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, uint flags, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pShader, flags, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator2> comObj, ref IDxcBlob pShader, uint flags, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppShader, flags, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult Validate(this ComPtr<IDxcValidator2> comObj, ComPtr<IDxcBlob> pShader, uint flags, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pShader.Handle, flags, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, uint flags, Buffer* pOptDebugBitcode, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pShader, flags, pOptDebugBitcode, ppResult);
			return ret;
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ref IDxcBlob pShader, uint flags, Buffer* pOptDebugBitcode, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppShader, flags, pOptDebugBitcode, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ComPtr<IDxcBlob> pShader, uint flags, Buffer* pOptDebugBitcode, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pShader.Handle, flags, pOptDebugBitcode, ppResult);
			return ret;
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, uint flags, ref Buffer pOptDebugBitcode, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (Buffer* ppOptDebugBitcode = &pOptDebugBitcode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pShader, flags, (Buffer*)ppOptDebugBitcode, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ref IDxcBlob pShader, uint flags, ref Buffer pOptDebugBitcode, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (Buffer* ppOptDebugBitcode = &pOptDebugBitcode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppShader, flags, (Buffer*)ppOptDebugBitcode, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ComPtr<IDxcBlob> pShader, uint flags, ref Buffer pOptDebugBitcode, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (Buffer* ppOptDebugBitcode = &pOptDebugBitcode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pShader.Handle, flags, (Buffer*)ppOptDebugBitcode, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, uint flags, Buffer* pOptDebugBitcode, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pShader, flags, pOptDebugBitcode, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, uint flags, Buffer* pOptDebugBitcode, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pShader, flags, pOptDebugBitcode, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ref IDxcBlob pShader, uint flags, Buffer* pOptDebugBitcode, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppShader, flags, pOptDebugBitcode, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ComPtr<IDxcBlob> pShader, uint flags, Buffer* pOptDebugBitcode, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pShader.Handle, flags, pOptDebugBitcode, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, uint flags, ref Buffer pOptDebugBitcode, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (Buffer* ppOptDebugBitcode = &pOptDebugBitcode)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pShader, flags, (Buffer*)ppOptDebugBitcode, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, uint flags, ref Buffer pOptDebugBitcode, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (Buffer* ppOptDebugBitcode = &pOptDebugBitcode)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, pShader, flags, (Buffer*)ppOptDebugBitcode, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ref IDxcBlob pShader, uint flags, ref Buffer pOptDebugBitcode, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (Buffer* ppOptDebugBitcode = &pOptDebugBitcode)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)ppShader, flags, (Buffer*)ppOptDebugBitcode, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Validate a shader.<br/>
		/// </summary>
		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ComPtr<IDxcBlob> pShader, uint flags, ref Buffer pOptDebugBitcode, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (Buffer* ppOptDebugBitcode = &pOptDebugBitcode)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, uint, Buffer*, IDxcOperationResult**, HResult>)(handle->LpVtbl[4]))(handle, (IDxcBlob*)pShader.Handle, flags, (Buffer*)ppOptDebugBitcode, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcContainerBuilder> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcContainerBuilder> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcContainerBuilder> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcContainerBuilder> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcContainerBuilder> comObj) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcContainerBuilder> comObj) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Load(this ComPtr<IDxcContainerBuilder> comObj, IDxcBlob* pDxilContainerHeader) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcBlob*, HResult>)(handle->LpVtbl[3]))(handle, pDxilContainerHeader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Load(this ComPtr<IDxcContainerBuilder> comObj, ref IDxcBlob pDxilContainerHeader) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			fixed (IDxcBlob* ppDxilContainerHeader = &pDxilContainerHeader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcBlob*, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppDxilContainerHeader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Load(this ComPtr<IDxcContainerBuilder> comObj, ComPtr<IDxcBlob> pDxilContainerHeader) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcBlob*, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pDxilContainerHeader.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddPart(this ComPtr<IDxcContainerBuilder> comObj, uint fourCC, IDxcBlob* pSource) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, uint, IDxcBlob*, HResult>)(handle->LpVtbl[4]))(handle, fourCC, pSource);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddPart(this ComPtr<IDxcContainerBuilder> comObj, uint fourCC, ref IDxcBlob pSource) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, uint, IDxcBlob*, HResult>)(handle->LpVtbl[4]))(handle, fourCC, (IDxcBlob*)ppSource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddPart(this ComPtr<IDxcContainerBuilder> comObj, uint fourCC, ComPtr<IDxcBlob> pSource) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, uint, IDxcBlob*, HResult>)(handle->LpVtbl[4]))(handle, fourCC, (IDxcBlob*)pSource.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RemovePart(this ComPtr<IDxcContainerBuilder> comObj, uint fourCC) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, uint, HResult>)(handle->LpVtbl[5]))(handle, fourCC);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SerializeContainer(this ComPtr<IDxcContainerBuilder> comObj, IDxcOperationResult** ppResult) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcOperationResult**, HResult>)(handle->LpVtbl[6]))(handle, ppResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SerializeContainer(this ComPtr<IDxcContainerBuilder> comObj, ref IDxcOperationResult* ppResult) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcOperationResult**, HResult>)(handle->LpVtbl[6]))(handle, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SerializeContainer(this ComPtr<IDxcContainerBuilder> comObj, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcOperationResult**, HResult>)(handle->LpVtbl[6]))(handle, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcAssembler> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcAssembler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcAssembler> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcAssembler* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcAssembler> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcAssembler* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcAssembler> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcAssembler* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcAssembler> comObj) 
		{
			IDxcAssembler* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcAssembler> comObj) 
		{
			IDxcAssembler* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>
		/// </summary>
		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, IDxcBlob* pShader, IDxcOperationResult** ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pShader, ppResult);
			return ret;
		}

		/// <summary>
		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>
		/// </summary>
		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, ref IDxcBlob pShader, IDxcOperationResult** ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppShader, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>
		/// </summary>
		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, ComPtr<IDxcBlob> pShader, IDxcOperationResult** ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pShader.Handle, ppResult);
			return ret;
		}

		/// <summary>
		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>
		/// </summary>
		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, IDxcBlob* pShader, ref IDxcOperationResult* ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pShader, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>
		/// </summary>
		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, IDxcBlob* pShader, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, pShader, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>
		/// </summary>
		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, ref IDxcBlob pShader, ref IDxcOperationResult* ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppShader, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>
		/// </summary>
		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, ComPtr<IDxcBlob> pShader, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pShader.Handle, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcContainerReflection> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcContainerReflection> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcContainerReflection> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcContainerReflection* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcContainerReflection> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcContainerReflection> comObj) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcContainerReflection> comObj) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Load(this ComPtr<IDxcContainerReflection> comObj, IDxcBlob* pContainer) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, IDxcBlob*, HResult>)(handle->LpVtbl[3]))(handle, pContainer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Load(this ComPtr<IDxcContainerReflection> comObj, ref IDxcBlob pContainer) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (IDxcBlob* ppContainer = &pContainer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, IDxcBlob*, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppContainer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Load(this ComPtr<IDxcContainerReflection> comObj, ComPtr<IDxcBlob> pContainer) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, IDxcBlob*, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pContainer.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPartCount(this ComPtr<IDxcContainerReflection> comObj, uint* pResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint*, HResult>)(handle->LpVtbl[4]))(handle, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPartCount(this ComPtr<IDxcContainerReflection> comObj, ref uint pResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (uint* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint*, HResult>)(handle->LpVtbl[4]))(handle, (uint*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPartKind(this ComPtr<IDxcContainerReflection> comObj, uint idx, uint* pResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint, uint*, HResult>)(handle->LpVtbl[5]))(handle, idx, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPartKind(this ComPtr<IDxcContainerReflection> comObj, uint idx, ref uint pResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (uint* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint, uint*, HResult>)(handle->LpVtbl[5]))(handle, idx, (uint*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPartContent(this ComPtr<IDxcContainerReflection> comObj, uint idx, IDxcBlob** ppResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint, IDxcBlob**, HResult>)(handle->LpVtbl[6]))(handle, idx, ppResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPartContent(this ComPtr<IDxcContainerReflection> comObj, uint idx, ref IDxcBlob* ppResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint, IDxcBlob**, HResult>)(handle->LpVtbl[6]))(handle, idx, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPartContent(this ComPtr<IDxcContainerReflection> comObj, uint idx, out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint, IDxcBlob**, HResult>)(handle->LpVtbl[6]))(handle, idx, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindFirstPartKind(this ComPtr<IDxcContainerReflection> comObj, uint kind, uint* pResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint, uint*, HResult>)(handle->LpVtbl[7]))(handle, kind, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindFirstPartKind(this ComPtr<IDxcContainerReflection> comObj, uint kind, ref uint pResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (uint* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint, uint*, HResult>)(handle->LpVtbl[7]))(handle, kind, (uint*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPartReflection(this ComPtr<IDxcContainerReflection> comObj, uint idx, Guid* iid, void** ppvObject) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint, Guid*, void**, HResult>)(handle->LpVtbl[8]))(handle, idx, iid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPartReflection(this ComPtr<IDxcContainerReflection> comObj, uint idx, ref Guid iid, void** ppvObject) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint, Guid*, void**, HResult>)(handle->LpVtbl[8]))(handle, idx, (Guid*)piid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPartReflection<T>(this ComPtr<IDxcContainerReflection> comObj, uint idx, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcContainerReflection* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint, Guid*, void**, HResult>)(handle->LpVtbl[8]))(handle, idx, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPartReflection<T>(this ComPtr<IDxcContainerReflection> comObj, uint idx, ref Guid iid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, uint, Guid*, void**, HResult>)(handle->LpVtbl[8]))(handle, idx, (Guid*)piid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcOptimizerPass> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcOptimizerPass> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcOptimizerPass> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcOptimizerPass> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcOptimizerPass> comObj) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcOptimizerPass> comObj) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetOptionName(this ComPtr<IDxcOptimizerPass> comObj, char** ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, char**, HResult>)(handle->LpVtbl[3]))(handle, ppResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetOptionName(this ComPtr<IDxcOptimizerPass> comObj, ref char* ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			fixed (char** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, char**, HResult>)(handle->LpVtbl[3]))(handle, (char**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDescription(this ComPtr<IDxcOptimizerPass> comObj, char** ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, char**, HResult>)(handle->LpVtbl[4]))(handle, ppResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDescription(this ComPtr<IDxcOptimizerPass> comObj, ref char* ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			fixed (char** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, char**, HResult>)(handle->LpVtbl[4]))(handle, (char**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetOptionArgCount(this ComPtr<IDxcOptimizerPass> comObj, uint* pCount) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, uint*, HResult>)(handle->LpVtbl[5]))(handle, pCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetOptionArgCount(this ComPtr<IDxcOptimizerPass> comObj, ref uint pCount) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			fixed (uint* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, uint*, HResult>)(handle->LpVtbl[5]))(handle, (uint*)ppCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetOptionArgName(this ComPtr<IDxcOptimizerPass> comObj, uint argIndex, char** ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, uint, char**, HResult>)(handle->LpVtbl[6]))(handle, argIndex, ppResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetOptionArgName(this ComPtr<IDxcOptimizerPass> comObj, uint argIndex, ref char* ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			fixed (char** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, uint, char**, HResult>)(handle->LpVtbl[6]))(handle, argIndex, (char**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetOptionArgDescription(this ComPtr<IDxcOptimizerPass> comObj, uint argIndex, char** ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, uint, char**, HResult>)(handle->LpVtbl[7]))(handle, argIndex, ppResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetOptionArgDescription(this ComPtr<IDxcOptimizerPass> comObj, uint argIndex, ref char* ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			fixed (char** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, uint, char**, HResult>)(handle->LpVtbl[7]))(handle, argIndex, (char**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcOptimizer> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcOptimizer> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcOptimizer> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcOptimizer* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcOptimizer> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcOptimizer> comObj) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcOptimizer> comObj) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetAvailablePassCount(this ComPtr<IDxcOptimizer> comObj, uint* pCount) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, uint*, HResult>)(handle->LpVtbl[3]))(handle, pCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetAvailablePassCount(this ComPtr<IDxcOptimizer> comObj, ref uint pCount) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (uint* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, uint*, HResult>)(handle->LpVtbl[3]))(handle, (uint*)ppCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetAvailablePass(this ComPtr<IDxcOptimizer> comObj, uint index, IDxcOptimizerPass** ppResult) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, uint, IDxcOptimizerPass**, HResult>)(handle->LpVtbl[4]))(handle, index, ppResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetAvailablePass(this ComPtr<IDxcOptimizer> comObj, uint index, ref IDxcOptimizerPass* ppResult) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcOptimizerPass** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, uint, IDxcOptimizerPass**, HResult>)(handle->LpVtbl[4]))(handle, index, (IDxcOptimizerPass**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetAvailablePass(this ComPtr<IDxcOptimizer> comObj, uint index, out ComPtr<IDxcOptimizerPass> ppResult) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, uint, IDxcOptimizerPass**, HResult>)(handle->LpVtbl[4]))(handle, index, (IDxcOptimizerPass**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, uint optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, ppOptions, optionCount, pOutputModule, ppOutputText);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, char** ppOptions, uint optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)ppBlob, ppOptions, optionCount, pOutputModule, ppOutputText);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, char** ppOptions, uint optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)pBlob.Handle, ppOptions, optionCount, pOutputModule, ppOutputText);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, uint optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, (char**)pppOptions, optionCount, pOutputModule, ppOutputText);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, ref char* ppOptions, uint optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (char** pppOptions = &ppOptions)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)ppBlob, (char**)pppOptions, optionCount, pOutputModule, ppOutputText);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, ref char* ppOptions, uint optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)pBlob.Handle, (char**)pppOptions, optionCount, pOutputModule, ppOutputText);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, uint optionCount, ref IDxcBlob* pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob** ppOutputModule = &pOutputModule)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, uint optionCount, ref ComPtr<IDxcBlob> pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, char** ppOptions, uint optionCount, ref IDxcBlob* pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlob** ppOutputModule = &pOutputModule)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)ppBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, char** ppOptions, uint optionCount, ref ComPtr<IDxcBlob> pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)pBlob.Handle, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, uint optionCount, ref IDxcBlob* pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (IDxcBlob** ppOutputModule = &pOutputModule)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, uint optionCount, ref ComPtr<IDxcBlob> pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, ref char* ppOptions, uint optionCount, ref IDxcBlob* pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (char** pppOptions = &ppOptions)
				{
					fixed (IDxcBlob** ppOutputModule = &pOutputModule)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)ppBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, ref char* ppOptions, uint optionCount, ref ComPtr<IDxcBlob> pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)pBlob.Handle, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, uint optionCount, IDxcBlob** pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, ppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)pppOutputText);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, uint optionCount, IDxcBlob** pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			ppOutputText = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, ppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, char** ppOptions, uint optionCount, IDxcBlob** pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)ppBlob, ppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)pppOutputText);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, char** ppOptions, uint optionCount, IDxcBlob** pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			ppOutputText = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)pBlob.Handle, ppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, uint optionCount, IDxcBlob** pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, (char**)pppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)pppOutputText);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, uint optionCount, IDxcBlob** pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				ppOutputText = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, (char**)pppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, ref char* ppOptions, uint optionCount, IDxcBlob** pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (char** pppOptions = &ppOptions)
				{
					fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)ppBlob, (char**)pppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)pppOutputText);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, ref char* ppOptions, uint optionCount, IDxcBlob** pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				ppOutputText = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)pBlob.Handle, (char**)pppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, uint optionCount, ref IDxcBlob* pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob** ppOutputModule = &pOutputModule)
			{
				fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)pppOutputText);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, uint optionCount, ref ComPtr<IDxcBlob> pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
			{
				ppOutputText = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, char** ppOptions, uint optionCount, ref IDxcBlob* pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlob** ppOutputModule = &pOutputModule)
				{
					fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)ppBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)pppOutputText);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, char** ppOptions, uint optionCount, ref ComPtr<IDxcBlob> pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
			{
				ppOutputText = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)pBlob.Handle, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, uint optionCount, ref IDxcBlob* pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (IDxcBlob** ppOutputModule = &pOutputModule)
				{
					fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)pppOutputText);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, uint optionCount, ref ComPtr<IDxcBlob> pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
				{
					ppOutputText = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, ref char* ppOptions, uint optionCount, ref IDxcBlob* pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (char** pppOptions = &ppOptions)
				{
					fixed (IDxcBlob** ppOutputModule = &pOutputModule)
					{
						fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)ppBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)pppOutputText);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, ref char* ppOptions, uint optionCount, ref ComPtr<IDxcBlob> pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
				{
					ppOutputText = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, uint, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)pBlob.Handle, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcVersionInfo> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcVersionInfo> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcVersionInfo> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcVersionInfo* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcVersionInfo> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcVersionInfo* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcVersionInfo> comObj) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcVersionInfo> comObj) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVersion(this ComPtr<IDxcVersionInfo> comObj, uint* pMajor, uint* pMinor) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, uint*, uint*, HResult>)(handle->LpVtbl[3]))(handle, pMajor, pMinor);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVersion(this ComPtr<IDxcVersionInfo> comObj, ref uint pMajor, uint* pMinor) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			fixed (uint* ppMajor = &pMajor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, uint*, uint*, HResult>)(handle->LpVtbl[3]))(handle, (uint*)ppMajor, pMinor);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVersion(this ComPtr<IDxcVersionInfo> comObj, uint* pMajor, ref uint pMinor) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			fixed (uint* ppMinor = &pMinor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, uint*, uint*, HResult>)(handle->LpVtbl[3]))(handle, pMajor, (uint*)ppMinor);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVersion(this ComPtr<IDxcVersionInfo> comObj, ref uint pMajor, ref uint pMinor) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			fixed (uint* ppMajor = &pMajor)
			{
				fixed (uint* ppMinor = &pMinor)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, uint*, uint*, HResult>)(handle->LpVtbl[3]))(handle, (uint*)ppMajor, (uint*)ppMinor);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFlags(this ComPtr<IDxcVersionInfo> comObj, uint* pFlags) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, uint*, HResult>)(handle->LpVtbl[4]))(handle, pFlags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFlags(this ComPtr<IDxcVersionInfo> comObj, ref uint pFlags) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			fixed (uint* ppFlags = &pFlags)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, uint*, HResult>)(handle->LpVtbl[4]))(handle, (uint*)ppFlags);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcVersionInfo2> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcVersionInfo2> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcVersionInfo2> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcVersionInfo2> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcVersionInfo2> comObj) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcVersionInfo2> comObj) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVersion(this ComPtr<IDxcVersionInfo2> comObj, uint* pMajor, uint* pMinor) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, uint*, uint*, HResult>)(handle->LpVtbl[3]))(handle, pMajor, pMinor);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVersion(this ComPtr<IDxcVersionInfo2> comObj, ref uint pMajor, uint* pMinor) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			fixed (uint* ppMajor = &pMajor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, uint*, uint*, HResult>)(handle->LpVtbl[3]))(handle, (uint*)ppMajor, pMinor);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVersion(this ComPtr<IDxcVersionInfo2> comObj, uint* pMajor, ref uint pMinor) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			fixed (uint* ppMinor = &pMinor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, uint*, uint*, HResult>)(handle->LpVtbl[3]))(handle, pMajor, (uint*)ppMinor);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVersion(this ComPtr<IDxcVersionInfo2> comObj, ref uint pMajor, ref uint pMinor) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			fixed (uint* ppMajor = &pMajor)
			{
				fixed (uint* ppMinor = &pMinor)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, uint*, uint*, HResult>)(handle->LpVtbl[3]))(handle, (uint*)ppMajor, (uint*)ppMinor);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFlags(this ComPtr<IDxcVersionInfo2> comObj, uint* pFlags) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, uint*, HResult>)(handle->LpVtbl[4]))(handle, pFlags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFlags(this ComPtr<IDxcVersionInfo2> comObj, ref uint pFlags) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			fixed (uint* ppFlags = &pFlags)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, uint*, HResult>)(handle->LpVtbl[4]))(handle, (uint*)ppFlags);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetCommitInfo(this ComPtr<IDxcVersionInfo2> comObj, uint* pCommitCount, byte** pCommitHash) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, uint*, byte**, HResult>)(handle->LpVtbl[5]))(handle, pCommitCount, pCommitHash);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetCommitInfo(this ComPtr<IDxcVersionInfo2> comObj, ref uint pCommitCount, byte** pCommitHash) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			fixed (uint* ppCommitCount = &pCommitCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, uint*, byte**, HResult>)(handle->LpVtbl[5]))(handle, (uint*)ppCommitCount, pCommitHash);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetCommitInfo(this ComPtr<IDxcVersionInfo2> comObj, uint* pCommitCount, ref byte* pCommitHash) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			fixed (byte** ppCommitHash = &pCommitHash)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, uint*, byte**, HResult>)(handle->LpVtbl[5]))(handle, pCommitCount, (byte**)ppCommitHash);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetCommitInfo(this ComPtr<IDxcVersionInfo2> comObj, ref uint pCommitCount, ref byte* pCommitHash) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			fixed (uint* ppCommitCount = &pCommitCount)
			{
				fixed (byte** ppCommitHash = &pCommitHash)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, uint*, byte**, HResult>)(handle->LpVtbl[5]))(handle, (uint*)ppCommitCount, (byte**)ppCommitHash);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcVersionInfo3> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcVersionInfo3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo3*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcVersionInfo3> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcVersionInfo3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo3*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcVersionInfo3> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcVersionInfo3* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo3*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcVersionInfo3> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcVersionInfo3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo3*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcVersionInfo3> comObj) 
		{
			IDxcVersionInfo3* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo3*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcVersionInfo3> comObj) 
		{
			IDxcVersionInfo3* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo3*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetCustomVersionString(this ComPtr<IDxcVersionInfo3> comObj, byte** pVersionString) 
		{
			IDxcVersionInfo3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo3*, byte**, HResult>)(handle->LpVtbl[3]))(handle, pVersionString);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetCustomVersionString(this ComPtr<IDxcVersionInfo3> comObj, ref byte* pVersionString) 
		{
			IDxcVersionInfo3* handle = comObj.Handle;
			fixed (byte** ppVersionString = &pVersionString)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo3*, byte**, HResult>)(handle->LpVtbl[3]))(handle, (byte**)ppVersionString);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcPdbUtils> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDxcPdbUtils> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcPdbUtils> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcPdbUtils* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDxcPdbUtils> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcPdbUtils> comObj) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcPdbUtils> comObj) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Load(this ComPtr<IDxcPdbUtils> comObj, IDxcBlob* pPdbOrDxil) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob*, HResult>)(handle->LpVtbl[3]))(handle, pPdbOrDxil);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Load(this ComPtr<IDxcPdbUtils> comObj, ref IDxcBlob pPdbOrDxil) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppPdbOrDxil = &pPdbOrDxil)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob*, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppPdbOrDxil);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Load(this ComPtr<IDxcPdbUtils> comObj, ComPtr<IDxcBlob> pPdbOrDxil) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob*, HResult>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pPdbOrDxil.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSourceCount(this ComPtr<IDxcPdbUtils> comObj, uint* pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint*, HResult>)(handle->LpVtbl[4]))(handle, pCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSourceCount(this ComPtr<IDxcPdbUtils> comObj, ref uint pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (uint* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint*, HResult>)(handle->LpVtbl[4]))(handle, (uint*)ppCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSource(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, IDxcBlobEncoding** ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, uIndex, ppResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSource(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, ref IDxcBlobEncoding* ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, uIndex, (IDxcBlobEncoding**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSource(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, out ComPtr<IDxcBlobEncoding> ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, uIndex, (IDxcBlobEncoding**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSourceName(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, void** pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, void**, HResult>)(handle->LpVtbl[6]))(handle, uIndex, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSourceName(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, ref void* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (void** ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, void**, HResult>)(handle->LpVtbl[6]))(handle, uIndex, (void**)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFlagCount(this ComPtr<IDxcPdbUtils> comObj, uint* pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint*, HResult>)(handle->LpVtbl[7]))(handle, pCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFlagCount(this ComPtr<IDxcPdbUtils> comObj, ref uint pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (uint* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint*, HResult>)(handle->LpVtbl[7]))(handle, (uint*)ppCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFlag(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, void** pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, void**, HResult>)(handle->LpVtbl[8]))(handle, uIndex, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFlag(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, ref void* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (void** ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, void**, HResult>)(handle->LpVtbl[8]))(handle, uIndex, (void**)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetArgCount(this ComPtr<IDxcPdbUtils> comObj, uint* pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint*, HResult>)(handle->LpVtbl[9]))(handle, pCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetArgCount(this ComPtr<IDxcPdbUtils> comObj, ref uint pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (uint* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint*, HResult>)(handle->LpVtbl[9]))(handle, (uint*)ppCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetArg(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, void** pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, void**, HResult>)(handle->LpVtbl[10]))(handle, uIndex, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetArg(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, ref void* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (void** ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, void**, HResult>)(handle->LpVtbl[10]))(handle, uIndex, (void**)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetArgPairCount(this ComPtr<IDxcPdbUtils> comObj, uint* pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint*, HResult>)(handle->LpVtbl[11]))(handle, pCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetArgPairCount(this ComPtr<IDxcPdbUtils> comObj, ref uint pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (uint* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint*, HResult>)(handle->LpVtbl[11]))(handle, (uint*)ppCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetArgPair(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, void** pName, void** pValue) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, void**, void**, HResult>)(handle->LpVtbl[12]))(handle, uIndex, pName, pValue);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetArgPair(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, ref void* pName, void** pValue) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (void** ppName = &pName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, void**, void**, HResult>)(handle->LpVtbl[12]))(handle, uIndex, (void**)ppName, pValue);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetArgPair(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, void** pName, ref void* pValue) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (void** ppValue = &pValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, void**, void**, HResult>)(handle->LpVtbl[12]))(handle, uIndex, pName, (void**)ppValue);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetArgPair(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, ref void* pName, ref void* pValue) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (void** ppName = &pName)
			{
				fixed (void** ppValue = &pValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, void**, void**, HResult>)(handle->LpVtbl[12]))(handle, uIndex, (void**)ppName, (void**)ppValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDefineCount(this ComPtr<IDxcPdbUtils> comObj, uint* pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint*, HResult>)(handle->LpVtbl[13]))(handle, pCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDefineCount(this ComPtr<IDxcPdbUtils> comObj, ref uint pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (uint* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint*, HResult>)(handle->LpVtbl[13]))(handle, (uint*)ppCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDefine(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, void** pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, void**, HResult>)(handle->LpVtbl[14]))(handle, uIndex, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDefine(this ComPtr<IDxcPdbUtils> comObj, uint uIndex, ref void* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (void** ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, uint, void**, HResult>)(handle->LpVtbl[14]))(handle, uIndex, (void**)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetTargetProfile(this ComPtr<IDxcPdbUtils> comObj, void** pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, void**, HResult>)(handle->LpVtbl[15]))(handle, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetTargetProfile(this ComPtr<IDxcPdbUtils> comObj, ref void* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (void** ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, void**, HResult>)(handle->LpVtbl[15]))(handle, (void**)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetEntryPoint(this ComPtr<IDxcPdbUtils> comObj, void** pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, void**, HResult>)(handle->LpVtbl[16]))(handle, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetEntryPoint(this ComPtr<IDxcPdbUtils> comObj, ref void* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (void** ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, void**, HResult>)(handle->LpVtbl[16]))(handle, (void**)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMainFileName(this ComPtr<IDxcPdbUtils> comObj, void** pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, void**, HResult>)(handle->LpVtbl[17]))(handle, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMainFileName(this ComPtr<IDxcPdbUtils> comObj, ref void* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (void** ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, void**, HResult>)(handle->LpVtbl[17]))(handle, (void**)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetHash(this ComPtr<IDxcPdbUtils> comObj, IDxcBlob** ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(handle->LpVtbl[18]))(handle, ppResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetHash(this ComPtr<IDxcPdbUtils> comObj, ref IDxcBlob* ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(handle->LpVtbl[18]))(handle, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetHash(this ComPtr<IDxcPdbUtils> comObj, out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(handle->LpVtbl[18]))(handle, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetName(this ComPtr<IDxcPdbUtils> comObj, void** pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, void**, HResult>)(handle->LpVtbl[19]))(handle, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetName(this ComPtr<IDxcPdbUtils> comObj, ref void* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (void** ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, void**, HResult>)(handle->LpVtbl[19]))(handle, (void**)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 IsFullPDB(this ComPtr<IDxcPdbUtils> comObj) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bool32>)(handle->LpVtbl[20]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullPDB(this ComPtr<IDxcPdbUtils> comObj, IDxcBlob** ppFullPDB) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(handle->LpVtbl[21]))(handle, ppFullPDB);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullPDB(this ComPtr<IDxcPdbUtils> comObj, ref IDxcBlob* ppFullPDB) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcBlob** pppFullPDB = &ppFullPDB)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(handle->LpVtbl[21]))(handle, (IDxcBlob**)pppFullPDB);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullPDB(this ComPtr<IDxcPdbUtils> comObj, out ComPtr<IDxcBlob> ppFullPDB) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			ppFullPDB = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(handle->LpVtbl[21]))(handle, (IDxcBlob**)ppFullPDB.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVersionInfo(this ComPtr<IDxcPdbUtils> comObj, IDxcVersionInfo** ppVersionInfo) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcVersionInfo**, HResult>)(handle->LpVtbl[22]))(handle, ppVersionInfo);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVersionInfo(this ComPtr<IDxcPdbUtils> comObj, ref IDxcVersionInfo* ppVersionInfo) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcVersionInfo** pppVersionInfo = &ppVersionInfo)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcVersionInfo**, HResult>)(handle->LpVtbl[22]))(handle, (IDxcVersionInfo**)pppVersionInfo);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVersionInfo(this ComPtr<IDxcPdbUtils> comObj, out ComPtr<IDxcVersionInfo> ppVersionInfo) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			ppVersionInfo = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcVersionInfo**, HResult>)(handle->LpVtbl[22]))(handle, (IDxcVersionInfo**)ppVersionInfo.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetCompiler(this ComPtr<IDxcPdbUtils> comObj, IDxcCompiler3* pCompiler) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcCompiler3*, HResult>)(handle->LpVtbl[23]))(handle, pCompiler);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetCompiler(this ComPtr<IDxcPdbUtils> comObj, ref IDxcCompiler3 pCompiler) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcCompiler3* ppCompiler = &pCompiler)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcCompiler3*, HResult>)(handle->LpVtbl[23]))(handle, (IDxcCompiler3*)ppCompiler);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetCompiler(this ComPtr<IDxcPdbUtils> comObj, ComPtr<IDxcCompiler3> pCompiler) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcCompiler3*, HResult>)(handle->LpVtbl[23]))(handle, (IDxcCompiler3*)pCompiler.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileForFullPDB(this ComPtr<IDxcPdbUtils> comObj, IDxcResult** ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcResult**, HResult>)(handle->LpVtbl[24]))(handle, ppResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileForFullPDB(this ComPtr<IDxcPdbUtils> comObj, ref IDxcResult* ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcResult**, HResult>)(handle->LpVtbl[24]))(handle, (IDxcResult**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileForFullPDB(this ComPtr<IDxcPdbUtils> comObj, out ComPtr<IDxcResult> ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcResult**, HResult>)(handle->LpVtbl[24]))(handle, (IDxcResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult OverrideArgs(this ComPtr<IDxcPdbUtils> comObj, ArgPair* pArgPairs, uint uNumArgPairs) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, ArgPair*, uint, HResult>)(handle->LpVtbl[25]))(handle, pArgPairs, uNumArgPairs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult OverrideArgs(this ComPtr<IDxcPdbUtils> comObj, ref ArgPair pArgPairs, uint uNumArgPairs) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (ArgPair* ppArgPairs = &pArgPairs)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, ArgPair*, uint, HResult>)(handle->LpVtbl[25]))(handle, (ArgPair*)ppArgPairs, uNumArgPairs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult OverrideRootSignature(this ComPtr<IDxcPdbUtils> comObj, char* pRootSignature) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, char*, HResult>)(handle->LpVtbl[26]))(handle, pRootSignature);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult OverrideRootSignature(this ComPtr<IDxcPdbUtils> comObj, ref char pRootSignature) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (char* ppRootSignature = &pRootSignature)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, char*, HResult>)(handle->LpVtbl[26]))(handle, (char*)ppRootSignature);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult OverrideRootSignature(this ComPtr<IDxcPdbUtils> comObj, ReadOnlySpan<char> pRootSignature) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (char* ppRootSignature = pRootSignature)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, char*, HResult>)(handle->LpVtbl[26]))(handle, (char*)ppRootSignature);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult OverrideRootSignature(this ComPtr<IDxcPdbUtils> comObj, string pRootSignature) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pRootSignature != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pRootSignature);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pRootSignature, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, char*, HResult>)(handle->LpVtbl[26]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

	}
}
