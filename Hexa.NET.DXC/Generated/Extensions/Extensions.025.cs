// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXC
{
	public static unsafe partial class Extensions
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pStr2, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char** ppArguments = &pArguments)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pStr1, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pStr1, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pStr2, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pStr0, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pStr1, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pStr1, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pStr2, pArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pStr0, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pStr1, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pStr1, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							fixed (Define* ppDefines = &pDefines)
							{
								int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pStr2, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, ppArgs);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, out ComPtr<IDxcCompilerArgs> ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppArgs = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)ppArgs.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pStr0, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pStr1, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pStr1, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pStr2, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, out ComPtr<IDxcCompilerArgs> ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppArgs = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)ppArgs.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pStr1, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pStr1, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
							{
								int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, Define* pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pStr2, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, out ComPtr<IDxcCompilerArgs> ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Define* ppDefines = &pDefines)
			{
				ppArgs = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)ppArgs.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pStr0, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pStr1, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pStr1, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
							{
								int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (Define* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pStr2, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, out ComPtr<IDxcCompilerArgs> ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					ppArgs = default;
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)ppArgs.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
							{
								int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pStr0, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
							{
								int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pStr1, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
							{
								int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pStr1, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							fixed (Define* ppDefines = &pDefines)
							{
								fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
								{
									int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pStr2, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, IDxcBlob** ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, pPDBBlob, ppHash, ppContainer);
			return ret;
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pPDBBlob, IDxcBlob** ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, (IDxcBlob*)ppPDBBlob, ppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pPDBBlob, IDxcBlob** ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, (IDxcBlob*)pPDBBlob.Handle, ppHash, ppContainer);
			return ret;
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, ref IDxcBlob* ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob** pppHash = &ppHash)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, pPDBBlob, (IDxcBlob**)pppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, ref ComPtr<IDxcBlob> ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* pppHash = &ppHash)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, pPDBBlob, (IDxcBlob**)pppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pPDBBlob, ref IDxcBlob* ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				fixed (IDxcBlob** pppHash = &ppHash)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, (IDxcBlob*)ppPDBBlob, (IDxcBlob**)pppHash, ppContainer);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pPDBBlob, ref ComPtr<IDxcBlob> ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* pppHash = &ppHash)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, (IDxcBlob*)pPDBBlob.Handle, (IDxcBlob**)pppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, IDxcBlob** ppHash, ref IDxcBlob* ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob** pppContainer = &ppContainer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, pPDBBlob, ppHash, (IDxcBlob**)pppContainer);
				return ret;
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, IDxcBlob** ppHash, out ComPtr<IDxcBlob> ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppContainer = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, pPDBBlob, ppHash, (IDxcBlob**)ppContainer.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pPDBBlob, IDxcBlob** ppHash, ref IDxcBlob* ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				fixed (IDxcBlob** pppContainer = &ppContainer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, (IDxcBlob*)ppPDBBlob, ppHash, (IDxcBlob**)pppContainer);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pPDBBlob, IDxcBlob** ppHash, out ComPtr<IDxcBlob> ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppContainer = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, (IDxcBlob*)pPDBBlob.Handle, ppHash, (IDxcBlob**)ppContainer.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, ref IDxcBlob* ppHash, ref IDxcBlob* ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob** pppHash = &ppHash)
			{
				fixed (IDxcBlob** pppContainer = &ppContainer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, pPDBBlob, (IDxcBlob**)pppHash, (IDxcBlob**)pppContainer);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, ref ComPtr<IDxcBlob> ppHash, out ComPtr<IDxcBlob> ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* pppHash = &ppHash)
			{
				ppContainer = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, pPDBBlob, (IDxcBlob**)pppHash, (IDxcBlob**)ppContainer.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pPDBBlob, ref IDxcBlob* ppHash, ref IDxcBlob* ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				fixed (IDxcBlob** pppHash = &ppHash)
				{
					fixed (IDxcBlob** pppContainer = &ppContainer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, (IDxcBlob*)ppPDBBlob, (IDxcBlob**)pppHash, (IDxcBlob**)pppContainer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		public static int GetPDBContents(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pPDBBlob, ref ComPtr<IDxcBlob> ppHash, out ComPtr<IDxcBlob> ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* pppHash = &ppHash)
			{
				ppContainer = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(handle->LpVtbl[15]))(handle, (IDxcBlob*)pPDBBlob.Handle, (IDxcBlob**)pppHash, (IDxcBlob**)ppContainer.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<IDxcResult> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcResult* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<IDxcResult> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcResult* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<IDxcResult> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcResult* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<IDxcResult> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcResult* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcResult> comObj) 
		{
			IDxcResult* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcResult> comObj) 
		{
			IDxcResult* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetStatus(this ComPtr<IDxcResult> comObj, int* pStatus) 
		{
			IDxcResult* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, int*, int>)(handle->LpVtbl[3]))(handle, pStatus);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetStatus(this ComPtr<IDxcResult> comObj, ref int pStatus) 
		{
			IDxcResult* handle = comObj.Handle;
			fixed (int* ppStatus = &pStatus)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, int*, int>)(handle->LpVtbl[3]))(handle, (int*)ppStatus);
				return ret;
			}
		}

		/// <summary>
		/// GetResult returns the main result of the operation.<br/>
		/// This corresponds to:<br/>
		/// DXC_OUT_OBJECT - Compile() with shader or library target<br/>
		/// DXC_OUT_DISASSEMBLY - Disassemble()<br/>
		/// DXC_OUT_HLSL - Compile() with -P<br/>
		/// DXC_OUT_ROOT_SIGNATURE - Compile() with rootsig_* target<br/>
		/// </summary>
		public static int GetResult(this ComPtr<IDxcResult> comObj, IDxcBlob** ppResult) 
		{
			IDxcResult* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, IDxcBlob**, int>)(handle->LpVtbl[4]))(handle, ppResult);
			return ret;
		}

		/// <summary>
		/// GetResult returns the main result of the operation.<br/>
		/// This corresponds to:<br/>
		/// DXC_OUT_OBJECT - Compile() with shader or library target<br/>
		/// DXC_OUT_DISASSEMBLY - Disassemble()<br/>
		/// DXC_OUT_HLSL - Compile() with -P<br/>
		/// DXC_OUT_ROOT_SIGNATURE - Compile() with rootsig_* target<br/>
		/// </summary>
		public static int GetResult(this ComPtr<IDxcResult> comObj, ref IDxcBlob* ppResult) 
		{
			IDxcResult* handle = comObj.Handle;
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, IDxcBlob**, int>)(handle->LpVtbl[4]))(handle, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// GetResult returns the main result of the operation.<br/>
		/// This corresponds to:<br/>
		/// DXC_OUT_OBJECT - Compile() with shader or library target<br/>
		/// DXC_OUT_DISASSEMBLY - Disassemble()<br/>
		/// DXC_OUT_HLSL - Compile() with -P<br/>
		/// DXC_OUT_ROOT_SIGNATURE - Compile() with rootsig_* target<br/>
		/// </summary>
		public static int GetResult(this ComPtr<IDxcResult> comObj, out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcResult* handle = comObj.Handle;
			ppResult = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, IDxcBlob**, int>)(handle->LpVtbl[4]))(handle, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// GetErrorBuffer Corresponds to DXC_OUT_ERRORS.<br/>
		/// </summary>
		public static int GetErrorBuffer(this ComPtr<IDxcResult> comObj, IDxcBlobEncoding** ppErrors) 
		{
			IDxcResult* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, IDxcBlobEncoding**, int>)(handle->LpVtbl[5]))(handle, ppErrors);
			return ret;
		}

		/// <summary>
		/// GetErrorBuffer Corresponds to DXC_OUT_ERRORS.<br/>
		/// </summary>
		public static int GetErrorBuffer(this ComPtr<IDxcResult> comObj, ref IDxcBlobEncoding* ppErrors) 
		{
			IDxcResult* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** pppErrors = &ppErrors)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, IDxcBlobEncoding**, int>)(handle->LpVtbl[5]))(handle, (IDxcBlobEncoding**)pppErrors);
				return ret;
			}
		}

		/// <summary>
		/// GetErrorBuffer Corresponds to DXC_OUT_ERRORS.<br/>
		/// </summary>
		public static int GetErrorBuffer(this ComPtr<IDxcResult> comObj, out ComPtr<IDxcBlobEncoding> ppErrors) 
		{
			IDxcResult* handle = comObj.Handle;
			ppErrors = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, IDxcBlobEncoding**, int>)(handle->LpVtbl[5]))(handle, (IDxcBlobEncoding**)ppErrors.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int HasOutput(this ComPtr<IDxcResult> comObj, OutKind dxcOutKind) 
		{
			IDxcResult* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, OutKind, int>)(handle->LpVtbl[6]))(handle, dxcOutKind);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcResult> comObj, OutKind dxcOutKind, Guid* iid, void** ppvObject, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcResult* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, OutKind, Guid*, void**, IDxcBlobUtf16**, int>)(handle->LpVtbl[7]))(handle, dxcOutKind, iid, ppvObject, ppOutputName);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcResult> comObj, OutKind dxcOutKind, ref Guid iid, void** ppvObject, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcResult* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, OutKind, Guid*, void**, IDxcBlobUtf16**, int>)(handle->LpVtbl[7]))(handle, dxcOutKind, (Guid*)piid, ppvObject, ppOutputName);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput<T>(this ComPtr<IDxcResult> comObj, OutKind dxcOutKind, ref ComPtr<T> ppvObject, IDxcBlobUtf16** ppOutputName) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcResult* handle = comObj.Handle;
			fixed (ComPtr<T>* pppvObject = &ppvObject)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, OutKind, Guid*, void**, IDxcBlobUtf16**, int>)(handle->LpVtbl[7]))(handle, dxcOutKind, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)pppvObject, ppOutputName);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput<T>(this ComPtr<IDxcResult> comObj, OutKind dxcOutKind, ref Guid iid, ref ComPtr<T> ppvObject, IDxcBlobUtf16** ppOutputName) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcResult* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (ComPtr<T>* pppvObject = &ppvObject)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, OutKind, Guid*, void**, IDxcBlobUtf16**, int>)(handle->LpVtbl[7]))(handle, dxcOutKind, (Guid*)piid, (void**)pppvObject, ppOutputName);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcResult> comObj, OutKind dxcOutKind, Guid* iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputName) 
		{
			IDxcResult* handle = comObj.Handle;
			fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, OutKind, Guid*, void**, IDxcBlobUtf16**, int>)(handle->LpVtbl[7]))(handle, dxcOutKind, iid, ppvObject, (IDxcBlobUtf16**)pppOutputName);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcResult> comObj, OutKind dxcOutKind, Guid* iid, void** ppvObject, out ComPtr<IDxcBlobUtf16> ppOutputName) 
		{
			IDxcResult* handle = comObj.Handle;
			ppOutputName = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, OutKind, Guid*, void**, IDxcBlobUtf16**, int>)(handle->LpVtbl[7]))(handle, dxcOutKind, iid, ppvObject, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcResult> comObj, OutKind dxcOutKind, ref Guid iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputName) 
		{
			IDxcResult* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, OutKind, Guid*, void**, IDxcBlobUtf16**, int>)(handle->LpVtbl[7]))(handle, dxcOutKind, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)pppOutputName);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcResult> comObj, OutKind dxcOutKind, ref Guid iid, void** ppvObject, out ComPtr<IDxcBlobUtf16> ppOutputName) 
		{
			IDxcResult* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				ppOutputName = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, OutKind, Guid*, void**, IDxcBlobUtf16**, int>)(handle->LpVtbl[7]))(handle, dxcOutKind, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput<T>(this ComPtr<IDxcResult> comObj, OutKind dxcOutKind, ref ComPtr<T> ppvObject, out ComPtr<IDxcBlobUtf16> ppOutputName) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcResult* handle = comObj.Handle;
			fixed (ComPtr<T>* pppvObject = &ppvObject)
			{
				ppOutputName = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, OutKind, Guid*, void**, IDxcBlobUtf16**, int>)(handle->LpVtbl[7]))(handle, dxcOutKind, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)pppvObject, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput<T>(this ComPtr<IDxcResult> comObj, OutKind dxcOutKind, ref Guid iid, ref ComPtr<T> ppvObject, out ComPtr<IDxcBlobUtf16> ppOutputName) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcResult* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (ComPtr<T>* pppvObject = &ppvObject)
				{
					ppOutputName = default;
					int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, OutKind, Guid*, void**, IDxcBlobUtf16**, int>)(handle->LpVtbl[7]))(handle, dxcOutKind, (Guid*)piid, (void**)pppvObject, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetNumOutputs(this ComPtr<IDxcResult> comObj) 
		{
			IDxcResult* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, uint>)(handle->LpVtbl[8]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static OutKind GetOutputByIndex(this ComPtr<IDxcResult> comObj, uint index) 
		{
			IDxcResult* handle = comObj.Handle;
			OutKind ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, uint, OutKind>)(handle->LpVtbl[9]))(handle, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static OutKind PrimaryOutput(this ComPtr<IDxcResult> comObj) 
		{
			IDxcResult* handle = comObj.Handle;
			OutKind ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, OutKind>)(handle->LpVtbl[10]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<IDxcExtraOutputs> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<IDxcExtraOutputs> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<IDxcExtraOutputs> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<IDxcExtraOutputs> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcExtraOutputs> comObj) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcExtraOutputs> comObj) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetOutputCount(this ComPtr<IDxcExtraOutputs> comObj) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint>)(handle->LpVtbl[3]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, Guid* iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, iid, ppvObject, ppOutputType, ppOutputName);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref Guid iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)piid, ppvObject, ppOutputType, ppOutputName);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput<T>(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref ComPtr<T> ppvObject, IDxcBlobUtf16** ppOutputType, IDxcBlobUtf16** ppOutputName) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (ComPtr<T>* pppvObject = &ppvObject)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)pppvObject, ppOutputType, ppOutputName);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput<T>(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref Guid iid, ref ComPtr<T> ppvObject, IDxcBlobUtf16** ppOutputType, IDxcBlobUtf16** ppOutputName) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (ComPtr<T>* pppvObject = &ppvObject)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)piid, (void**)pppvObject, ppOutputType, ppOutputName);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, Guid* iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputType, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (IDxcBlobUtf16** pppOutputType = &ppOutputType)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, iid, ppvObject, (IDxcBlobUtf16**)pppOutputType, ppOutputName);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, Guid* iid, void** ppvObject, ref ComPtr<IDxcBlobUtf16> ppOutputType, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlobUtf16>* pppOutputType = &ppOutputType)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, iid, ppvObject, (IDxcBlobUtf16**)pppOutputType, ppOutputName);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref Guid iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputType, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (IDxcBlobUtf16** pppOutputType = &ppOutputType)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)pppOutputType, ppOutputName);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref Guid iid, void** ppvObject, ref ComPtr<IDxcBlobUtf16> ppOutputType, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (ComPtr<IDxcBlobUtf16>* pppOutputType = &ppOutputType)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)pppOutputType, ppOutputName);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput<T>(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref ComPtr<T> ppvObject, ref ComPtr<IDxcBlobUtf16> ppOutputType, IDxcBlobUtf16** ppOutputName) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (ComPtr<T>* pppvObject = &ppvObject)
			{
				fixed (ComPtr<IDxcBlobUtf16>* pppOutputType = &ppOutputType)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)pppvObject, (IDxcBlobUtf16**)pppOutputType, ppOutputName);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput<T>(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref Guid iid, ref ComPtr<T> ppvObject, ref ComPtr<IDxcBlobUtf16> ppOutputType, IDxcBlobUtf16** ppOutputName) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (ComPtr<T>* pppvObject = &ppvObject)
				{
					fixed (ComPtr<IDxcBlobUtf16>* pppOutputType = &ppOutputType)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)piid, (void**)pppvObject, (IDxcBlobUtf16**)pppOutputType, ppOutputName);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, Guid* iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, ref IDxcBlobUtf16* ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, iid, ppvObject, ppOutputType, (IDxcBlobUtf16**)pppOutputName);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, Guid* iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, out ComPtr<IDxcBlobUtf16> ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			ppOutputName = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, iid, ppvObject, ppOutputType, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref Guid iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, ref IDxcBlobUtf16* ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)piid, ppvObject, ppOutputType, (IDxcBlobUtf16**)pppOutputName);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref Guid iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, out ComPtr<IDxcBlobUtf16> ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				ppOutputName = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)piid, ppvObject, ppOutputType, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput<T>(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref ComPtr<T> ppvObject, IDxcBlobUtf16** ppOutputType, out ComPtr<IDxcBlobUtf16> ppOutputName) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (ComPtr<T>* pppvObject = &ppvObject)
			{
				ppOutputName = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)pppvObject, ppOutputType, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput<T>(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref Guid iid, ref ComPtr<T> ppvObject, IDxcBlobUtf16** ppOutputType, out ComPtr<IDxcBlobUtf16> ppOutputName) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (ComPtr<T>* pppvObject = &ppvObject)
				{
					ppOutputName = default;
					int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)piid, (void**)pppvObject, ppOutputType, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, Guid* iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputType, ref IDxcBlobUtf16* ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (IDxcBlobUtf16** pppOutputType = &ppOutputType)
			{
				fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, iid, ppvObject, (IDxcBlobUtf16**)pppOutputType, (IDxcBlobUtf16**)pppOutputName);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, Guid* iid, void** ppvObject, ref ComPtr<IDxcBlobUtf16> ppOutputType, out ComPtr<IDxcBlobUtf16> ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlobUtf16>* pppOutputType = &ppOutputType)
			{
				ppOutputName = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, iid, ppvObject, (IDxcBlobUtf16**)pppOutputType, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref Guid iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputType, ref IDxcBlobUtf16* ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (IDxcBlobUtf16** pppOutputType = &ppOutputType)
				{
					fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)pppOutputType, (IDxcBlobUtf16**)pppOutputName);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref Guid iid, void** ppvObject, ref ComPtr<IDxcBlobUtf16> ppOutputType, out ComPtr<IDxcBlobUtf16> ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (ComPtr<IDxcBlobUtf16>* pppOutputType = &ppOutputType)
				{
					ppOutputName = default;
					int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)pppOutputType, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput<T>(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref ComPtr<T> ppvObject, ref ComPtr<IDxcBlobUtf16> ppOutputType, out ComPtr<IDxcBlobUtf16> ppOutputName) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (ComPtr<T>* pppvObject = &ppvObject)
			{
				fixed (ComPtr<IDxcBlobUtf16>* pppOutputType = &ppOutputType)
				{
					ppOutputName = default;
					int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)pppvObject, (IDxcBlobUtf16**)pppOutputType, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetOutput<T>(this ComPtr<IDxcExtraOutputs> comObj, uint uIndex, ref Guid iid, ref ComPtr<T> ppvObject, ref ComPtr<IDxcBlobUtf16> ppOutputType, out ComPtr<IDxcBlobUtf16> ppOutputName) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (ComPtr<T>* pppvObject = &ppvObject)
				{
					fixed (ComPtr<IDxcBlobUtf16>* pppOutputType = &ppOutputType)
					{
						ppOutputName = default;
						int ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, uint, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, int>)(handle->LpVtbl[4]))(handle, uIndex, (Guid*)piid, (void**)pppvObject, (IDxcBlobUtf16**)pppOutputType, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<IDxcCompiler3> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<IDxcCompiler3> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<IDxcCompiler3> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcCompiler3* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<IDxcCompiler3> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcCompiler3> comObj) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcCompiler3> comObj) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, char** pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pSource, pArguments, argCount, pIncludeHandler, riid, ppResult);
			return ret;
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, char** pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, pArguments, argCount, pIncludeHandler, riid, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, ref char* pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pSource, (char**)ppArguments, argCount, pIncludeHandler, riid, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, ref char* pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, riid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, char** pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, char** pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pSource, pArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, riid, ppResult);
			return ret;
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, char** pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, char** pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, riid, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, ref char* pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, ref char* pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, riid, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, ref char* pArguments, uint argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, ref char* pArguments, uint argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, riid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, Buffer* pSource, char** pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model,<br/>
		/// Compile a library to a library target (-T lib_*),<br/>
		/// Compile a root signature (-T rootsig_*), or<br/>
		/// Preprocess HLSL source (-P)<br/>
		/// </summary>
		public static int Compile(this ComPtr<IDxcCompiler3> comObj, ref Buffer pSource, char** pArguments, uint argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Buffer* ppSource = &pSource)
			{
				fixed (Guid* priid = &riid)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, Buffer*, char**, uint, IDxcIncludeHandler*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Buffer*)ppSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}
	}
}
