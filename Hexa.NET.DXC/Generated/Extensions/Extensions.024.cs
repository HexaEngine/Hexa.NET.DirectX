// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXC
{
	public static unsafe partial class Extensions
	{

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char* ppEntryPoint = pEntryPoint)
					{
						fixed (char* ppTargetProfile = pTargetProfile)
						{
							fixed (Define* ppDefines = &pDefines)
							{
								fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
								{
									fixed (IDxcOperationResult** pppResult = &ppResult)
									{
										fixed (char** pppDebugBlobName = &ppDebugBlobName)
										{
											fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
											{
												int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
												return ret;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, string pSourceName, string pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				char* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntryPoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = (char*)pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = '\0';
				}
				char* pStr2 = null;
				int pStrSize2 = 0;
				if (pTargetProfile != null)
				{
					pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = (char*)pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
					pStr2[pStrOffset2] = '\0';
				}
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (char** pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, pStr0, pStr1, pStr2, pArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									if (pStrSize2 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr2);
									}
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr1);
									}
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (char** pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref char* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						fixed (char** pppDebugBlobName = &ppDebugBlobName)
						{
							ppDebugBlob = default;
							int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (char** pppDebugBlobName = &ppDebugBlobName)
								{
									fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
									{
										int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref char* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						fixed (char** pppDebugBlobName = &ppDebugBlobName)
						{
							ppDebugBlob = default;
							int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)pSource.Handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)pIncludeHandler.Handle, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (char** pppDebugBlobName = &ppDebugBlobName)
								{
									fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
									{
										int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, (char*)ppSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (char** pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, pStr0, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
							{
								fixed (IDxcOperationResult** pppResult = &ppResult)
								{
									fixed (char** pppDebugBlobName = &ppDebugBlobName)
									{
										fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
										{
											int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, string pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (char** pppDebugBlobName = &ppDebugBlobName)
								{
									fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
									{
										int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, pStr0, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
										if (pStrSize0 >= Utils.MaxStackallocSize)
										{
											Utils.Free(pStr0);
										}
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (char** pppDebugBlobName = &ppDebugBlobName)
								{
									fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
									{
										int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, pSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (char** pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, pSourceName, pStr0, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
							{
								fixed (IDxcOperationResult** pppResult = &ppResult)
								{
									fixed (char** pppDebugBlobName = &ppDebugBlobName)
									{
										fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
										{
											int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, pSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (char** pppDebugBlobName = &ppDebugBlobName)
								{
									fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
									{
										int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, pSourceName, pStr0, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
										if (pStrSize0 >= Utils.MaxStackallocSize)
										{
											Utils.Free(pStr0);
										}
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
							{
								fixed (IDxcOperationResult** pppResult = &ppResult)
								{
									fixed (char** pppDebugBlobName = &ppDebugBlobName)
									{
										fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
										{
											int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, string pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (char** pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, pStr0, pStr1, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr1);
									}
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char* ppEntryPoint = pEntryPoint)
					{
						fixed (char** ppArguments = &pArguments)
						{
							fixed (Define* ppDefines = &pDefines)
							{
								fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
								{
									fixed (IDxcOperationResult** pppResult = &ppResult)
									{
										fixed (char** pppDebugBlobName = &ppDebugBlobName)
										{
											fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
											{
												int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
												return ret;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, string pSourceName, string pEntryPoint, char* pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				char* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntryPoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = (char*)pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (char** pppDebugBlobName = &ppDebugBlobName)
								{
									fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
									{
										int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, pStr0, pStr1, pTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
										if (pStrSize1 >= Utils.MaxStackallocSize)
										{
											Utils.Free(pStr1);
										}
										if (pStrSize0 >= Utils.MaxStackallocSize)
										{
											Utils.Free(pStr0);
										}
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (char** pppDebugBlobName = &ppDebugBlobName)
								{
									fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
									{
										int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, pSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (char** pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, pSourceName, pEntryPoint, pStr0, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
							{
								fixed (IDxcOperationResult** pppResult = &ppResult)
								{
									fixed (char** pppDebugBlobName = &ppDebugBlobName)
									{
										fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
										{
											int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetProfile != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (char** pppDebugBlobName = &ppDebugBlobName)
								{
									fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
									{
										int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pStr0, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
										if (pStrSize0 >= Utils.MaxStackallocSize)
										{
											Utils.Free(pStr0);
										}
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
							{
								fixed (IDxcOperationResult** pppResult = &ppResult)
								{
									fixed (char** pppDebugBlobName = &ppDebugBlobName)
									{
										fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
										{
											int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, string pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (char** pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, pStr0, pEntryPoint, pStr1, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr1);
									}
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							fixed (Define* ppDefines = &pDefines)
							{
								fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
								{
									fixed (IDxcOperationResult** pppResult = &ppResult)
									{
										fixed (char** pppDebugBlobName = &ppDebugBlobName)
										{
											fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
											{
												int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
												return ret;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, string pSourceName, char* pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				char* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetProfile != null)
				{
					pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = (char*)pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
					pStr1[pStrOffset1] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (char** pppDebugBlobName = &ppDebugBlobName)
								{
									fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
									{
										int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, pStr0, pEntryPoint, pStr1, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
										if (pStrSize1 >= Utils.MaxStackallocSize)
										{
											Utils.Free(pStr1);
										}
										if (pStrSize0 >= Utils.MaxStackallocSize)
										{
											Utils.Free(pStr0);
										}
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (Define* ppDefines = &pDefines)
						{
							fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
							{
								fixed (IDxcOperationResult** pppResult = &ppResult)
								{
									fixed (char** pppDebugBlobName = &ppDebugBlobName)
									{
										fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
										{
											int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (char** pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, pSourceName, pStr0, pStr1, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr1);
									}
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							fixed (Define* ppDefines = &pDefines)
							{
								fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
								{
									fixed (IDxcOperationResult** pppResult = &ppResult)
									{
										fixed (char** pppDebugBlobName = &ppDebugBlobName)
										{
											fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
											{
												int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
												return ret;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				char* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetProfile != null)
				{
					pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = (char*)pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
					pStr1[pStrOffset1] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (char** pppDebugBlobName = &ppDebugBlobName)
								{
									fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
									{
										int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, pSourceName, pStr0, pStr1, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
										if (pStrSize1 >= Utils.MaxStackallocSize)
										{
											Utils.Free(pStr1);
										}
										if (pStrSize0 >= Utils.MaxStackallocSize)
										{
											Utils.Free(pStr0);
										}
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							fixed (Define* ppDefines = &pDefines)
							{
								fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
								{
									fixed (IDxcOperationResult** pppResult = &ppResult)
									{
										fixed (char** pppDebugBlobName = &ppDebugBlobName)
										{
											fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
											{
												int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
												return ret;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, string pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Define* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (char** pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, pSource, pStr0, pStr1, pStr2, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									if (pStrSize2 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr2);
									}
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr1);
									}
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char* ppSourceName = pSourceName)
				{
					fixed (char* ppEntryPoint = pEntryPoint)
					{
						fixed (char* ppTargetProfile = pTargetProfile)
						{
							fixed (char** ppArguments = &pArguments)
							{
								fixed (Define* ppDefines = &pDefines)
								{
									fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
									{
										fixed (IDxcOperationResult** pppResult = &ppResult)
										{
											fixed (char** pppDebugBlobName = &ppDebugBlobName)
											{
												fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
												{
													int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
													return ret;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compile a single entry point to the target shader model with debug information.<br/>
		/// </summary>
		public static int CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, string pSourceName, string pEntryPoint, string pTargetProfile, ref char* pArguments, uint argCount, ref Define pDefines, uint defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref char* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (pSourceName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				char* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntryPoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = (char*)pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = '\0';
				}
				char* pStr2 = null;
				int pStrSize2 = 0;
				if (pTargetProfile != null)
				{
					pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = (char*)pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
					pStr2[pStrOffset2] = '\0';
				}
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Define* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (char** pppDebugBlobName = &ppDebugBlobName)
								{
									fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
									{
										int ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, uint, Define*, uint, IDxcIncludeHandler*, IDxcOperationResult**, char**, IDxcBlob**, int>)(handle->LpVtbl[6]))(handle, (IDxcBlob*)ppSource, pStr0, pStr1, pStr2, (char**)ppArguments, argCount, (Define*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (char**)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
										if (pStrSize2 >= Utils.MaxStackallocSize)
										{
											Utils.Free(pStr2);
										}
										if (pStrSize1 >= Utils.MaxStackallocSize)
										{
											Utils.Free(pStr1);
										}
										if (pStrSize0 >= Utils.MaxStackallocSize)
										{
											Utils.Free(pStr0);
										}
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<IDxcLinker> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcLinker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<IDxcLinker> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<IDxcLinker> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcLinker* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<IDxcLinker> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcLinker> comObj) 
		{
			IDxcLinker* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcLinker> comObj) 
		{
			IDxcLinker* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// Register a library with name to ref it later.<br/>
		/// </summary>
		public static int RegisterLibrary(this ComPtr<IDxcLinker> comObj, char* pLibName, IDxcBlob* pLib) 
		{
			IDxcLinker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, IDxcBlob*, int>)(handle->LpVtbl[3]))(handle, pLibName, pLib);
			return ret;
		}

		/// <summary>
		/// Register a library with name to ref it later.<br/>
		/// </summary>
		public static int RegisterLibrary(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pLibName, IDxcBlob* pLib) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppLibName = pLibName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, IDxcBlob*, int>)(handle->LpVtbl[3]))(handle, (char*)ppLibName, pLib);
				return ret;
			}
		}

		/// <summary>
		/// Register a library with name to ref it later.<br/>
		/// </summary>
		public static int RegisterLibrary(this ComPtr<IDxcLinker> comObj, string pLibName, IDxcBlob* pLib) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pLibName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pLibName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pLibName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, IDxcBlob*, int>)(handle->LpVtbl[3]))(handle, pStr0, pLib);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Register a library with name to ref it later.<br/>
		/// </summary>
		public static int RegisterLibrary(this ComPtr<IDxcLinker> comObj, char* pLibName, ref IDxcBlob pLib) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (IDxcBlob* ppLib = &pLib)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, IDxcBlob*, int>)(handle->LpVtbl[3]))(handle, pLibName, (IDxcBlob*)ppLib);
				return ret;
			}
		}

		/// <summary>
		/// Register a library with name to ref it later.<br/>
		/// </summary>
		public static int RegisterLibrary(this ComPtr<IDxcLinker> comObj, char* pLibName, ComPtr<IDxcBlob> pLib) 
		{
			IDxcLinker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, IDxcBlob*, int>)(handle->LpVtbl[3]))(handle, pLibName, (IDxcBlob*)pLib.Handle);
			return ret;
		}

		/// <summary>
		/// Register a library with name to ref it later.<br/>
		/// </summary>
		public static int RegisterLibrary(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pLibName, ref IDxcBlob pLib) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppLibName = pLibName)
			{
				fixed (IDxcBlob* ppLib = &pLib)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, IDxcBlob*, int>)(handle->LpVtbl[3]))(handle, (char*)ppLibName, (IDxcBlob*)ppLib);
					return ret;
				}
			}
		}

		/// <summary>
		/// Register a library with name to ref it later.<br/>
		/// </summary>
		public static int RegisterLibrary(this ComPtr<IDxcLinker> comObj, string pLibName, ref IDxcBlob pLib) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pLibName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pLibName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pLibName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcBlob* ppLib = &pLib)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, IDxcBlob*, int>)(handle->LpVtbl[3]))(handle, pStr0, (IDxcBlob*)ppLib);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pTargetProfile, pLibNames, libCount, pArguments, argCount, ppResult);
			return ret;
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, pTargetProfile, pLibNames, libCount, pArguments, argCount, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pTargetProfile, pLibNames, libCount, pArguments, argCount, ppResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, ReadOnlySpan<char> pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, (char*)ppTargetProfile, pLibNames, libCount, pArguments, argCount, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, string pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pStr0, pLibNames, libCount, pArguments, argCount, ppResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, ReadOnlySpan<char> pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, (char*)ppTargetProfile, pLibNames, libCount, pArguments, argCount, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, string pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pStr1, pLibNames, libCount, pArguments, argCount, ppResult);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppLibNames = &pLibNames)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char** ppLibNames = &pLibNames)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, pTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppLibNames = &pLibNames)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, ReadOnlySpan<char> pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppLibNames = &pLibNames)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, (char*)ppTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, string pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppLibNames = &pLibNames)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pStr0, (char**)ppLibNames, libCount, pArguments, argCount, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, ReadOnlySpan<char> pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppLibNames = &pLibNames)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, (char*)ppTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, string pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppLibNames = &pLibNames)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pStr1, (char**)ppLibNames, libCount, pArguments, argCount, ppResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, pTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, ReadOnlySpan<char> pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, (char*)ppTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, string pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pStr0, pLibNames, libCount, (char**)ppArguments, argCount, ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, ReadOnlySpan<char> pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, (char*)ppTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, string pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pStr1, pLibNames, libCount, (char**)ppArguments, argCount, ppResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char** ppLibNames = &pLibNames)
				{
					fixed (char** ppArguments = &pArguments)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, pTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, ReadOnlySpan<char> pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppLibNames = &pLibNames)
				{
					fixed (char** ppArguments = &pArguments)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, (char*)ppTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, string pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pStr0, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, ReadOnlySpan<char> pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppLibNames = &pLibNames)
					{
						fixed (char** ppArguments = &pArguments)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, (char*)ppTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, string pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pStr1, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, ppResult);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pTargetProfile, pLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			ppResult = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pTargetProfile, pLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, pTargetProfile, pLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pTargetProfile, pLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, ReadOnlySpan<char> pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, (char*)ppTargetProfile, pLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, string pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pStr0, pLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, ReadOnlySpan<char> pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, (char*)ppTargetProfile, pLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, string pTargetProfile, char** pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pStr1, pLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppLibNames = &pLibNames)
			{
				ppResult = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char** ppLibNames = &pLibNames)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, pTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, ReadOnlySpan<char> pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppLibNames = &pLibNames)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, (char*)ppTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, string pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pStr0, (char**)ppLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, ReadOnlySpan<char> pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppLibNames = &pLibNames)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, (char*)ppTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, string pTargetProfile, ref char* pLibNames, uint libCount, char** pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pStr1, (char**)ppLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, pTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, char* pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, ReadOnlySpan<char> pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, (char*)ppTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, string pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pStr0, pLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, ReadOnlySpan<char> pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, (char*)ppTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, string pTargetProfile, char** pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pStr1, pLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					ppResult = default;
					int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char** ppLibNames = &pLibNames)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, pTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, char* pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, ReadOnlySpan<char> pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppLibNames = &pLibNames)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, (char*)ppTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, string pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pEntryName, pStr0, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, ReadOnlySpan<char> pEntryName, ReadOnlySpan<char> pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char* ppEntryName = pEntryName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppLibNames = &pLibNames)
					{
						fixed (char** ppArguments = &pArguments)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, (char*)ppEntryName, (char*)ppTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>
		/// use.<br/>
		/// </summary>
		public static int Link(this ComPtr<IDxcLinker> comObj, string pEntryName, string pTargetProfile, ref char* pLibNames, uint libCount, ref char* pArguments, uint argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, uint, char**, uint, IDxcOperationResult**, int>)(handle->LpVtbl[4]))(handle, pStr0, pStr1, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<IDxcUtils> comObj, Guid* riid, void** ppvObject) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<IDxcUtils> comObj, ref Guid riid, void** ppvObject) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<IDxcUtils> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<IDxcUtils> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDxcUtils> comObj) 
		{
			IDxcUtils* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDxcUtils> comObj) 
		{
			IDxcUtils* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		public static int CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, uint offset, uint length, IDxcBlob** ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(handle->LpVtbl[3]))(handle, pBlob, offset, length, ppResult);
			return ret;
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		public static int CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, uint offset, uint length, IDxcBlob** ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppBlob, offset, length, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		public static int CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, uint offset, uint length, IDxcBlob** ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pBlob.Handle, offset, length, ppResult);
			return ret;
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		public static int CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, uint offset, uint length, ref IDxcBlob* ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(handle->LpVtbl[3]))(handle, pBlob, offset, length, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		public static int CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, uint offset, uint length, out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppResult = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(handle->LpVtbl[3]))(handle, pBlob, offset, length, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		public static int CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, uint offset, uint length, ref IDxcBlob* ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlob** pppResult = &ppResult)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)ppBlob, offset, length, (IDxcBlob**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		public static int CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, uint offset, uint length, out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppResult = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(handle->LpVtbl[3]))(handle, (IDxcBlob*)pBlob.Handle, offset, length, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Creates a blob referencing existing memory, with no copy.<br/>
		/// User must manage the memory lifetime separately.<br/>
		/// (was: CreateBlobWithEncodingFromPinned)<br/>
		/// </summary>
		public static int CreateBlobFromPinned(this ComPtr<IDxcUtils> comObj, void* pData, uint size, uint codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, uint, uint, IDxcBlobEncoding**, int>)(handle->LpVtbl[4]))(handle, pData, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// Creates a blob referencing existing memory, with no copy.<br/>
		/// User must manage the memory lifetime separately.<br/>
		/// (was: CreateBlobWithEncodingFromPinned)<br/>
		/// </summary>
		public static int CreateBlobFromPinned(this ComPtr<IDxcUtils> comObj, void* pData, uint size, uint codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, uint, uint, IDxcBlobEncoding**, int>)(handle->LpVtbl[4]))(handle, pData, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// Creates a blob referencing existing memory, with no copy.<br/>
		/// User must manage the memory lifetime separately.<br/>
		/// (was: CreateBlobWithEncodingFromPinned)<br/>
		/// </summary>
		public static int CreateBlobFromPinned(this ComPtr<IDxcUtils> comObj, void* pData, uint size, uint codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, uint, uint, IDxcBlobEncoding**, int>)(handle->LpVtbl[4]))(handle, pData, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		public static int MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, IMalloc* pIMalloc, uint size, uint codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(handle->LpVtbl[5]))(handle, pData, pIMalloc, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		public static int MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, ref IMalloc pIMalloc, uint size, uint codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IMalloc* ppIMalloc = &pIMalloc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(handle->LpVtbl[5]))(handle, pData, (IMalloc*)ppIMalloc, size, codePage, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		public static int MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, ComPtr<IMalloc> pIMalloc, uint size, uint codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(handle->LpVtbl[5]))(handle, pData, (IMalloc*)pIMalloc.Handle, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		public static int MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, IMalloc* pIMalloc, uint size, uint codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(handle->LpVtbl[5]))(handle, pData, pIMalloc, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		public static int MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, IMalloc* pIMalloc, uint size, uint codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(handle->LpVtbl[5]))(handle, pData, pIMalloc, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		public static int MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, ref IMalloc pIMalloc, uint size, uint codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IMalloc* ppIMalloc = &pIMalloc)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(handle->LpVtbl[5]))(handle, pData, (IMalloc*)ppIMalloc, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		public static int MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, ComPtr<IMalloc> pIMalloc, uint size, uint codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(handle->LpVtbl[5]))(handle, pData, (IMalloc*)pIMalloc.Handle, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Copy blob contents to memory owned by the new blob.<br/>
		/// (was: CreateBlobWithEncodingOnHeapCopy)<br/>
		/// </summary>
		public static int CreateBlob(this ComPtr<IDxcUtils> comObj, void* pData, uint size, uint codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, uint, uint, IDxcBlobEncoding**, int>)(handle->LpVtbl[6]))(handle, pData, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// Copy blob contents to memory owned by the new blob.<br/>
		/// (was: CreateBlobWithEncodingOnHeapCopy)<br/>
		/// </summary>
		public static int CreateBlob(this ComPtr<IDxcUtils> comObj, void* pData, uint size, uint codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, uint, uint, IDxcBlobEncoding**, int>)(handle->LpVtbl[6]))(handle, pData, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// Copy blob contents to memory owned by the new blob.<br/>
		/// (was: CreateBlobWithEncodingOnHeapCopy)<br/>
		/// </summary>
		public static int CreateBlob(this ComPtr<IDxcUtils> comObj, void* pData, uint size, uint codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, uint, uint, IDxcBlobEncoding**, int>)(handle->LpVtbl[6]))(handle, pData, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, char* pFileName, uint* pCodePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, pFileName, pCodePage, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pFileName, uint* pCodePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppFileName = pFileName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, (char*)ppFileName, pCodePage, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, string pFileName, uint* pCodePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, pStr0, pCodePage, pBlobEncoding);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, char* pFileName, ref uint pCodePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (uint* ppCodePage = &pCodePage)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, pFileName, (uint*)ppCodePage, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pFileName, ref uint pCodePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppFileName = pFileName)
			{
				fixed (uint* ppCodePage = &pCodePage)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, (char*)ppFileName, (uint*)ppCodePage, pBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, string pFileName, ref uint pCodePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (uint* ppCodePage = &pCodePage)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, pStr0, (uint*)ppCodePage, pBlobEncoding);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, char* pFileName, uint* pCodePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, pFileName, pCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, char* pFileName, uint* pCodePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, pFileName, pCodePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pFileName, uint* pCodePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppFileName = pFileName)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, (char*)ppFileName, pCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, string pFileName, uint* pCodePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, pStr0, pCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, char* pFileName, ref uint pCodePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (uint* ppCodePage = &pCodePage)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, pFileName, (uint*)ppCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, char* pFileName, ref uint pCodePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (uint* ppCodePage = &pCodePage)
			{
				pBlobEncoding = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, pFileName, (uint*)ppCodePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pFileName, ref uint pCodePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppFileName = pFileName)
			{
				fixed (uint* ppCodePage = &pCodePage)
				{
					fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, (char*)ppFileName, (uint*)ppCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		public static int LoadFile(this ComPtr<IDxcUtils> comObj, string pFileName, ref uint pCodePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (uint* ppCodePage = &pCodePage)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(handle->LpVtbl[7]))(handle, pStr0, (uint*)ppCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, IStream** ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(handle->LpVtbl[8]))(handle, pBlob, ppStream);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, IStream** ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(handle->LpVtbl[8]))(handle, (IDxcBlob*)ppBlob, ppStream);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, IStream** ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(handle->LpVtbl[8]))(handle, (IDxcBlob*)pBlob.Handle, ppStream);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, ref IStream* ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IStream** pppStream = &ppStream)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(handle->LpVtbl[8]))(handle, pBlob, (IStream**)pppStream);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, out ComPtr<IStream> ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppStream = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(handle->LpVtbl[8]))(handle, pBlob, (IStream**)ppStream.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, ref IStream* ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IStream** pppStream = &ppStream)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(handle->LpVtbl[8]))(handle, (IDxcBlob*)ppBlob, (IStream**)pppStream);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, out ComPtr<IStream> ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppStream = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(handle->LpVtbl[8]))(handle, (IDxcBlob*)pBlob.Handle, (IStream**)ppStream.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Create default file-based include handler<br/>
		/// </summary>
		public static int CreateDefaultIncludeHandler(this ComPtr<IDxcUtils> comObj, IDxcIncludeHandler** ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcIncludeHandler**, int>)(handle->LpVtbl[9]))(handle, ppResult);
			return ret;
		}

		/// <summary>
		/// Create default file-based include handler<br/>
		/// </summary>
		public static int CreateDefaultIncludeHandler(this ComPtr<IDxcUtils> comObj, ref IDxcIncludeHandler* ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcIncludeHandler** pppResult = &ppResult)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcIncludeHandler**, int>)(handle->LpVtbl[9]))(handle, (IDxcIncludeHandler**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// Create default file-based include handler<br/>
		/// </summary>
		public static int CreateDefaultIncludeHandler(this ComPtr<IDxcUtils> comObj, out ComPtr<IDxcIncludeHandler> ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppResult = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcIncludeHandler**, int>)(handle->LpVtbl[9]))(handle, (IDxcIncludeHandler**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		public static int GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, IDxcBlobUtf8** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(handle->LpVtbl[10]))(handle, pBlob, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		public static int GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, IDxcBlobUtf8** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(handle->LpVtbl[10]))(handle, (IDxcBlob*)ppBlob, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		public static int GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, IDxcBlobUtf8** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(handle->LpVtbl[10]))(handle, (IDxcBlob*)pBlob.Handle, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		public static int GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, ref IDxcBlobUtf8* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlobUtf8** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(handle->LpVtbl[10]))(handle, pBlob, (IDxcBlobUtf8**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		public static int GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, out ComPtr<IDxcBlobUtf8> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(handle->LpVtbl[10]))(handle, pBlob, (IDxcBlobUtf8**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		public static int GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, ref IDxcBlobUtf8* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobUtf8** ppBlobEncoding = &pBlobEncoding)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(handle->LpVtbl[10]))(handle, (IDxcBlob*)ppBlob, (IDxcBlobUtf8**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		public static int GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, out ComPtr<IDxcBlobUtf8> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(handle->LpVtbl[10]))(handle, (IDxcBlob*)pBlob.Handle, (IDxcBlobUtf8**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, IDxcBlobUtf16** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(handle->LpVtbl[11]))(handle, pBlob, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, IDxcBlobUtf16** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(handle->LpVtbl[11]))(handle, (IDxcBlob*)ppBlob, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, IDxcBlobUtf16** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(handle->LpVtbl[11]))(handle, (IDxcBlob*)pBlob.Handle, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, ref IDxcBlobUtf16* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlobUtf16** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(handle->LpVtbl[11]))(handle, pBlob, (IDxcBlobUtf16**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, out ComPtr<IDxcBlobUtf16> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(handle->LpVtbl[11]))(handle, pBlob, (IDxcBlobUtf16**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, ref IDxcBlobUtf16* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobUtf16** ppBlobEncoding = &pBlobEncoding)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(handle->LpVtbl[11]))(handle, (IDxcBlob*)ppBlob, (IDxcBlobUtf16**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, out ComPtr<IDxcBlobUtf16> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(handle->LpVtbl[11]))(handle, (IDxcBlob*)pBlob.Handle, (IDxcBlobUtf16**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDxilContainerPart(this ComPtr<IDxcUtils> comObj, Buffer* pShader, uint dxcPart, void** ppPartData, uint* pPartSizeInBytes) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, uint, void**, uint*, int>)(handle->LpVtbl[12]))(handle, pShader, dxcPart, ppPartData, pPartSizeInBytes);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDxilContainerPart(this ComPtr<IDxcUtils> comObj, ref Buffer pShader, uint dxcPart, void** ppPartData, uint* pPartSizeInBytes) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Buffer* ppShader = &pShader)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, uint, void**, uint*, int>)(handle->LpVtbl[12]))(handle, (Buffer*)ppShader, dxcPart, ppPartData, pPartSizeInBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDxilContainerPart<T>(this ComPtr<IDxcUtils> comObj, Buffer* pShader, uint dxcPart, ref ComPtr<T> ppPartData, uint* pPartSizeInBytes) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (ComPtr<T>* pppPartData = &ppPartData)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, uint, void**, uint*, int>)(handle->LpVtbl[12]))(handle, pShader, dxcPart, (void**)pppPartData, pPartSizeInBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDxilContainerPart<T>(this ComPtr<IDxcUtils> comObj, ref Buffer pShader, uint dxcPart, ref ComPtr<T> ppPartData, uint* pPartSizeInBytes) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Buffer* ppShader = &pShader)
			{
				fixed (ComPtr<T>* pppPartData = &ppPartData)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, uint, void**, uint*, int>)(handle->LpVtbl[12]))(handle, (Buffer*)ppShader, dxcPart, (void**)pppPartData, pPartSizeInBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDxilContainerPart(this ComPtr<IDxcUtils> comObj, Buffer* pShader, uint dxcPart, void** ppPartData, ref uint pPartSizeInBytes) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (uint* ppPartSizeInBytes = &pPartSizeInBytes)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, uint, void**, uint*, int>)(handle->LpVtbl[12]))(handle, pShader, dxcPart, ppPartData, (uint*)ppPartSizeInBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDxilContainerPart(this ComPtr<IDxcUtils> comObj, ref Buffer pShader, uint dxcPart, void** ppPartData, ref uint pPartSizeInBytes) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Buffer* ppShader = &pShader)
			{
				fixed (uint* ppPartSizeInBytes = &pPartSizeInBytes)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, uint, void**, uint*, int>)(handle->LpVtbl[12]))(handle, (Buffer*)ppShader, dxcPart, ppPartData, (uint*)ppPartSizeInBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDxilContainerPart<T>(this ComPtr<IDxcUtils> comObj, Buffer* pShader, uint dxcPart, ref ComPtr<T> ppPartData, ref uint pPartSizeInBytes) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (ComPtr<T>* pppPartData = &ppPartData)
			{
				fixed (uint* ppPartSizeInBytes = &pPartSizeInBytes)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, uint, void**, uint*, int>)(handle->LpVtbl[12]))(handle, pShader, dxcPart, (void**)pppPartData, (uint*)ppPartSizeInBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDxilContainerPart<T>(this ComPtr<IDxcUtils> comObj, ref Buffer pShader, uint dxcPart, ref ComPtr<T> ppPartData, ref uint pPartSizeInBytes) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Buffer* ppShader = &pShader)
			{
				fixed (ComPtr<T>* pppPartData = &ppPartData)
				{
					fixed (uint* ppPartSizeInBytes = &pPartSizeInBytes)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, uint, void**, uint*, int>)(handle->LpVtbl[12]))(handle, (Buffer*)ppShader, dxcPart, (void**)pppPartData, (uint*)ppPartSizeInBytes);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		public static int CreateReflection(this ComPtr<IDxcUtils> comObj, Buffer* pData, Guid* iid, void** ppvReflection) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, Guid*, void**, int>)(handle->LpVtbl[13]))(handle, pData, iid, ppvReflection);
			return ret;
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		public static int CreateReflection(this ComPtr<IDxcUtils> comObj, ref Buffer pData, Guid* iid, void** ppvReflection) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Buffer* ppData = &pData)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, Guid*, void**, int>)(handle->LpVtbl[13]))(handle, (Buffer*)ppData, iid, ppvReflection);
				return ret;
			}
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		public static int CreateReflection(this ComPtr<IDxcUtils> comObj, Buffer* pData, ref Guid iid, void** ppvReflection) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, Guid*, void**, int>)(handle->LpVtbl[13]))(handle, pData, (Guid*)piid, ppvReflection);
				return ret;
			}
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		public static int CreateReflection(this ComPtr<IDxcUtils> comObj, ref Buffer pData, ref Guid iid, void** ppvReflection) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Buffer* ppData = &pData)
			{
				fixed (Guid* piid = &iid)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, Guid*, void**, int>)(handle->LpVtbl[13]))(handle, (Buffer*)ppData, (Guid*)piid, ppvReflection);
					return ret;
				}
			}
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		public static int CreateReflection<T>(this ComPtr<IDxcUtils> comObj, Buffer* pData, out ComPtr<T> ppvReflection) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* handle = comObj.Handle;
			ppvReflection = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, Guid*, void**, int>)(handle->LpVtbl[13]))(handle, pData, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvReflection.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		public static int CreateReflection<T>(this ComPtr<IDxcUtils> comObj, ref Buffer pData, out ComPtr<T> ppvReflection) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Buffer* ppData = &pData)
			{
				ppvReflection = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, Guid*, void**, int>)(handle->LpVtbl[13]))(handle, (Buffer*)ppData, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvReflection.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		public static int CreateReflection<T>(this ComPtr<IDxcUtils> comObj, Buffer* pData, ref Guid iid, out ComPtr<T> ppvReflection) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				ppvReflection = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, Guid*, void**, int>)(handle->LpVtbl[13]))(handle, pData, (Guid*)piid, (void**)ppvReflection.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		public static int CreateReflection<T>(this ComPtr<IDxcUtils> comObj, ref Buffer pData, ref Guid iid, out ComPtr<T> ppvReflection) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Buffer* ppData = &pData)
			{
				fixed (Guid* piid = &iid)
				{
					ppvReflection = default;
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Buffer*, Guid*, void**, int>)(handle->LpVtbl[13]))(handle, (Buffer*)ppData, (Guid*)piid, (void**)ppvReflection.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, string pEntryPoint, char* pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pStr1, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pEntryPoint, pStr0, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, char* pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, string pSourceName, char* pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pStr0, pEntryPoint, pStr1, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, string pEntryPoint, string pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, pSourceName, pStr0, pStr1, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int BuildArguments(this ComPtr<IDxcUtils> comObj, ReadOnlySpan<char> pSourceName, ReadOnlySpan<char> pEntryPoint, ReadOnlySpan<char> pTargetProfile, char** pArguments, uint argCount, Define* pDefines, uint defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, Define*, uint, IDxcCompilerArgs**, int>)(handle->LpVtbl[14]))(handle, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}
	}
}
