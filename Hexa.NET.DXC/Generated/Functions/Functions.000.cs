// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXC
{
	public unsafe partial class DXC
	{
		/// <summary>
		/// <br/>
		/// <summary<br/>
		/// ><br/>
		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>
		/// <br/>
		/// </summary<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="rclsid"><br/>
		/// The CLSID associated with the data and code that will be used to create the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="riid"><br/>
		/// A reference to the identifier of the interface to be used to communicate<br/>
		/// with the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="ppv"><br/>
		/// Address of pointer variable that receives the interface pointer requested<br/>
		/// in riid. Upon successful return, *ppv contains the requested interface<br/>
		/// pointer. Upon failure, *ppv contains NULL.<br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <remarks<br/>
		/// ><br/>
		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>
		/// <br/>
		/// </remarks<br/>
		/// ><br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int CreateInstanceNative(Guid* rclsid, Guid* riid, void** ppv)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Guid*, Guid*, void**, int>)funcTable[0])(rclsid, riid, ppv);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)funcTable[0])((nint)rclsid, (nint)riid, (nint)ppv);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary<br/>
		/// ><br/>
		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>
		/// <br/>
		/// </summary<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="rclsid"><br/>
		/// The CLSID associated with the data and code that will be used to create the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="riid"><br/>
		/// A reference to the identifier of the interface to be used to communicate<br/>
		/// with the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="ppv"><br/>
		/// Address of pointer variable that receives the interface pointer requested<br/>
		/// in riid. Upon successful return, *ppv contains the requested interface<br/>
		/// pointer. Upon failure, *ppv contains NULL.<br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <remarks<br/>
		/// ><br/>
		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>
		/// <br/>
		/// </remarks<br/>
		/// ><br/>
		/// </summary>
		public static int CreateInstance(Guid* rclsid, Guid* riid, void** ppv)
		{
			int ret = CreateInstanceNative(rclsid, riid, ppv);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary<br/>
		/// ><br/>
		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>
		/// <br/>
		/// </summary<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="rclsid"><br/>
		/// The CLSID associated with the data and code that will be used to create the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="riid"><br/>
		/// A reference to the identifier of the interface to be used to communicate<br/>
		/// with the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="ppv"><br/>
		/// Address of pointer variable that receives the interface pointer requested<br/>
		/// in riid. Upon successful return, *ppv contains the requested interface<br/>
		/// pointer. Upon failure, *ppv contains NULL.<br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <remarks<br/>
		/// ><br/>
		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>
		/// <br/>
		/// </remarks<br/>
		/// ><br/>
		/// </summary>
		public static int CreateInstance(ref Guid rclsid, Guid* riid, void** ppv)
		{
			fixed (Guid* prclsid = &rclsid)
			{
				int ret = CreateInstanceNative((Guid*)prclsid, riid, ppv);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary<br/>
		/// ><br/>
		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>
		/// <br/>
		/// </summary<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="rclsid"><br/>
		/// The CLSID associated with the data and code that will be used to create the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="riid"><br/>
		/// A reference to the identifier of the interface to be used to communicate<br/>
		/// with the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="ppv"><br/>
		/// Address of pointer variable that receives the interface pointer requested<br/>
		/// in riid. Upon successful return, *ppv contains the requested interface<br/>
		/// pointer. Upon failure, *ppv contains NULL.<br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <remarks<br/>
		/// ><br/>
		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>
		/// <br/>
		/// </remarks<br/>
		/// ><br/>
		/// </summary>
		public static int CreateInstance(Guid* rclsid, ref Guid riid, void** ppv)
		{
			fixed (Guid* priid = &riid)
			{
				int ret = CreateInstanceNative(rclsid, (Guid*)priid, ppv);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary<br/>
		/// ><br/>
		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>
		/// <br/>
		/// </summary<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="rclsid"><br/>
		/// The CLSID associated with the data and code that will be used to create the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="riid"><br/>
		/// A reference to the identifier of the interface to be used to communicate<br/>
		/// with the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="ppv"><br/>
		/// Address of pointer variable that receives the interface pointer requested<br/>
		/// in riid. Upon successful return, *ppv contains the requested interface<br/>
		/// pointer. Upon failure, *ppv contains NULL.<br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <remarks<br/>
		/// ><br/>
		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>
		/// <br/>
		/// </remarks<br/>
		/// ><br/>
		/// </summary>
		public static int CreateInstance(ref Guid rclsid, ref Guid riid, void** ppv)
		{
			fixed (Guid* prclsid = &rclsid)
			{
				fixed (Guid* priid = &riid)
				{
					int ret = CreateInstanceNative((Guid*)prclsid, (Guid*)priid, ppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary<br/>
		/// ><br/>
		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>
		/// <br/>
		/// </summary<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="rclsid"><br/>
		/// The CLSID associated with the data and code that will be used to create the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="riid"><br/>
		/// A reference to the identifier of the interface to be used to communicate<br/>
		/// with the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="ppv"><br/>
		/// Address of pointer variable that receives the interface pointer requested<br/>
		/// in riid. Upon successful return, *ppv contains the requested interface<br/>
		/// pointer. Upon failure, *ppv contains NULL.<br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <remarks<br/>
		/// ><br/>
		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>
		/// <br/>
		/// </remarks<br/>
		/// ><br/>
		/// </summary>
		public static int CreateInstance(Guid* rclsid, Guid* riid, ref void* ppv)
		{
			fixed (void** pppv = &ppv)
			{
				int ret = CreateInstanceNative(rclsid, riid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary<br/>
		/// ><br/>
		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>
		/// <br/>
		/// </summary<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="rclsid"><br/>
		/// The CLSID associated with the data and code that will be used to create the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="riid"><br/>
		/// A reference to the identifier of the interface to be used to communicate<br/>
		/// with the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="ppv"><br/>
		/// Address of pointer variable that receives the interface pointer requested<br/>
		/// in riid. Upon successful return, *ppv contains the requested interface<br/>
		/// pointer. Upon failure, *ppv contains NULL.<br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <remarks<br/>
		/// ><br/>
		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>
		/// <br/>
		/// </remarks<br/>
		/// ><br/>
		/// </summary>
		public static int CreateInstance(ref Guid rclsid, Guid* riid, ref void* ppv)
		{
			fixed (Guid* prclsid = &rclsid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = CreateInstanceNative((Guid*)prclsid, riid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary<br/>
		/// ><br/>
		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>
		/// <br/>
		/// </summary<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="rclsid"><br/>
		/// The CLSID associated with the data and code that will be used to create the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="riid"><br/>
		/// A reference to the identifier of the interface to be used to communicate<br/>
		/// with the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="ppv"><br/>
		/// Address of pointer variable that receives the interface pointer requested<br/>
		/// in riid. Upon successful return, *ppv contains the requested interface<br/>
		/// pointer. Upon failure, *ppv contains NULL.<br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <remarks<br/>
		/// ><br/>
		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>
		/// <br/>
		/// </remarks<br/>
		/// ><br/>
		/// </summary>
		public static int CreateInstance(Guid* rclsid, ref Guid riid, ref void* ppv)
		{
			fixed (Guid* priid = &riid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = CreateInstanceNative(rclsid, (Guid*)priid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary<br/>
		/// ><br/>
		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>
		/// <br/>
		/// </summary<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="rclsid"><br/>
		/// The CLSID associated with the data and code that will be used to create the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="riid"><br/>
		/// A reference to the identifier of the interface to be used to communicate<br/>
		/// with the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="ppv"><br/>
		/// Address of pointer variable that receives the interface pointer requested<br/>
		/// in riid. Upon successful return, *ppv contains the requested interface<br/>
		/// pointer. Upon failure, *ppv contains NULL.<br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <remarks<br/>
		/// ><br/>
		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>
		/// <br/>
		/// </remarks<br/>
		/// ><br/>
		/// </summary>
		public static int CreateInstance(ref Guid rclsid, ref Guid riid, ref void* ppv)
		{
			fixed (Guid* prclsid = &rclsid)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppv = &ppv)
					{
						int ret = CreateInstanceNative((Guid*)prclsid, (Guid*)priid, (void**)pppv);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int CreateInstance2Native(IMalloc* pMalloc, Guid* rclsid, Guid* riid, void** ppv)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<IMalloc*, Guid*, Guid*, void**, int>)funcTable[1])(pMalloc, rclsid, riid, ppv);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int>)funcTable[1])((nint)pMalloc, (nint)rclsid, (nint)riid, (nint)ppv);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(IMalloc* pMalloc, Guid* rclsid, Guid* riid, void** ppv)
		{
			int ret = CreateInstance2Native(pMalloc, rclsid, riid, ppv);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ref IMalloc pMalloc, Guid* rclsid, Guid* riid, void** ppv)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				int ret = CreateInstance2Native((IMalloc*)ppMalloc, rclsid, riid, ppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ComPtr<IMalloc> pMalloc, Guid* rclsid, Guid* riid, void** ppv)
		{
			int ret = CreateInstance2Native((IMalloc*)pMalloc.Handle, rclsid, riid, ppv);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(IMalloc* pMalloc, ref Guid rclsid, Guid* riid, void** ppv)
		{
			fixed (Guid* prclsid = &rclsid)
			{
				int ret = CreateInstance2Native(pMalloc, (Guid*)prclsid, riid, ppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ref IMalloc pMalloc, ref Guid rclsid, Guid* riid, void** ppv)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (Guid* prclsid = &rclsid)
				{
					int ret = CreateInstance2Native((IMalloc*)ppMalloc, (Guid*)prclsid, riid, ppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ComPtr<IMalloc> pMalloc, ref Guid rclsid, Guid* riid, void** ppv)
		{
			fixed (Guid* prclsid = &rclsid)
			{
				int ret = CreateInstance2Native((IMalloc*)pMalloc.Handle, (Guid*)prclsid, riid, ppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(IMalloc* pMalloc, Guid* rclsid, ref Guid riid, void** ppv)
		{
			fixed (Guid* priid = &riid)
			{
				int ret = CreateInstance2Native(pMalloc, rclsid, (Guid*)priid, ppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ref IMalloc pMalloc, Guid* rclsid, ref Guid riid, void** ppv)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (Guid* priid = &riid)
				{
					int ret = CreateInstance2Native((IMalloc*)ppMalloc, rclsid, (Guid*)priid, ppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ComPtr<IMalloc> pMalloc, Guid* rclsid, ref Guid riid, void** ppv)
		{
			fixed (Guid* priid = &riid)
			{
				int ret = CreateInstance2Native((IMalloc*)pMalloc.Handle, rclsid, (Guid*)priid, ppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(IMalloc* pMalloc, ref Guid rclsid, ref Guid riid, void** ppv)
		{
			fixed (Guid* prclsid = &rclsid)
			{
				fixed (Guid* priid = &riid)
				{
					int ret = CreateInstance2Native(pMalloc, (Guid*)prclsid, (Guid*)priid, ppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ref IMalloc pMalloc, ref Guid rclsid, ref Guid riid, void** ppv)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (Guid* prclsid = &rclsid)
				{
					fixed (Guid* priid = &riid)
					{
						int ret = CreateInstance2Native((IMalloc*)ppMalloc, (Guid*)prclsid, (Guid*)priid, ppv);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ComPtr<IMalloc> pMalloc, ref Guid rclsid, ref Guid riid, void** ppv)
		{
			fixed (Guid* prclsid = &rclsid)
			{
				fixed (Guid* priid = &riid)
				{
					int ret = CreateInstance2Native((IMalloc*)pMalloc.Handle, (Guid*)prclsid, (Guid*)priid, ppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(IMalloc* pMalloc, Guid* rclsid, Guid* riid, ref void* ppv)
		{
			fixed (void** pppv = &ppv)
			{
				int ret = CreateInstance2Native(pMalloc, rclsid, riid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ref IMalloc pMalloc, Guid* rclsid, Guid* riid, ref void* ppv)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = CreateInstance2Native((IMalloc*)ppMalloc, rclsid, riid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ComPtr<IMalloc> pMalloc, Guid* rclsid, Guid* riid, ref void* ppv)
		{
			fixed (void** pppv = &ppv)
			{
				int ret = CreateInstance2Native((IMalloc*)pMalloc.Handle, rclsid, riid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(IMalloc* pMalloc, ref Guid rclsid, Guid* riid, ref void* ppv)
		{
			fixed (Guid* prclsid = &rclsid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = CreateInstance2Native(pMalloc, (Guid*)prclsid, riid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ref IMalloc pMalloc, ref Guid rclsid, Guid* riid, ref void* ppv)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (Guid* prclsid = &rclsid)
				{
					fixed (void** pppv = &ppv)
					{
						int ret = CreateInstance2Native((IMalloc*)ppMalloc, (Guid*)prclsid, riid, (void**)pppv);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ComPtr<IMalloc> pMalloc, ref Guid rclsid, Guid* riid, ref void* ppv)
		{
			fixed (Guid* prclsid = &rclsid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = CreateInstance2Native((IMalloc*)pMalloc.Handle, (Guid*)prclsid, riid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(IMalloc* pMalloc, Guid* rclsid, ref Guid riid, ref void* ppv)
		{
			fixed (Guid* priid = &riid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = CreateInstance2Native(pMalloc, rclsid, (Guid*)priid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ref IMalloc pMalloc, Guid* rclsid, ref Guid riid, ref void* ppv)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppv = &ppv)
					{
						int ret = CreateInstance2Native((IMalloc*)ppMalloc, rclsid, (Guid*)priid, (void**)pppv);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ComPtr<IMalloc> pMalloc, Guid* rclsid, ref Guid riid, ref void* ppv)
		{
			fixed (Guid* priid = &riid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = CreateInstance2Native((IMalloc*)pMalloc.Handle, rclsid, (Guid*)priid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(IMalloc* pMalloc, ref Guid rclsid, ref Guid riid, ref void* ppv)
		{
			fixed (Guid* prclsid = &rclsid)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppv = &ppv)
					{
						int ret = CreateInstance2Native(pMalloc, (Guid*)prclsid, (Guid*)priid, (void**)pppv);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ref IMalloc pMalloc, ref Guid rclsid, ref Guid riid, ref void* ppv)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (Guid* prclsid = &rclsid)
				{
					fixed (Guid* priid = &riid)
					{
						fixed (void** pppv = &ppv)
						{
							int ret = CreateInstance2Native((IMalloc*)ppMalloc, (Guid*)prclsid, (Guid*)priid, (void**)pppv);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance2(ComPtr<IMalloc> pMalloc, ref Guid rclsid, ref Guid riid, ref void* ppv)
		{
			fixed (Guid* prclsid = &rclsid)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppv = &ppv)
					{
						int ret = CreateInstance2Native((IMalloc*)pMalloc.Handle, (Guid*)prclsid, (Guid*)priid, (void**)pppv);
						return ret;
					}
				}
			}
		}

	}
}
