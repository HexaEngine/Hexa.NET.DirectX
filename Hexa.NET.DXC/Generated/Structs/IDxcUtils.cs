// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXC
{
	/// <summary>
	/// NOTE: IDxcUtils replaces IDxcLibrary<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "IDxcUtils")]
	public partial struct IDxcUtils : IComObject, IComObject<IDxcUtils>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcUtils (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint AddRef() 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint Release() 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlobFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateBlobFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pBlob, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "UINT32")] uint offset, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "UINT32")] uint length, [NativeName(NativeNameType.Param, "ppResult")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppResult) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(LpVtbl[3]))(ptr, pBlob, offset, length, ppResult);
			return ret;
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlobFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateBlobFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ref IDxcBlob pBlob, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "UINT32")] uint offset, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "UINT32")] uint length, [NativeName(NativeNameType.Param, "ppResult")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppResult) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(LpVtbl[3]))(ptr, (IDxcBlob*)ppBlob, offset, length, ppResult);
				return ret;
			}
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlobFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateBlobFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ComPtr<IDxcBlob> pBlob, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "UINT32")] uint offset, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "UINT32")] uint length, [NativeName(NativeNameType.Param, "ppResult")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppResult) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(LpVtbl[3]))(ptr, (IDxcBlob*)pBlob.Handle, offset, length, ppResult);
			return ret;
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlobFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateBlobFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pBlob, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "UINT32")] uint offset, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "UINT32")] uint length, [NativeName(NativeNameType.Param, "ppResult")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref IDxcBlob* ppResult) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(LpVtbl[3]))(ptr, pBlob, offset, length, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlobFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateBlobFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pBlob, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "UINT32")] uint offset, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "UINT32")] uint length, [NativeName(NativeNameType.Param, "ppResult")] [NativeName(NativeNameType.Type, "IDxcBlob**")] out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppResult = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(LpVtbl[3]))(ptr, pBlob, offset, length, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlobFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateBlobFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ref IDxcBlob pBlob, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "UINT32")] uint offset, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "UINT32")] uint length, [NativeName(NativeNameType.Param, "ppResult")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref IDxcBlob* ppResult) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlob** pppResult = &ppResult)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(LpVtbl[3]))(ptr, (IDxcBlob*)ppBlob, offset, length, (IDxcBlob**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlobFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateBlobFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ComPtr<IDxcBlob> pBlob, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "UINT32")] uint offset, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "UINT32")] uint length, [NativeName(NativeNameType.Param, "ppResult")] [NativeName(NativeNameType.Type, "IDxcBlob**")] out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppResult = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, uint, uint, IDxcBlob**, int>)(LpVtbl[3]))(ptr, (IDxcBlob*)pBlob.Handle, offset, length, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Creates a blob referencing existing memory, with no copy.<br/>
		/// User must manage the memory lifetime separately.<br/>
		/// (was: CreateBlobWithEncodingFromPinned)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlobFromPinned")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateBlobFromPinned([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pData, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "UINT32")] uint size, [NativeName(NativeNameType.Param, "codePage")] [NativeName(NativeNameType.Type, "UINT32")] uint codePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, uint, uint, IDxcBlobEncoding**, int>)(LpVtbl[4]))(ptr, pData, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// Creates a blob referencing existing memory, with no copy.<br/>
		/// User must manage the memory lifetime separately.<br/>
		/// (was: CreateBlobWithEncodingFromPinned)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlobFromPinned")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateBlobFromPinned([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pData, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "UINT32")] uint size, [NativeName(NativeNameType.Param, "codePage")] [NativeName(NativeNameType.Type, "UINT32")] uint codePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, uint, uint, IDxcBlobEncoding**, int>)(LpVtbl[4]))(ptr, pData, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// Creates a blob referencing existing memory, with no copy.<br/>
		/// User must manage the memory lifetime separately.<br/>
		/// (was: CreateBlobWithEncodingFromPinned)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlobFromPinned")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateBlobFromPinned([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pData, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "UINT32")] uint size, [NativeName(NativeNameType.Param, "codePage")] [NativeName(NativeNameType.Type, "UINT32")] uint codePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, uint, uint, IDxcBlobEncoding**, int>)(LpVtbl[4]))(ptr, pData, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "MoveToBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int MoveToBlob([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pData, [NativeName(NativeNameType.Param, "pIMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] IMalloc* pIMalloc, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "UINT32")] uint size, [NativeName(NativeNameType.Param, "codePage")] [NativeName(NativeNameType.Type, "UINT32")] uint codePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(LpVtbl[5]))(ptr, pData, pIMalloc, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "MoveToBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int MoveToBlob([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pData, [NativeName(NativeNameType.Param, "pIMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] ref IMalloc pIMalloc, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "UINT32")] uint size, [NativeName(NativeNameType.Param, "codePage")] [NativeName(NativeNameType.Type, "UINT32")] uint codePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IMalloc* ppIMalloc = &pIMalloc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(LpVtbl[5]))(ptr, pData, (IMalloc*)ppIMalloc, size, codePage, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "MoveToBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int MoveToBlob([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pData, [NativeName(NativeNameType.Param, "pIMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] ComPtr<IMalloc> pIMalloc, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "UINT32")] uint size, [NativeName(NativeNameType.Param, "codePage")] [NativeName(NativeNameType.Type, "UINT32")] uint codePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(LpVtbl[5]))(ptr, pData, (IMalloc*)pIMalloc.Handle, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "MoveToBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int MoveToBlob([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pData, [NativeName(NativeNameType.Param, "pIMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] IMalloc* pIMalloc, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "UINT32")] uint size, [NativeName(NativeNameType.Param, "codePage")] [NativeName(NativeNameType.Type, "UINT32")] uint codePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(LpVtbl[5]))(ptr, pData, pIMalloc, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "MoveToBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int MoveToBlob([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pData, [NativeName(NativeNameType.Param, "pIMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] IMalloc* pIMalloc, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "UINT32")] uint size, [NativeName(NativeNameType.Param, "codePage")] [NativeName(NativeNameType.Type, "UINT32")] uint codePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(LpVtbl[5]))(ptr, pData, pIMalloc, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "MoveToBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int MoveToBlob([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pData, [NativeName(NativeNameType.Param, "pIMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] ref IMalloc pIMalloc, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "UINT32")] uint size, [NativeName(NativeNameType.Param, "codePage")] [NativeName(NativeNameType.Type, "UINT32")] uint codePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IMalloc* ppIMalloc = &pIMalloc)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(LpVtbl[5]))(ptr, pData, (IMalloc*)ppIMalloc, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>
		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>
		/// (was: CreateBlobWithEncodingOnMalloc)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "MoveToBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int MoveToBlob([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pData, [NativeName(NativeNameType.Param, "pIMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] ComPtr<IMalloc> pIMalloc, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "UINT32")] uint size, [NativeName(NativeNameType.Param, "codePage")] [NativeName(NativeNameType.Type, "UINT32")] uint codePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int>)(LpVtbl[5]))(ptr, pData, (IMalloc*)pIMalloc.Handle, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Copy blob contents to memory owned by the new blob.<br/>
		/// (was: CreateBlobWithEncodingOnHeapCopy)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateBlob([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pData, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "UINT32")] uint size, [NativeName(NativeNameType.Param, "codePage")] [NativeName(NativeNameType.Type, "UINT32")] uint codePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, uint, uint, IDxcBlobEncoding**, int>)(LpVtbl[6]))(ptr, pData, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// Copy blob contents to memory owned by the new blob.<br/>
		/// (was: CreateBlobWithEncodingOnHeapCopy)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateBlob([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pData, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "UINT32")] uint size, [NativeName(NativeNameType.Param, "codePage")] [NativeName(NativeNameType.Type, "UINT32")] uint codePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, uint, uint, IDxcBlobEncoding**, int>)(LpVtbl[6]))(ptr, pData, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// Copy blob contents to memory owned by the new blob.<br/>
		/// (was: CreateBlobWithEncodingOnHeapCopy)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateBlob([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pData, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "UINT32")] uint size, [NativeName(NativeNameType.Param, "codePage")] [NativeName(NativeNameType.Type, "UINT32")] uint codePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, uint, uint, IDxcBlobEncoding**, int>)(LpVtbl[6]))(ptr, pData, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] uint* pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, pFileName, pCodePage, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] uint* pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppFileName = pFileName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, (char*)ppFileName, pCodePage, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] uint* pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, pStr0, pCodePage, pBlobEncoding);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] ref uint pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppCodePage = &pCodePage)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, pFileName, (uint*)ppCodePage, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] ref uint pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppFileName = pFileName)
			{
				fixed (uint* ppCodePage = &pCodePage)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, (char*)ppFileName, (uint*)ppCodePage, pBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] ref uint pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (uint* ppCodePage = &pCodePage)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, pStr0, (uint*)ppCodePage, pBlobEncoding);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] uint* pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, pFileName, pCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] uint* pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, pFileName, pCodePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] uint* pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppFileName = pFileName)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, (char*)ppFileName, pCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] uint* pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, pStr0, pCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] ref uint pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppCodePage = &pCodePage)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, pFileName, (uint*)ppCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] ref uint pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppCodePage = &pCodePage)
			{
				pBlobEncoding = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, pFileName, (uint*)ppCodePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] ref uint pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppFileName = pFileName)
			{
				fixed (uint* ppCodePage = &pCodePage)
				{
					fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, (char*)ppFileName, (uint*)ppCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// (was: CreateBlobFromFile)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pCodePage")] [NativeName(NativeNameType.Type, "UINT32*")] ref uint pCodePage, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobEncoding**")] ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (uint* ppCodePage = &pCodePage)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, uint*, IDxcBlobEncoding**, int>)(LpVtbl[7]))(ptr, pStr0, (uint*)ppCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReadOnlyStreamFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReadOnlyStreamFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pBlob, [NativeName(NativeNameType.Param, "ppStream")] [NativeName(NativeNameType.Type, "IStream**")] IStream** ppStream) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(LpVtbl[8]))(ptr, pBlob, ppStream);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReadOnlyStreamFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReadOnlyStreamFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ref IDxcBlob pBlob, [NativeName(NativeNameType.Param, "ppStream")] [NativeName(NativeNameType.Type, "IStream**")] IStream** ppStream) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(LpVtbl[8]))(ptr, (IDxcBlob*)ppBlob, ppStream);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReadOnlyStreamFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReadOnlyStreamFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ComPtr<IDxcBlob> pBlob, [NativeName(NativeNameType.Param, "ppStream")] [NativeName(NativeNameType.Type, "IStream**")] IStream** ppStream) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(LpVtbl[8]))(ptr, (IDxcBlob*)pBlob.Handle, ppStream);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReadOnlyStreamFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReadOnlyStreamFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pBlob, [NativeName(NativeNameType.Param, "ppStream")] [NativeName(NativeNameType.Type, "IStream**")] ref IStream* ppStream) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IStream** pppStream = &ppStream)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(LpVtbl[8]))(ptr, pBlob, (IStream**)pppStream);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReadOnlyStreamFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReadOnlyStreamFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pBlob, [NativeName(NativeNameType.Param, "ppStream")] [NativeName(NativeNameType.Type, "IStream**")] out ComPtr<IStream> ppStream) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppStream = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(LpVtbl[8]))(ptr, pBlob, (IStream**)ppStream.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReadOnlyStreamFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReadOnlyStreamFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ref IDxcBlob pBlob, [NativeName(NativeNameType.Param, "ppStream")] [NativeName(NativeNameType.Type, "IStream**")] ref IStream* ppStream) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IStream** pppStream = &ppStream)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(LpVtbl[8]))(ptr, (IDxcBlob*)ppBlob, (IStream**)pppStream);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReadOnlyStreamFromBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReadOnlyStreamFromBlob([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ComPtr<IDxcBlob> pBlob, [NativeName(NativeNameType.Param, "ppStream")] [NativeName(NativeNameType.Type, "IStream**")] out ComPtr<IStream> ppStream) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppStream = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, int>)(LpVtbl[8]))(ptr, (IDxcBlob*)pBlob.Handle, (IStream**)ppStream.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Create default file-based include handler<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateDefaultIncludeHandler")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateDefaultIncludeHandler([NativeName(NativeNameType.Param, "ppResult")] [NativeName(NativeNameType.Type, "IDxcIncludeHandler**")] IDxcIncludeHandler** ppResult) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcIncludeHandler**, int>)(LpVtbl[9]))(ptr, ppResult);
			return ret;
		}

		/// <summary>
		/// Create default file-based include handler<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateDefaultIncludeHandler")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateDefaultIncludeHandler([NativeName(NativeNameType.Param, "ppResult")] [NativeName(NativeNameType.Type, "IDxcIncludeHandler**")] ref IDxcIncludeHandler* ppResult) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler** pppResult = &ppResult)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcIncludeHandler**, int>)(LpVtbl[9]))(ptr, (IDxcIncludeHandler**)pppResult);
				return ret;
			}
		}

		/// <summary>
		/// Create default file-based include handler<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateDefaultIncludeHandler")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateDefaultIncludeHandler([NativeName(NativeNameType.Param, "ppResult")] [NativeName(NativeNameType.Type, "IDxcIncludeHandler**")] out ComPtr<IDxcIncludeHandler> ppResult) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppResult = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcIncludeHandler**, int>)(LpVtbl[9]))(ptr, (IDxcIncludeHandler**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf8")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf8([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf8**")] IDxcBlobUtf8** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(LpVtbl[10]))(ptr, pBlob, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf8")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf8([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ref IDxcBlob pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf8**")] IDxcBlobUtf8** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(LpVtbl[10]))(ptr, (IDxcBlob*)ppBlob, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf8")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf8([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ComPtr<IDxcBlob> pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf8**")] IDxcBlobUtf8** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(LpVtbl[10]))(ptr, (IDxcBlob*)pBlob.Handle, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf8")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf8([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf8**")] ref IDxcBlobUtf8* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobUtf8** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(LpVtbl[10]))(ptr, pBlob, (IDxcBlobUtf8**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf8")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf8([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf8**")] out ComPtr<IDxcBlobUtf8> pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(LpVtbl[10]))(ptr, pBlob, (IDxcBlobUtf8**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf8")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf8([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ref IDxcBlob pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf8**")] ref IDxcBlobUtf8* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobUtf8** ppBlobEncoding = &pBlobEncoding)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(LpVtbl[10]))(ptr, (IDxcBlob*)ppBlob, (IDxcBlobUtf8**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>
		/// Convert or return matching encoded text blobs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf8")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf8([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ComPtr<IDxcBlob> pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf8**")] out ComPtr<IDxcBlobUtf8> pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, int>)(LpVtbl[10]))(ptr, (IDxcBlob*)pBlob.Handle, (IDxcBlobUtf8**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf16")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf16([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf16**")] IDxcBlobUtf16** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(LpVtbl[11]))(ptr, pBlob, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf16")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf16([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ref IDxcBlob pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf16**")] IDxcBlobUtf16** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(LpVtbl[11]))(ptr, (IDxcBlob*)ppBlob, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf16")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf16([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ComPtr<IDxcBlob> pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf16**")] IDxcBlobUtf16** pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(LpVtbl[11]))(ptr, (IDxcBlob*)pBlob.Handle, pBlobEncoding);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf16")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf16([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf16**")] ref IDxcBlobUtf16* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobUtf16** ppBlobEncoding = &pBlobEncoding)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(LpVtbl[11]))(ptr, pBlob, (IDxcBlobUtf16**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf16")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf16([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf16**")] out ComPtr<IDxcBlobUtf16> pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(LpVtbl[11]))(ptr, pBlob, (IDxcBlobUtf16**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf16")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf16([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ref IDxcBlob pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf16**")] ref IDxcBlobUtf16* pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobUtf16** ppBlobEncoding = &pBlobEncoding)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(LpVtbl[11]))(ptr, (IDxcBlob*)ppBlob, (IDxcBlobUtf16**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBlobAsUtf16")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetBlobAsUtf16([NativeName(NativeNameType.Param, "pBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ComPtr<IDxcBlob> pBlob, [NativeName(NativeNameType.Param, "pBlobEncoding")] [NativeName(NativeNameType.Type, "IDxcBlobUtf16**")] out ComPtr<IDxcBlobUtf16> pBlobEncoding) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			pBlobEncoding = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, int>)(LpVtbl[11]))(ptr, (IDxcBlob*)pBlob.Handle, (IDxcBlobUtf16**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDxilContainerPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDxilContainerPart([NativeName(NativeNameType.Param, "pShader")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] DxcBuffer* pShader, [NativeName(NativeNameType.Param, "DxcPart")] [NativeName(NativeNameType.Type, "UINT32")] uint dxcPart, [NativeName(NativeNameType.Param, "ppPartData")] [NativeName(NativeNameType.Type, "void**")] void** ppPartData, [NativeName(NativeNameType.Param, "pPartSizeInBytes")] [NativeName(NativeNameType.Type, "UINT32*")] uint* pPartSizeInBytes) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, uint, void**, uint*, int>)(LpVtbl[12]))(ptr, pShader, dxcPart, ppPartData, pPartSizeInBytes);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDxilContainerPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDxilContainerPart([NativeName(NativeNameType.Param, "pShader")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] ref DxcBuffer pShader, [NativeName(NativeNameType.Param, "DxcPart")] [NativeName(NativeNameType.Type, "UINT32")] uint dxcPart, [NativeName(NativeNameType.Param, "ppPartData")] [NativeName(NativeNameType.Type, "void**")] void** ppPartData, [NativeName(NativeNameType.Param, "pPartSizeInBytes")] [NativeName(NativeNameType.Type, "UINT32*")] uint* pPartSizeInBytes) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppShader = &pShader)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, uint, void**, uint*, int>)(LpVtbl[12]))(ptr, (DxcBuffer*)ppShader, dxcPart, ppPartData, pPartSizeInBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDxilContainerPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDxilContainerPart<T>([NativeName(NativeNameType.Param, "pShader")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] DxcBuffer* pShader, [NativeName(NativeNameType.Param, "DxcPart")] [NativeName(NativeNameType.Type, "UINT32")] uint dxcPart, [NativeName(NativeNameType.Param, "ppPartData")] [NativeName(NativeNameType.Type, "void**")] ref ComPtr<T> ppPartData, [NativeName(NativeNameType.Param, "pPartSizeInBytes")] [NativeName(NativeNameType.Type, "UINT32*")] uint* pPartSizeInBytes) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ComPtr<T>* pppPartData = &ppPartData)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, uint, void**, uint*, int>)(LpVtbl[12]))(ptr, pShader, dxcPart, (void**)pppPartData, pPartSizeInBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDxilContainerPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDxilContainerPart<T>([NativeName(NativeNameType.Param, "pShader")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] ref DxcBuffer pShader, [NativeName(NativeNameType.Param, "DxcPart")] [NativeName(NativeNameType.Type, "UINT32")] uint dxcPart, [NativeName(NativeNameType.Param, "ppPartData")] [NativeName(NativeNameType.Type, "void**")] ref ComPtr<T> ppPartData, [NativeName(NativeNameType.Param, "pPartSizeInBytes")] [NativeName(NativeNameType.Type, "UINT32*")] uint* pPartSizeInBytes) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppShader = &pShader)
			{
				fixed (ComPtr<T>* pppPartData = &ppPartData)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, uint, void**, uint*, int>)(LpVtbl[12]))(ptr, (DxcBuffer*)ppShader, dxcPart, (void**)pppPartData, pPartSizeInBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDxilContainerPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDxilContainerPart([NativeName(NativeNameType.Param, "pShader")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] DxcBuffer* pShader, [NativeName(NativeNameType.Param, "DxcPart")] [NativeName(NativeNameType.Type, "UINT32")] uint dxcPart, [NativeName(NativeNameType.Param, "ppPartData")] [NativeName(NativeNameType.Type, "void**")] void** ppPartData, [NativeName(NativeNameType.Param, "pPartSizeInBytes")] [NativeName(NativeNameType.Type, "UINT32*")] ref uint pPartSizeInBytes) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppPartSizeInBytes = &pPartSizeInBytes)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, uint, void**, uint*, int>)(LpVtbl[12]))(ptr, pShader, dxcPart, ppPartData, (uint*)ppPartSizeInBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDxilContainerPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDxilContainerPart([NativeName(NativeNameType.Param, "pShader")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] ref DxcBuffer pShader, [NativeName(NativeNameType.Param, "DxcPart")] [NativeName(NativeNameType.Type, "UINT32")] uint dxcPart, [NativeName(NativeNameType.Param, "ppPartData")] [NativeName(NativeNameType.Type, "void**")] void** ppPartData, [NativeName(NativeNameType.Param, "pPartSizeInBytes")] [NativeName(NativeNameType.Type, "UINT32*")] ref uint pPartSizeInBytes) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppShader = &pShader)
			{
				fixed (uint* ppPartSizeInBytes = &pPartSizeInBytes)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, uint, void**, uint*, int>)(LpVtbl[12]))(ptr, (DxcBuffer*)ppShader, dxcPart, ppPartData, (uint*)ppPartSizeInBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDxilContainerPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDxilContainerPart<T>([NativeName(NativeNameType.Param, "pShader")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] DxcBuffer* pShader, [NativeName(NativeNameType.Param, "DxcPart")] [NativeName(NativeNameType.Type, "UINT32")] uint dxcPart, [NativeName(NativeNameType.Param, "ppPartData")] [NativeName(NativeNameType.Type, "void**")] ref ComPtr<T> ppPartData, [NativeName(NativeNameType.Param, "pPartSizeInBytes")] [NativeName(NativeNameType.Type, "UINT32*")] ref uint pPartSizeInBytes) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ComPtr<T>* pppPartData = &ppPartData)
			{
				fixed (uint* ppPartSizeInBytes = &pPartSizeInBytes)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, uint, void**, uint*, int>)(LpVtbl[12]))(ptr, pShader, dxcPart, (void**)pppPartData, (uint*)ppPartSizeInBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDxilContainerPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDxilContainerPart<T>([NativeName(NativeNameType.Param, "pShader")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] ref DxcBuffer pShader, [NativeName(NativeNameType.Param, "DxcPart")] [NativeName(NativeNameType.Type, "UINT32")] uint dxcPart, [NativeName(NativeNameType.Param, "ppPartData")] [NativeName(NativeNameType.Type, "void**")] ref ComPtr<T> ppPartData, [NativeName(NativeNameType.Param, "pPartSizeInBytes")] [NativeName(NativeNameType.Type, "UINT32*")] ref uint pPartSizeInBytes) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppShader = &pShader)
			{
				fixed (ComPtr<T>* pppPartData = &ppPartData)
				{
					fixed (uint* ppPartSizeInBytes = &pPartSizeInBytes)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, uint, void**, uint*, int>)(LpVtbl[12]))(ptr, (DxcBuffer*)ppShader, dxcPart, (void**)pppPartData, (uint*)ppPartSizeInBytes);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReflection")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReflection([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] DxcBuffer* pData, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* iid, [NativeName(NativeNameType.Param, "ppvReflection")] [NativeName(NativeNameType.Type, "void**")] void** ppvReflection) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, int>)(LpVtbl[13]))(ptr, pData, iid, ppvReflection);
			return ret;
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReflection")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReflection([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] ref DxcBuffer pData, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* iid, [NativeName(NativeNameType.Param, "ppvReflection")] [NativeName(NativeNameType.Type, "void**")] void** ppvReflection) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppData = &pData)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, int>)(LpVtbl[13]))(ptr, (DxcBuffer*)ppData, iid, ppvReflection);
				return ret;
			}
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReflection")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReflection([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] DxcBuffer* pData, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppvReflection")] [NativeName(NativeNameType.Type, "void**")] void** ppvReflection) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, int>)(LpVtbl[13]))(ptr, pData, (Guid*)piid, ppvReflection);
				return ret;
			}
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReflection")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReflection([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] ref DxcBuffer pData, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppvReflection")] [NativeName(NativeNameType.Type, "void**")] void** ppvReflection) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppData = &pData)
			{
				fixed (Guid* piid = &iid)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, int>)(LpVtbl[13]))(ptr, (DxcBuffer*)ppData, (Guid*)piid, ppvReflection);
					return ret;
				}
			}
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReflection")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReflection<T>([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] DxcBuffer* pData, [NativeName(NativeNameType.Param, "ppvReflection")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvReflection) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvReflection = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, int>)(LpVtbl[13]))(ptr, pData, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvReflection.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReflection")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReflection<T>([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] ref DxcBuffer pData, [NativeName(NativeNameType.Param, "ppvReflection")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvReflection) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppData = &pData)
			{
				ppvReflection = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, int>)(LpVtbl[13]))(ptr, (DxcBuffer*)ppData, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvReflection.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReflection")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReflection<T>([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] DxcBuffer* pData, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppvReflection")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvReflection) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				ppvReflection = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, int>)(LpVtbl[13]))(ptr, pData, (Guid*)piid, (void**)ppvReflection.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>
		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateReflection")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateReflection<T>([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const DxcBuffer*")] ref DxcBuffer pData, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppvReflection")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvReflection) where T : unmanaged, IComObject, IComObject<T>
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppData = &pData)
			{
				fixed (Guid* piid = &iid)
				{
					ppvReflection = default;
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, int>)(LpVtbl[13]))(ptr, (DxcBuffer*)ppData, (Guid*)piid, (void**)ppvReflection.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pStr0, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pStr1, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pStr1, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pStr2, pArguments, argCount, pDefines, defineCount, ppArgs);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char** ppArguments = &pArguments)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppArguments = &pArguments)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pStr1, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pStr1, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pStr2, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pStr0, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pStr1, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pStr1, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (DxcDefine* ppDefines = &pDefines)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pStr2, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (DxcDefine* ppDefines = &pDefines)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pStr0, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (DxcDefine* ppDefines = &pDefines)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pStr1, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (DxcDefine* ppDefines = &pDefines)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pStr1, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							fixed (DxcDefine* ppDefines = &pDefines)
							{
								int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pStr2, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] out ComPtr<IDxcCompilerArgs> ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppArgs = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)ppArgs.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pStr0, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pStr1, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pStr1, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pStr2, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] out ComPtr<IDxcCompilerArgs> ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				ppArgs = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)ppArgs.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pStr0, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pStr1, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pStr1, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
							{
								int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] DxcDefine* pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pStr2, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] out ComPtr<IDxcCompilerArgs> ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppArgs = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)ppArgs.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pStr0, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pStr1, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pStr1, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (DxcDefine* ppDefines = &pDefines)
						{
							fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
							{
								int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] char** pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pStr2, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] out ComPtr<IDxcCompilerArgs> ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppArgs = default;
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)ppArgs.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (DxcDefine* ppDefines = &pDefines)
						{
							fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
							{
								int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppTargetProfile = pTargetProfile)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
						{
							int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetProfile != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pTargetProfile, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pEntryPoint, pStr0, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (DxcDefine* ppDefines = &pDefines)
						{
							fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
							{
								int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, pEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pEntryPoint, pStr1, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppEntryPoint = pEntryPoint)
			{
				fixed (char* ppTargetProfile = pTargetProfile)
				{
					fixed (char** ppArguments = &pArguments)
					{
						fixed (DxcDefine* ppDefines = &pDefines)
						{
							fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
							{
								int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetProfile != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pTargetProfile, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pSourceName, pStr0, pStr1, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppSourceName = pSourceName)
			{
				fixed (char* ppEntryPoint = pEntryPoint)
				{
					fixed (char* ppTargetProfile = pTargetProfile)
					{
						fixed (char** ppArguments = &pArguments)
						{
							fixed (DxcDefine* ppDefines = &pDefines)
							{
								fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
								{
									int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, (char*)ppSourceName, (char*)ppEntryPoint, (char*)ppTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BuildArguments")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int BuildArguments([NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pEntryPoint")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pEntryPoint, [NativeName(NativeNameType.Param, "pTargetProfile")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pTargetProfile, [NativeName(NativeNameType.Param, "pArguments")] [NativeName(NativeNameType.Type, "LPCWSTR*")] ref char* pArguments, [NativeName(NativeNameType.Param, "argCount")] [NativeName(NativeNameType.Type, "UINT32")] uint argCount, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const DxcDefine*")] ref DxcDefine pDefines, [NativeName(NativeNameType.Param, "defineCount")] [NativeName(NativeNameType.Type, "UINT32")] uint defineCount, [NativeName(NativeNameType.Param, "ppArgs")] [NativeName(NativeNameType.Type, "IDxcCompilerArgs**")] ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			char* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntryPoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF16(pEntryPoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<char>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = (char*)pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF16(pEntryPoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = '\0';
			}
			char* pStr2 = null;
			int pStrSize2 = 0;
			if (pTargetProfile != null)
			{
				pStrSize2 = Utils.GetByteCountUTF16(pTargetProfile);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<char>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = (char*)pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF16(pTargetProfile, pStr2, pStrSize2);
				pStr2[pStrOffset2] = '\0';
			}
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, uint, DxcDefine*, uint, IDxcCompilerArgs**, int>)(LpVtbl[14]))(ptr, pStr0, pStr1, pStr2, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, pPDBBlob, ppHash, ppContainer);
			return ret;
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ref IDxcBlob pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, (IDxcBlob*)ppPDBBlob, ppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ComPtr<IDxcBlob> pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, (IDxcBlob*)pPDBBlob.Handle, ppHash, ppContainer);
			return ret;
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref IDxcBlob* ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppHash = &ppHash)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, pPDBBlob, (IDxcBlob**)pppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref ComPtr<IDxcBlob> ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ComPtr<IDxcBlob>* pppHash = &ppHash)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, pPDBBlob, (IDxcBlob**)pppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ref IDxcBlob pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref IDxcBlob* ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				fixed (IDxcBlob** pppHash = &ppHash)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, (IDxcBlob*)ppPDBBlob, (IDxcBlob**)pppHash, ppContainer);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ComPtr<IDxcBlob> pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref ComPtr<IDxcBlob> ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ComPtr<IDxcBlob>* pppHash = &ppHash)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, (IDxcBlob*)pPDBBlob.Handle, (IDxcBlob**)pppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref IDxcBlob* ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppContainer = &ppContainer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, pPDBBlob, ppHash, (IDxcBlob**)pppContainer);
				return ret;
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] out ComPtr<IDxcBlob> ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppContainer = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, pPDBBlob, ppHash, (IDxcBlob**)ppContainer.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ref IDxcBlob pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref IDxcBlob* ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				fixed (IDxcBlob** pppContainer = &ppContainer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, (IDxcBlob*)ppPDBBlob, ppHash, (IDxcBlob**)pppContainer);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ComPtr<IDxcBlob> pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] IDxcBlob** ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] out ComPtr<IDxcBlob> ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppContainer = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, (IDxcBlob*)pPDBBlob.Handle, ppHash, (IDxcBlob**)ppContainer.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref IDxcBlob* ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref IDxcBlob* ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppHash = &ppHash)
			{
				fixed (IDxcBlob** pppContainer = &ppContainer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, pPDBBlob, (IDxcBlob**)pppHash, (IDxcBlob**)pppContainer);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] IDxcBlob* pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref ComPtr<IDxcBlob> ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] out ComPtr<IDxcBlob> ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ComPtr<IDxcBlob>* pppHash = &ppHash)
			{
				ppContainer = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, pPDBBlob, (IDxcBlob**)pppHash, (IDxcBlob**)ppContainer.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ref IDxcBlob pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref IDxcBlob* ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref IDxcBlob* ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				fixed (IDxcBlob** pppHash = &ppHash)
				{
					fixed (IDxcBlob** pppContainer = &ppContainer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, (IDxcBlob*)ppPDBBlob, (IDxcBlob**)pppHash, (IDxcBlob**)pppContainer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Takes the shader PDB and returns the hash and the container inside it<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPDBContents")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPDBContents([NativeName(NativeNameType.Param, "pPDBBlob")] [NativeName(NativeNameType.Type, "IDxcBlob*")] ComPtr<IDxcBlob> pPDBBlob, [NativeName(NativeNameType.Param, "ppHash")] [NativeName(NativeNameType.Type, "IDxcBlob**")] ref ComPtr<IDxcBlob> ppHash, [NativeName(NativeNameType.Param, "ppContainer")] [NativeName(NativeNameType.Type, "IDxcBlob**")] out ComPtr<IDxcBlob> ppContainer) 
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ComPtr<IDxcBlob>* pppHash = &ppHash)
			{
				ppContainer = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, int>)(LpVtbl[15]))(ptr, (IDxcBlob*)pPDBBlob.Handle, (IDxcBlob**)pppHash, (IDxcBlob**)ppContainer.GetAddressOf());
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcUtils value)
		{
			return Unsafe.As<IDxcUtils, IUnknown>(ref value);
		}

	}

}
