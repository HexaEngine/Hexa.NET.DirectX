// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.X3DAudio
{
	/// <summary>
	/// Cone:<br/>
	/// Specifies directionality for a listener or single-channel emitter by<br/>
	/// modifying DSP behaviour with respect to its front orientation.<br/>
	/// This is modeled using two sound cones: an inner cone and an outer cone.<br/>
	/// On/within the inner cone, DSP settings are scaled by the inner values.<br/>
	/// On/beyond the outer cone, DSP settings are scaled by the outer values.<br/>
	/// If on both the cones, DSP settings are scaled by the inner values only.<br/>
	/// Between the two cones, the scaler is linearly interpolated between the<br/>
	/// inner and outer values.  Set both cone angles to 0 or X3DAUDIO_2PI for<br/>
	/// omnidirectionality using only the outer or inner values respectively.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "X3DAUDIO_CONE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct X3DAudioCone
	{
		/// <summary>
		/// inner cone angle in radians, must be within [0.0f, X3DAUDIO_2PI]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerAngle")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float InnerAngle;

		/// <summary>
		/// outer cone angle in radians, must be within [InnerAngle, X3DAUDIO_2PI]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterAngle")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float OuterAngle;

		/// <summary>
		/// volume level scaler on/within inner cone, used only for matrix calculations, must be within [0.0f, 2.0f] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerVolume")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float InnerVolume;

		/// <summary>
		/// volume level scaler on/beyond outer cone, used only for matrix calculations, must be within [0.0f, 2.0f] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterVolume")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float OuterVolume;

		/// <summary>
		/// LPF (both direct and reverb paths) coefficient subtrahend on/within inner cone, used only for LPF (both direct and reverb paths) calculations, must be within [0.0f, 1.0f] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerLPF")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float InnerLPF;

		/// <summary>
		/// LPF (both direct and reverb paths) coefficient subtrahend on/beyond outer cone, used only for LPF (both direct and reverb paths) calculations, must be within [0.0f, 1.0f] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterLPF")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float OuterLPF;

		/// <summary>
		/// reverb send level scaler on/within inner cone, used only for reverb calculations, must be within [0.0f, 2.0f] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerReverb")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float InnerReverb;

		/// <summary>
		/// reverb send level scaler on/beyond outer cone, used only for reverb calculations, must be within [0.0f, 2.0f] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterReverb")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float OuterReverb;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe X3DAudioCone(float innerAngle = default, float outerAngle = default, float innerVolume = default, float outerVolume = default, float innerLpf = default, float outerLpf = default, float innerReverb = default, float outerReverb = default)
		{
			InnerAngle = innerAngle;
			OuterAngle = outerAngle;
			InnerVolume = innerVolume;
			OuterVolume = outerVolume;
			InnerLPF = innerLpf;
			OuterLPF = outerLpf;
			InnerReverb = innerReverb;
			OuterReverb = outerReverb;
		}


	}

}
