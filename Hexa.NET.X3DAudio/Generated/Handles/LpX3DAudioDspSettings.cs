// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.X3DAudio
{
	/// <summary>
	/// DSP settings:<br/>
	/// Receives results from a call to X3DAudioCalculate to be sent<br/>
	/// to the low-level audio rendering API for 3D signal processing.<br/>
	/// The user is responsible for allocating the matrix coefficient table,<br/>
	/// delay time array, and initializing the channel counts when used.<br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPX3DAUDIO_DSP_SETTINGS")]
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public readonly partial struct LpX3DAudioDspSettings : IEquatable<LpX3DAudioDspSettings>
	{
		public LpX3DAudioDspSettings(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LpX3DAudioDspSettings Null => new LpX3DAudioDspSettings(0);
		public static implicit operator LpX3DAudioDspSettings(nint handle) => new LpX3DAudioDspSettings(handle);
		public static bool operator ==(LpX3DAudioDspSettings left, LpX3DAudioDspSettings right) => left.Handle == right.Handle;
		public static bool operator !=(LpX3DAudioDspSettings left, LpX3DAudioDspSettings right) => left.Handle != right.Handle;
		public static bool operator ==(LpX3DAudioDspSettings left, nint right) => left.Handle == right;
		public static bool operator !=(LpX3DAudioDspSettings left, nint right) => left.Handle != right;
		public bool Equals(LpX3DAudioDspSettings other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LpX3DAudioDspSettings handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("LpX3DAudioDspSettings [0x{0}]", Handle.ToString("X"));
		#endif
	}
}
