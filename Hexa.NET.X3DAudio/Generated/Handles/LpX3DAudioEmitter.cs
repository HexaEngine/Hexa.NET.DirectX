// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.X3DAudio
{
	/// <summary>
	/// Emitter:<br/>
	/// Defines a 3D audio source, divided into two classifications:<br/>
	/// Single-point -- For use with single-channel sounds.<br/>
	/// Positioned at the emitter base, i.e. the channel radius<br/>
	/// and azimuth are ignored if the number of channels == 1.<br/>
	/// May be omnidirectional or directional using a cone.<br/>
	/// The cone originates from the emitter base position,<br/>
	/// and is directed by the emitter's front orientation.<br/>
	/// Multi-point  -- For use with multi-channel sounds.<br/>
	/// Each non-LFE channel is positioned using an<br/>
	/// azimuth along the channel radius with respect to the<br/>
	/// front orientation vector in the plane orthogonal to the<br/>
	/// top orientation vector.  An azimuth of X3DAUDIO_2PI<br/>
	/// specifies a channel is an LFE.  Such channels are<br/>
	/// positioned at the emitter base and are calculated<br/>
	/// with respect to pLFECurve only, never pVolumeCurve.<br/>
	/// Multi-point emitters are always omnidirectional,<br/>
	/// i.e. the cone is ignored if the number of channels > 1.<br/>
	/// Note that many properties are shared among all channel points,<br/>
	/// locking certain behaviour with respect to the emitter base position.<br/>
	/// For example, doppler shift is always calculated with respect to the<br/>
	/// emitter base position and so is constant for all its channel points.<br/>
	/// Distance curve calculations are also with respect to the emitter base<br/>
	/// position, with the curves being calculated independently of each other.<br/>
	/// For instance, volume and LFE calculations do not affect one another.<br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPX3DAUDIO_EMITTER")]
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public readonly partial struct LpX3DAudioEmitter : IEquatable<LpX3DAudioEmitter>
	{
		public LpX3DAudioEmitter(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LpX3DAudioEmitter Null => new LpX3DAudioEmitter(0);
		public static implicit operator LpX3DAudioEmitter(nint handle) => new LpX3DAudioEmitter(handle);
		public static bool operator ==(LpX3DAudioEmitter left, LpX3DAudioEmitter right) => left.Handle == right.Handle;
		public static bool operator !=(LpX3DAudioEmitter left, LpX3DAudioEmitter right) => left.Handle != right.Handle;
		public static bool operator ==(LpX3DAudioEmitter left, nint right) => left.Handle == right;
		public static bool operator !=(LpX3DAudioEmitter left, nint right) => left.Handle != right;
		public bool Equals(LpX3DAudioEmitter other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LpX3DAudioEmitter handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("LpX3DAudioEmitter [0x{0}]", Handle.ToString("X"));
		#endif
	}
}
