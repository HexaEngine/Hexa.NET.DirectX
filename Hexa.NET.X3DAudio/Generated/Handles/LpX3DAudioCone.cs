// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.X3DAudio
{
	/// <summary>
	/// Cone:<br/>
	/// Specifies directionality for a listener or single-channel emitter by<br/>
	/// modifying DSP behaviour with respect to its front orientation.<br/>
	/// This is modeled using two sound cones: an inner cone and an outer cone.<br/>
	/// On/within the inner cone, DSP settings are scaled by the inner values.<br/>
	/// On/beyond the outer cone, DSP settings are scaled by the outer values.<br/>
	/// If on both the cones, DSP settings are scaled by the inner values only.<br/>
	/// Between the two cones, the scaler is linearly interpolated between the<br/>
	/// inner and outer values.  Set both cone angles to 0 or X3DAUDIO_2PI for<br/>
	/// omnidirectionality using only the outer or inner values respectively.<br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPX3DAUDIO_CONE")]
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public readonly partial struct LpX3DAudioCone : IEquatable<LpX3DAudioCone>
	{
		public LpX3DAudioCone(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LpX3DAudioCone Null => new LpX3DAudioCone(0);
		public static implicit operator LpX3DAudioCone(nint handle) => new LpX3DAudioCone(handle);
		public static bool operator ==(LpX3DAudioCone left, LpX3DAudioCone right) => left.Handle == right.Handle;
		public static bool operator !=(LpX3DAudioCone left, LpX3DAudioCone right) => left.Handle != right.Handle;
		public static bool operator ==(LpX3DAudioCone left, nint right) => left.Handle == right;
		public static bool operator !=(LpX3DAudioCone left, nint right) => left.Handle != right;
		public bool Equals(LpX3DAudioCone other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LpX3DAudioCone handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("LpX3DAudioCone [0x{0}]", Handle.ToString("X"));
		#endif
	}
}
