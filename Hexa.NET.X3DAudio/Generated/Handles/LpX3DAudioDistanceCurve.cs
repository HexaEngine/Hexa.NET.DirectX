// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.X3DAudio
{
	/// <summary>
	/// Distance curve:<br/>
	/// A piecewise curve made up of linear segments used to<br/>
	/// define DSP behaviour with respect to normalized distance.<br/>
	/// Note that curve point distances are normalized within [0.0f, 1.0f].<br/>
	/// X3DAUDIO_EMITTER.CurveDistanceScaler must be used to scale the<br/>
	/// normalized distances to user-defined world units.<br/>
	/// For distances beyond CurveDistanceScaler * 1.0f,<br/>
	/// pPoints[PointCount-1].DSPSetting is used as the DSP setting.<br/>
	/// All distance curve spans must be such that:<br/>
	/// pPoints[k-1].DSPSetting + ((pPoints[k].DSPSetting-pPoints[k-1].DSPSetting) / (pPoints[k].Distance-pPoints[k-1].Distance)) * (pPoints[k].Distance-pPoints[k-1].Distance) != NAN or infinite values<br/>
	/// For all points in the distance curve where 1 <br/>
	/// <<br/>
	/// = k <br/>
	/// <<br/>
	/// PointCount.<br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPX3DAUDIO_DISTANCE_CURVE")]
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public readonly partial struct LpX3DAudioDistanceCurve : IEquatable<LpX3DAudioDistanceCurve>
	{
		public LpX3DAudioDistanceCurve(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LpX3DAudioDistanceCurve Null => new LpX3DAudioDistanceCurve(0);
		public static implicit operator LpX3DAudioDistanceCurve(nint handle) => new LpX3DAudioDistanceCurve(handle);
		public static bool operator ==(LpX3DAudioDistanceCurve left, LpX3DAudioDistanceCurve right) => left.Handle == right.Handle;
		public static bool operator !=(LpX3DAudioDistanceCurve left, LpX3DAudioDistanceCurve right) => left.Handle != right.Handle;
		public static bool operator ==(LpX3DAudioDistanceCurve left, nint right) => left.Handle == right;
		public static bool operator !=(LpX3DAudioDistanceCurve left, nint right) => left.Handle != right;
		public bool Equals(LpX3DAudioDistanceCurve other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LpX3DAudioDistanceCurve handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("LpX3DAudioDistanceCurve [0x{0}]", Handle.ToString("X"));
		#endif
	}
}
