// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXGI
{
	public static unsafe partial class Extensions
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, ComPtr<IUnknown> pWindow, SwapChainDesc1* pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)pDevice.Handle, (IUnknown*)pWindow.Handle, pDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, IUnknown* pWindow, ref SwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, pWindow, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, IUnknown* pWindow, ref SwapChainDesc1 pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, pWindow, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, IUnknown* pWindow, ref SwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)ppDevice, pWindow, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, IUnknown* pWindow, ref SwapChainDesc1 pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)pDevice.Handle, pWindow, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ref IUnknown pWindow, ref SwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppWindow = &pWindow)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, (IUnknown*)ppWindow, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ComPtr<IUnknown> pWindow, ref SwapChainDesc1 pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, (IUnknown*)pWindow.Handle, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, ref IUnknown pWindow, ref SwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IUnknown* ppWindow = &pWindow)
				{
					fixed (SwapChainDesc1* ppDesc = &pDesc)
					{
						fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)ppDevice, (IUnknown*)ppWindow, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, ComPtr<IUnknown> pWindow, ref SwapChainDesc1 pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)pDevice.Handle, (IUnknown*)pWindow.Handle, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, IUnknown* pWindow, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, pWindow, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, IUnknown* pWindow, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, pWindow, pDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, IUnknown* pWindow, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)ppDevice, pWindow, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, IUnknown* pWindow, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)pDevice.Handle, pWindow, pDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ref IUnknown pWindow, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppWindow = &pWindow)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, (IUnknown*)ppWindow, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ComPtr<IUnknown> pWindow, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, (IUnknown*)pWindow.Handle, pDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, ref IUnknown pWindow, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IUnknown* ppWindow = &pWindow)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)ppDevice, (IUnknown*)ppWindow, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, ComPtr<IUnknown> pWindow, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)pDevice.Handle, (IUnknown*)pWindow.Handle, pDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, IUnknown* pWindow, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, pWindow, (SwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, IUnknown* pWindow, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, pWindow, (SwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, IUnknown* pWindow, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)ppDevice, pWindow, (SwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, IUnknown* pWindow, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)pDevice.Handle, pWindow, (SwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ref IUnknown pWindow, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppWindow = &pWindow)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, (IUnknown*)ppWindow, (SwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ComPtr<IUnknown> pWindow, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, (IUnknown*)pWindow.Handle, (SwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, ref IUnknown pWindow, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IUnknown* ppWindow = &pWindow)
				{
					fixed (SwapChainDesc1* ppDesc = &pDesc)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)ppDevice, (IUnknown*)ppWindow, (SwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, ComPtr<IUnknown> pWindow, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)pDevice.Handle, (IUnknown*)pWindow.Handle, (SwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, IUnknown* pWindow, SwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, pWindow, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, IUnknown* pWindow, SwapChainDesc1* pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, pWindow, pDesc, (IDXGIOutput*)pRestrictToOutput.Handle, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, IUnknown* pWindow, SwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)ppDevice, pWindow, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, IUnknown* pWindow, SwapChainDesc1* pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)pDevice.Handle, pWindow, pDesc, (IDXGIOutput*)pRestrictToOutput.Handle, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ref IUnknown pWindow, SwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppWindow = &pWindow)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, (IUnknown*)ppWindow, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ComPtr<IUnknown> pWindow, SwapChainDesc1* pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, (IUnknown*)pWindow.Handle, pDesc, (IDXGIOutput*)pRestrictToOutput.Handle, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, ref IUnknown pWindow, SwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IUnknown* ppWindow = &pWindow)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)ppDevice, (IUnknown*)ppWindow, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, ComPtr<IUnknown> pWindow, SwapChainDesc1* pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)pDevice.Handle, (IUnknown*)pWindow.Handle, pDesc, (IDXGIOutput*)pRestrictToOutput.Handle, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, IUnknown* pWindow, ref SwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, pWindow, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, IUnknown* pWindow, ref SwapChainDesc1 pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, pWindow, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)pRestrictToOutput.Handle, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, IUnknown* pWindow, ref SwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)ppDevice, pWindow, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, IUnknown* pWindow, ref SwapChainDesc1 pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)pDevice.Handle, pWindow, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)pRestrictToOutput.Handle, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ref IUnknown pWindow, ref SwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppWindow = &pWindow)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, (IUnknown*)ppWindow, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ComPtr<IUnknown> pWindow, ref SwapChainDesc1 pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, pDevice, (IUnknown*)pWindow.Handle, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)pRestrictToOutput.Handle, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, ref IUnknown pWindow, ref SwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IUnknown* ppWindow = &pWindow)
				{
					fixed (SwapChainDesc1* ppDesc = &pDesc)
					{
						fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
						{
							fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)ppDevice, (IUnknown*)ppWindow, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForCoreWindow(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, ComPtr<IUnknown> pWindow, ref SwapChainDesc1 pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[16]))(handle, (IUnknown*)pDevice.Handle, (IUnknown*)pWindow.Handle, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)pRestrictToOutput.Handle, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSharedResourceAdapterLuid(this ComPtr<IDXGIFactory7> comObj, nint hResource, Luid* pLuid) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, Luid*, HResult>)(handle->LpVtbl[17]))(handle, hResource, pLuid);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSharedResourceAdapterLuid(this ComPtr<IDXGIFactory7> comObj, nint hResource, ref Luid pLuid) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (Luid* ppLuid = &pLuid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, Luid*, HResult>)(handle->LpVtbl[17]))(handle, hResource, (Luid*)ppLuid);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterStereoStatusWindow(this ComPtr<IDXGIFactory7> comObj, nint windowHandle, uint wMsg, uint* pdwCookie) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, uint, uint*, HResult>)(handle->LpVtbl[18]))(handle, windowHandle, wMsg, pdwCookie);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterStereoStatusWindow(this ComPtr<IDXGIFactory7> comObj, nint windowHandle, uint wMsg, ref uint pdwCookie) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, uint, uint*, HResult>)(handle->LpVtbl[18]))(handle, windowHandle, wMsg, (uint*)ppdwCookie);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterStereoStatusEvent(this ComPtr<IDXGIFactory7> comObj, nint hEvent, uint* pdwCookie) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, uint*, HResult>)(handle->LpVtbl[19]))(handle, hEvent, pdwCookie);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterStereoStatusEvent(this ComPtr<IDXGIFactory7> comObj, nint hEvent, ref uint pdwCookie) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, uint*, HResult>)(handle->LpVtbl[19]))(handle, hEvent, (uint*)ppdwCookie);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UnregisterStereoStatus(this ComPtr<IDXGIFactory7> comObj, uint dwCookie) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIFactory7*, uint, void>)(handle->LpVtbl[20]))(handle, dwCookie);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterOcclusionStatusWindow(this ComPtr<IDXGIFactory7> comObj, nint windowHandle, uint wMsg, uint* pdwCookie) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, uint, uint*, HResult>)(handle->LpVtbl[21]))(handle, windowHandle, wMsg, pdwCookie);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterOcclusionStatusWindow(this ComPtr<IDXGIFactory7> comObj, nint windowHandle, uint wMsg, ref uint pdwCookie) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, uint, uint*, HResult>)(handle->LpVtbl[21]))(handle, windowHandle, wMsg, (uint*)ppdwCookie);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterOcclusionStatusEvent(this ComPtr<IDXGIFactory7> comObj, nint hEvent, uint* pdwCookie) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, uint*, HResult>)(handle->LpVtbl[22]))(handle, hEvent, pdwCookie);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterOcclusionStatusEvent(this ComPtr<IDXGIFactory7> comObj, nint hEvent, ref uint pdwCookie) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, uint*, HResult>)(handle->LpVtbl[22]))(handle, hEvent, (uint*)ppdwCookie);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UnregisterOcclusionStatus(this ComPtr<IDXGIFactory7> comObj, uint dwCookie) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIFactory7*, uint, void>)(handle->LpVtbl[23]))(handle, dwCookie);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, pDesc, pRestrictToOutput, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)ppDevice, pDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)pDevice.Handle, pDesc, pRestrictToOutput, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, (SwapChainDesc1*)ppDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)ppDevice, (SwapChainDesc1*)ppDesc, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)pDevice.Handle, (SwapChainDesc1*)ppDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, SwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, pDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, SwapChainDesc1* pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, pDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, SwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)ppDevice, pDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, SwapChainDesc1* pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)pDevice.Handle, pDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ref SwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ref SwapChainDesc1 pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, ref SwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)ppDevice, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, ref SwapChainDesc1 pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)pDevice.Handle, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, pDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)ppDevice, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, SwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)pDevice.Handle, pDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, (SwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, (SwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)ppDevice, (SwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, ref SwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)pDevice.Handle, (SwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, SwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, SwapChainDesc1* pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, pDesc, (IDXGIOutput*)pRestrictToOutput.Handle, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, SwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)ppDevice, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, SwapChainDesc1* pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)pDevice.Handle, pDesc, (IDXGIOutput*)pRestrictToOutput.Handle, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ref SwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, IUnknown* pDevice, ref SwapChainDesc1 pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, pDevice, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)pRestrictToOutput.Handle, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ref IUnknown pDevice, ref SwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)ppDevice, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForComposition(this ComPtr<IDXGIFactory7> comObj, ComPtr<IUnknown> pDevice, ref SwapChainDesc1 pDesc, ComPtr<IDXGIOutput> pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, IUnknown*, SwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[24]))(handle, (IUnknown*)pDevice.Handle, (SwapChainDesc1*)ppDesc, (IDXGIOutput*)pRestrictToOutput.Handle, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCreationFlags(this ComPtr<IDXGIFactory7> comObj) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, uint>)(handle->LpVtbl[25]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapterByLuid(this ComPtr<IDXGIFactory7> comObj, Luid adapterLuid, Guid* riid, void** ppvAdapter) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, Luid, Guid*, void**, HResult>)(handle->LpVtbl[26]))(handle, adapterLuid, riid, ppvAdapter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapterByLuid(this ComPtr<IDXGIFactory7> comObj, Luid adapterLuid, ref Guid riid, void** ppvAdapter) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, Luid, Guid*, void**, HResult>)(handle->LpVtbl[26]))(handle, adapterLuid, (Guid*)priid, ppvAdapter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapterByLuid<T>(this ComPtr<IDXGIFactory7> comObj, Luid adapterLuid, out ComPtr<T> ppvAdapter) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppvAdapter = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, Luid, Guid*, void**, HResult>)(handle->LpVtbl[26]))(handle, adapterLuid, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapterByLuid<T>(this ComPtr<IDXGIFactory7> comObj, Luid adapterLuid, ref Guid riid, out ComPtr<T> ppvAdapter) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvAdapter = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, Luid, Guid*, void**, HResult>)(handle->LpVtbl[26]))(handle, adapterLuid, (Guid*)priid, (void**)ppvAdapter.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumWarpAdapter(this ComPtr<IDXGIFactory7> comObj, Guid* riid, void** ppvAdapter) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, Guid*, void**, HResult>)(handle->LpVtbl[27]))(handle, riid, ppvAdapter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumWarpAdapter(this ComPtr<IDXGIFactory7> comObj, ref Guid riid, void** ppvAdapter) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, Guid*, void**, HResult>)(handle->LpVtbl[27]))(handle, (Guid*)priid, ppvAdapter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumWarpAdapter<T>(this ComPtr<IDXGIFactory7> comObj, out ComPtr<T> ppvAdapter) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppvAdapter = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, Guid*, void**, HResult>)(handle->LpVtbl[27]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumWarpAdapter<T>(this ComPtr<IDXGIFactory7> comObj, ref Guid riid, out ComPtr<T> ppvAdapter) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvAdapter = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, Guid*, void**, HResult>)(handle->LpVtbl[27]))(handle, (Guid*)priid, (void**)ppvAdapter.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckFeatureSupport(this ComPtr<IDXGIFactory7> comObj, Feature feature, void* pFeatureSupportData, uint featureSupportDataSize) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, Feature, void*, uint, HResult>)(handle->LpVtbl[28]))(handle, feature, pFeatureSupportData, featureSupportDataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckFeatureSupport<T>(this ComPtr<IDXGIFactory7> comObj, Feature feature, ComPtr<T> pFeatureSupportData, uint featureSupportDataSize) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, Feature, void*, uint, HResult>)(handle->LpVtbl[28]))(handle, feature, (void*)pFeatureSupportData.Handle, featureSupportDataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapterByGpuPreference(this ComPtr<IDXGIFactory7> comObj, uint adapter, GpuPreference gpuPreference, Guid* riid, void** ppvAdapter) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, uint, GpuPreference, Guid*, void**, HResult>)(handle->LpVtbl[29]))(handle, adapter, gpuPreference, riid, ppvAdapter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapterByGpuPreference(this ComPtr<IDXGIFactory7> comObj, uint adapter, GpuPreference gpuPreference, ref Guid riid, void** ppvAdapter) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, uint, GpuPreference, Guid*, void**, HResult>)(handle->LpVtbl[29]))(handle, adapter, gpuPreference, (Guid*)priid, ppvAdapter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapterByGpuPreference<T>(this ComPtr<IDXGIFactory7> comObj, uint adapter, GpuPreference gpuPreference, out ComPtr<T> ppvAdapter) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory7* handle = comObj.Handle;
			ppvAdapter = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, uint, GpuPreference, Guid*, void**, HResult>)(handle->LpVtbl[29]))(handle, adapter, gpuPreference, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapterByGpuPreference<T>(this ComPtr<IDXGIFactory7> comObj, uint adapter, GpuPreference gpuPreference, ref Guid riid, out ComPtr<T> ppvAdapter) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvAdapter = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, uint, GpuPreference, Guid*, void**, HResult>)(handle->LpVtbl[29]))(handle, adapter, gpuPreference, (Guid*)priid, (void**)ppvAdapter.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterAdaptersChangedEvent(this ComPtr<IDXGIFactory7> comObj, nint hEvent, uint* pdwCookie) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, uint*, HResult>)(handle->LpVtbl[30]))(handle, hEvent, pdwCookie);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterAdaptersChangedEvent(this ComPtr<IDXGIFactory7> comObj, nint hEvent, ref uint pdwCookie) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, uint*, HResult>)(handle->LpVtbl[30]))(handle, hEvent, (uint*)ppdwCookie);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult UnregisterAdaptersChangedEvent(this ComPtr<IDXGIFactory7> comObj, uint dwCookie) 
		{
			IDXGIFactory7* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, uint, HResult>)(handle->LpVtbl[31]))(handle, dwCookie);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIInfoQueue> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIInfoQueue> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIInfoQueue> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIInfoQueue> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIInfoQueue> comObj) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIInfoQueue> comObj) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetMessageCountLimit(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, ulong messageCountLimit) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong, HResult>)(handle->LpVtbl[3]))(handle, producer, messageCountLimit);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClearStoredMessages(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, void>)(handle->LpVtbl[4]))(handle, producer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMessageA(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, ulong messageIndex, InfoQueueMessage* pMessage, nuint* pMessageByteLength) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong, InfoQueueMessage*, nuint*, HResult>)(handle->LpVtbl[5]))(handle, producer, messageIndex, pMessage, pMessageByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMessageA(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, ulong messageIndex, ref InfoQueueMessage pMessage, nuint* pMessageByteLength) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (InfoQueueMessage* ppMessage = &pMessage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong, InfoQueueMessage*, nuint*, HResult>)(handle->LpVtbl[5]))(handle, producer, messageIndex, (InfoQueueMessage*)ppMessage, pMessageByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMessageA(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, ulong messageIndex, InfoQueueMessage* pMessage, ref nuint pMessageByteLength) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (nuint* ppMessageByteLength = &pMessageByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong, InfoQueueMessage*, nuint*, HResult>)(handle->LpVtbl[5]))(handle, producer, messageIndex, pMessage, (nuint*)ppMessageByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMessageA(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, ulong messageIndex, ref InfoQueueMessage pMessage, ref nuint pMessageByteLength) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (InfoQueueMessage* ppMessage = &pMessage)
			{
				fixed (nuint* ppMessageByteLength = &pMessageByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong, InfoQueueMessage*, nuint*, HResult>)(handle->LpVtbl[5]))(handle, producer, messageIndex, (InfoQueueMessage*)ppMessage, (nuint*)ppMessageByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumStoredMessagesAllowedByRetrievalFilters(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong>)(handle->LpVtbl[6]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumStoredMessages(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong>)(handle->LpVtbl[7]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumMessagesDiscardedByMessageCountLimit(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong>)(handle->LpVtbl[8]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetMessageCountLimit(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong>)(handle->LpVtbl[9]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumMessagesAllowedByStorageFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong>)(handle->LpVtbl[10]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumMessagesDeniedByStorageFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong>)(handle->LpVtbl[11]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddStorageFilterEntries(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueFilter* pFilter) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(handle->LpVtbl[12]))(handle, producer, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddStorageFilterEntries(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, ref InfoQueueFilter pFilter) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(handle->LpVtbl[12]))(handle, producer, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetStorageFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueFilter* pFilter, nuint* pFilterByteLength) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[13]))(handle, producer, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetStorageFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, ref InfoQueueFilter pFilter, nuint* pFilterByteLength) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[13]))(handle, producer, (InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetStorageFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueFilter* pFilter, ref nuint pFilterByteLength) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[13]))(handle, producer, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetStorageFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, ref InfoQueueFilter pFilter, ref nuint pFilterByteLength) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[13]))(handle, producer, (InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClearStorageFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, void>)(handle->LpVtbl[14]))(handle, producer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushEmptyStorageFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, HResult>)(handle->LpVtbl[15]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushDenyAllStorageFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, HResult>)(handle->LpVtbl[16]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushCopyOfStorageFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, HResult>)(handle->LpVtbl[17]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushStorageFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueFilter* pFilter) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(handle->LpVtbl[18]))(handle, producer, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushStorageFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, ref InfoQueueFilter pFilter) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(handle->LpVtbl[18]))(handle, producer, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PopStorageFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, void>)(handle->LpVtbl[19]))(handle, producer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetStorageFilterStackSize(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, uint>)(handle->LpVtbl[20]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddRetrievalFilterEntries(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueFilter* pFilter) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(handle->LpVtbl[21]))(handle, producer, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddRetrievalFilterEntries(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, ref InfoQueueFilter pFilter) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(handle->LpVtbl[21]))(handle, producer, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRetrievalFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueFilter* pFilter, nuint* pFilterByteLength) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[22]))(handle, producer, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRetrievalFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, ref InfoQueueFilter pFilter, nuint* pFilterByteLength) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[22]))(handle, producer, (InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRetrievalFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueFilter* pFilter, ref nuint pFilterByteLength) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[22]))(handle, producer, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRetrievalFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, ref InfoQueueFilter pFilter, ref nuint pFilterByteLength) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[22]))(handle, producer, (InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClearRetrievalFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, void>)(handle->LpVtbl[23]))(handle, producer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushEmptyRetrievalFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, HResult>)(handle->LpVtbl[24]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushDenyAllRetrievalFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, HResult>)(handle->LpVtbl[25]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushCopyOfRetrievalFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, HResult>)(handle->LpVtbl[26]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushRetrievalFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueFilter* pFilter) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(handle->LpVtbl[27]))(handle, producer, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushRetrievalFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, ref InfoQueueFilter pFilter) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(handle->LpVtbl[27]))(handle, producer, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PopRetrievalFilter(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, void>)(handle->LpVtbl[28]))(handle, producer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetRetrievalFilterStackSize(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, uint>)(handle->LpVtbl[29]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddMessage(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueMessageCategory category, InfoQueueMessageSeverity severity, int id, byte* pDescription) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageCategory, InfoQueueMessageSeverity, int, byte*, HResult>)(handle->LpVtbl[30]))(handle, producer, category, severity, id, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddMessage(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueMessageCategory category, InfoQueueMessageSeverity severity, int id, ReadOnlySpan<byte> pDescription) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (byte* ppDescription = pDescription)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageCategory, InfoQueueMessageSeverity, int, byte*, HResult>)(handle->LpVtbl[30]))(handle, producer, category, severity, id, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddMessage(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueMessageCategory category, InfoQueueMessageSeverity severity, int id, string pDescription) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageCategory, InfoQueueMessageSeverity, int, byte*, HResult>)(handle->LpVtbl[30]))(handle, producer, category, severity, id, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddApplicationMessage(this ComPtr<IDXGIInfoQueue> comObj, InfoQueueMessageSeverity severity, byte* pDescription) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, InfoQueueMessageSeverity, byte*, HResult>)(handle->LpVtbl[31]))(handle, severity, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddApplicationMessage(this ComPtr<IDXGIInfoQueue> comObj, InfoQueueMessageSeverity severity, ReadOnlySpan<byte> pDescription) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			fixed (byte* ppDescription = pDescription)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, InfoQueueMessageSeverity, byte*, HResult>)(handle->LpVtbl[31]))(handle, severity, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddApplicationMessage(this ComPtr<IDXGIInfoQueue> comObj, InfoQueueMessageSeverity severity, string pDescription) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, InfoQueueMessageSeverity, byte*, HResult>)(handle->LpVtbl[31]))(handle, severity, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetBreakOnCategory(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueMessageCategory category, Bool32 bEnable) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageCategory, Bool32, HResult>)(handle->LpVtbl[32]))(handle, producer, category, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetBreakOnSeverity(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueMessageSeverity severity, Bool32 bEnable) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageSeverity, Bool32, HResult>)(handle->LpVtbl[33]))(handle, producer, severity, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetBreakOnID(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, int id, Bool32 bEnable) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, int, Bool32, HResult>)(handle->LpVtbl[34]))(handle, producer, id, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 GetBreakOnCategory(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueMessageCategory category) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageCategory, Bool32>)(handle->LpVtbl[35]))(handle, producer, category);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 GetBreakOnSeverity(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, InfoQueueMessageSeverity severity) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageSeverity, Bool32>)(handle->LpVtbl[36]))(handle, producer, severity);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 GetBreakOnID(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, int id) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, int, Bool32>)(handle->LpVtbl[37]))(handle, producer, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetMuteDebugOutput(this ComPtr<IDXGIInfoQueue> comObj, Guid producer, Bool32 bMute) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, Bool32, void>)(handle->LpVtbl[38]))(handle, producer, bMute);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 GetMuteDebugOutput(this ComPtr<IDXGIInfoQueue> comObj, Guid producer) 
		{
			IDXGIInfoQueue* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, Bool32>)(handle->LpVtbl[39]))(handle, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIDebug> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIDebug* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIDebug> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIDebug* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIDebug> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDebug* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIDebug> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDebug* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIDebug> comObj) 
		{
			IDXGIDebug* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIDebug> comObj) 
		{
			IDXGIDebug* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReportLiveObjects(this ComPtr<IDXGIDebug> comObj, Guid apiid, DebugRloFlags flags) 
		{
			IDXGIDebug* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug*, Guid, DebugRloFlags, HResult>)(handle->LpVtbl[3]))(handle, apiid, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIDebug1> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIDebug1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug1*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIDebug1> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIDebug1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug1*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIDebug1> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDebug1* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug1*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIDebug1> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDebug1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug1*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIDebug1> comObj) 
		{
			IDXGIDebug1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug1*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIDebug1> comObj) 
		{
			IDXGIDebug1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug1*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReportLiveObjects(this ComPtr<IDXGIDebug1> comObj, Guid apiid, DebugRloFlags flags) 
		{
			IDXGIDebug1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug1*, Guid, DebugRloFlags, HResult>)(handle->LpVtbl[3]))(handle, apiid, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EnableLeakTrackingForThread(this ComPtr<IDXGIDebug1> comObj) 
		{
			IDXGIDebug1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIDebug1*, void>)(handle->LpVtbl[4]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DisableLeakTrackingForThread(this ComPtr<IDXGIDebug1> comObj) 
		{
			IDXGIDebug1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIDebug1*, void>)(handle->LpVtbl[5]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 IsLeakTrackingEnabledForThread(this ComPtr<IDXGIDebug1> comObj) 
		{
			IDXGIDebug1* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIDebug1*, Bool32>)(handle->LpVtbl[6]))(handle);
			return ret;
		}

	}
}
