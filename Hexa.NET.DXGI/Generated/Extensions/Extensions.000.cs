// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXGI
{
	public static unsafe partial class Extensions
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIObject> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIObject> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIObject> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIObject* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIObject> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIObject> comObj) 
		{
			IDXGIObject* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIObject> comObj) 
		{
			IDXGIObject* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIObject> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGIObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIObject> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIObject> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGIObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIObject> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIObject> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIObject> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIObject> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIObject> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIObject> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIObject> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIObject> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIObject> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIObject> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIObject> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIObject> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIObject> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIObject> comObj, Guid* riid, void** ppParent) 
		{
			IDXGIObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIObject> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIObject> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIObject* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIObject> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIObject* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIDeviceSubObject> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIDeviceSubObject> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIDeviceSubObject> comObj) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIDeviceSubObject> comObj) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIDeviceSubObject> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDeviceSubObject> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDeviceSubObject> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDeviceSubObject> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIDeviceSubObject> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIDeviceSubObject> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIDeviceSubObject> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIDeviceSubObject> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIDeviceSubObject> comObj, Guid* riid, void** ppParent) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIDeviceSubObject> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGIDeviceSubObject> comObj, Guid* riid, void** ppDevice) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid riid, void** ppDevice) 
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGIDeviceSubObject> comObj, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			ppDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGIDeviceSubObject> comObj, ref Guid riid, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDeviceSubObject* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIResource> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIResource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIResource> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIResource> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIResource* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIResource> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIResource> comObj) 
		{
			IDXGIResource* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIResource> comObj) 
		{
			IDXGIResource* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIResource> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGIResource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIResource> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIResource> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGIResource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIResource> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIResource> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIResource> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIResource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIResource> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIResource> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIResource> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIResource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIResource> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIResource> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIResource> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIResource> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIResource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIResource> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIResource> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIResource> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIResource> comObj, Guid* riid, void** ppParent) 
		{
			IDXGIResource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIResource> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIResource> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIResource* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIResource> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGIResource> comObj, Guid* riid, void** ppDevice) 
		{
			IDXGIResource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGIResource> comObj, ref Guid riid, void** ppDevice) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGIResource> comObj, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIResource* handle = comObj.Handle;
			ppDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGIResource> comObj, ref Guid riid, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSharedHandle(this ComPtr<IDXGIResource> comObj, nint* pSharedHandle) 
		{
			IDXGIResource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, nint*, HResult>)(handle->LpVtbl[8]))(handle, pSharedHandle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSharedHandle(this ComPtr<IDXGIResource> comObj, ref nint pSharedHandle) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (nint* ppSharedHandle = &pSharedHandle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, nint*, HResult>)(handle->LpVtbl[8]))(handle, (nint*)ppSharedHandle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetUsage(this ComPtr<IDXGIResource> comObj, uint* pUsage) 
		{
			IDXGIResource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, uint*, HResult>)(handle->LpVtbl[9]))(handle, pUsage);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetUsage(this ComPtr<IDXGIResource> comObj, ref uint pUsage) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (uint* ppUsage = &pUsage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, uint*, HResult>)(handle->LpVtbl[9]))(handle, (uint*)ppUsage);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetEvictionPriority(this ComPtr<IDXGIResource> comObj, uint evictionPriority) 
		{
			IDXGIResource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, uint, HResult>)(handle->LpVtbl[10]))(handle, evictionPriority);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetEvictionPriority(this ComPtr<IDXGIResource> comObj, uint* pEvictionPriority) 
		{
			IDXGIResource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, uint*, HResult>)(handle->LpVtbl[11]))(handle, pEvictionPriority);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetEvictionPriority(this ComPtr<IDXGIResource> comObj, ref uint pEvictionPriority) 
		{
			IDXGIResource* handle = comObj.Handle;
			fixed (uint* ppEvictionPriority = &pEvictionPriority)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, uint*, HResult>)(handle->LpVtbl[11]))(handle, (uint*)ppEvictionPriority);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIKeyedMutex> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIKeyedMutex> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIKeyedMutex> comObj) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIKeyedMutex> comObj) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIKeyedMutex> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIKeyedMutex> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIKeyedMutex> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIKeyedMutex> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIKeyedMutex> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIKeyedMutex> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIKeyedMutex> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIKeyedMutex> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIKeyedMutex> comObj, Guid* riid, void** ppParent) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIKeyedMutex> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGIKeyedMutex> comObj, Guid* riid, void** ppDevice) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid riid, void** ppDevice) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGIKeyedMutex> comObj, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			ppDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGIKeyedMutex> comObj, ref Guid riid, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AcquireSync(this ComPtr<IDXGIKeyedMutex> comObj, ulong key, uint dwMilliseconds) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, ulong, uint, HResult>)(handle->LpVtbl[8]))(handle, key, dwMilliseconds);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReleaseSync(this ComPtr<IDXGIKeyedMutex> comObj, ulong key) 
		{
			IDXGIKeyedMutex* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, ulong, HResult>)(handle->LpVtbl[9]))(handle, key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGISurface> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGISurface* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGISurface> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGISurface> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGISurface> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGISurface> comObj) 
		{
			IDXGISurface* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGISurface> comObj) 
		{
			IDXGISurface* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGISurface> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGISurface* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGISurface> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISurface> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGISurface* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISurface> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISurface> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISurface> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGISurface* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISurface> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISurface> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISurface> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGISurface* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISurface> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISurface> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISurface> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISurface> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISurface> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISurface> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISurface> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGISurface> comObj, Guid* riid, void** ppParent) 
		{
			IDXGISurface* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGISurface> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGISurface> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGISurface> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGISurface> comObj, Guid* riid, void** ppDevice) 
		{
			IDXGISurface* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGISurface> comObj, ref Guid riid, void** ppDevice) 
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGISurface> comObj, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface* handle = comObj.Handle;
			ppDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGISurface> comObj, ref Guid riid, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGISurface> comObj, SurfaceDesc* pDesc) 
		{
			IDXGISurface* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, SurfaceDesc*, HResult>)(handle->LpVtbl[8]))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGISurface> comObj, ref SurfaceDesc pDesc) 
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (SurfaceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, SurfaceDesc*, HResult>)(handle->LpVtbl[8]))(handle, (SurfaceDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Map(this ComPtr<IDXGISurface> comObj, MappedRect* pLockedRect, uint mapFlags) 
		{
			IDXGISurface* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, MappedRect*, uint, HResult>)(handle->LpVtbl[9]))(handle, pLockedRect, mapFlags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Map(this ComPtr<IDXGISurface> comObj, ref MappedRect pLockedRect, uint mapFlags) 
		{
			IDXGISurface* handle = comObj.Handle;
			fixed (MappedRect* ppLockedRect = &pLockedRect)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, MappedRect*, uint, HResult>)(handle->LpVtbl[9]))(handle, (MappedRect*)ppLockedRect, mapFlags);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Unmap(this ComPtr<IDXGISurface> comObj) 
		{
			IDXGISurface* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, HResult>)(handle->LpVtbl[10]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGISurface1> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGISurface1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGISurface1> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGISurface1> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface1* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGISurface1> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGISurface1> comObj) 
		{
			IDXGISurface1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGISurface1> comObj) 
		{
			IDXGISurface1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGISurface1> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGISurface1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGISurface1> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISurface1> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGISurface1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISurface1> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISurface1> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISurface1> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGISurface1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISurface1> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISurface1> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISurface1> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGISurface1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISurface1> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISurface1> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISurface1> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISurface1> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISurface1> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISurface1> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISurface1> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGISurface1> comObj, Guid* riid, void** ppParent) 
		{
			IDXGISurface1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGISurface1> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGISurface1> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface1* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGISurface1> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGISurface1> comObj, Guid* riid, void** ppDevice) 
		{
			IDXGISurface1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGISurface1> comObj, ref Guid riid, void** ppDevice) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGISurface1> comObj, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface1* handle = comObj.Handle;
			ppDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGISurface1> comObj, ref Guid riid, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGISurface1> comObj, SurfaceDesc* pDesc) 
		{
			IDXGISurface1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, SurfaceDesc*, HResult>)(handle->LpVtbl[8]))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGISurface1> comObj, ref SurfaceDesc pDesc) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (SurfaceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, SurfaceDesc*, HResult>)(handle->LpVtbl[8]))(handle, (SurfaceDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Map(this ComPtr<IDXGISurface1> comObj, MappedRect* pLockedRect, uint mapFlags) 
		{
			IDXGISurface1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, MappedRect*, uint, HResult>)(handle->LpVtbl[9]))(handle, pLockedRect, mapFlags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Map(this ComPtr<IDXGISurface1> comObj, ref MappedRect pLockedRect, uint mapFlags) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (MappedRect* ppLockedRect = &pLockedRect)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, MappedRect*, uint, HResult>)(handle->LpVtbl[9]))(handle, (MappedRect*)ppLockedRect, mapFlags);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Unmap(this ComPtr<IDXGISurface1> comObj) 
		{
			IDXGISurface1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, HResult>)(handle->LpVtbl[10]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDC(this ComPtr<IDXGISurface1> comObj, Bool32 discard, nint* phdc) 
		{
			IDXGISurface1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Bool32, nint*, HResult>)(handle->LpVtbl[11]))(handle, discard, phdc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDC(this ComPtr<IDXGISurface1> comObj, Bool32 discard, ref nint phdc) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (nint* pphdc = &phdc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Bool32, nint*, HResult>)(handle->LpVtbl[11]))(handle, discard, (nint*)pphdc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReleaseDC(this ComPtr<IDXGISurface1> comObj, Rect32* pDirtyRect) 
		{
			IDXGISurface1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Rect32*, HResult>)(handle->LpVtbl[12]))(handle, pDirtyRect);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReleaseDC(this ComPtr<IDXGISurface1> comObj, ref Rect32 pDirtyRect) 
		{
			IDXGISurface1* handle = comObj.Handle;
			fixed (Rect32* ppDirtyRect = &pDirtyRect)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Rect32*, HResult>)(handle->LpVtbl[12]))(handle, (Rect32*)ppDirtyRect);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIAdapter> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIAdapter> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIAdapter> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIAdapter> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIAdapter> comObj) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIAdapter> comObj) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIAdapter> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIAdapter> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIAdapter> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIAdapter> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIAdapter> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIAdapter> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIAdapter> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIAdapter> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIAdapter> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIAdapter> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIAdapter> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIAdapter> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIAdapter> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIAdapter> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIAdapter> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIAdapter> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIAdapter> comObj, Guid* riid, void** ppParent) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIAdapter> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIAdapter> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIAdapter> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumOutputs(this ComPtr<IDXGIAdapter> comObj, uint output, IDXGIOutput** ppOutput) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, uint, IDXGIOutput**, HResult>)(handle->LpVtbl[7]))(handle, output, ppOutput);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumOutputs(this ComPtr<IDXGIAdapter> comObj, uint output, ref IDXGIOutput* ppOutput) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (IDXGIOutput** pppOutput = &ppOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, uint, IDXGIOutput**, HResult>)(handle->LpVtbl[7]))(handle, output, (IDXGIOutput**)pppOutput);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumOutputs(this ComPtr<IDXGIAdapter> comObj, uint output, out ComPtr<IDXGIOutput> ppOutput) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			ppOutput = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, uint, IDXGIOutput**, HResult>)(handle->LpVtbl[7]))(handle, output, (IDXGIOutput**)ppOutput.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGIAdapter> comObj, AdapterDesc* pDesc) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, AdapterDesc*, HResult>)(handle->LpVtbl[8]))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGIAdapter> comObj, ref AdapterDesc pDesc) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (AdapterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, AdapterDesc*, HResult>)(handle->LpVtbl[8]))(handle, (AdapterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckInterfaceSupport(this ComPtr<IDXGIAdapter> comObj, Guid* interfaceName, long* pUMDVersion) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, long*, HResult>)(handle->LpVtbl[9]))(handle, interfaceName, pUMDVersion);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckInterfaceSupport(this ComPtr<IDXGIAdapter> comObj, ref Guid interfaceName, long* pUMDVersion) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* pinterfaceName = &interfaceName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, long*, HResult>)(handle->LpVtbl[9]))(handle, (Guid*)pinterfaceName, pUMDVersion);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckInterfaceSupport(this ComPtr<IDXGIAdapter> comObj, Guid* interfaceName, ref long pUMDVersion) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (long* ppUMDVersion = &pUMDVersion)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, long*, HResult>)(handle->LpVtbl[9]))(handle, interfaceName, (long*)ppUMDVersion);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckInterfaceSupport(this ComPtr<IDXGIAdapter> comObj, ref Guid interfaceName, ref long pUMDVersion) 
		{
			IDXGIAdapter* handle = comObj.Handle;
			fixed (Guid* pinterfaceName = &interfaceName)
			{
				fixed (long* ppUMDVersion = &pUMDVersion)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, long*, HResult>)(handle->LpVtbl[9]))(handle, (Guid*)pinterfaceName, (long*)ppUMDVersion);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIOutput> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIOutput> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIOutput> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIOutput> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIOutput> comObj) 
		{
			IDXGIOutput* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIOutput> comObj) 
		{
			IDXGIOutput* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIOutput> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIOutput> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIOutput> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIOutput> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIOutput> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIOutput> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIOutput> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIOutput> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIOutput> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIOutput> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIOutput> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIOutput> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIOutput> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIOutput> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIOutput> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIOutput> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIOutput> comObj, Guid* riid, void** ppParent) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIOutput> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIOutput> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIOutput> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGIOutput> comObj, OutputDesc* pDesc) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, OutputDesc*, HResult>)(handle->LpVtbl[7]))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGIOutput> comObj, ref OutputDesc pDesc) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (OutputDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, OutputDesc*, HResult>)(handle->LpVtbl[7]))(handle, (OutputDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList(this ComPtr<IDXGIOutput> comObj, Format enumFormat, uint flags, uint* pNumModes, ModeDesc* pDesc) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Format, uint, uint*, ModeDesc*, HResult>)(handle->LpVtbl[8]))(handle, enumFormat, flags, pNumModes, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList(this ComPtr<IDXGIOutput> comObj, Format enumFormat, uint flags, ref uint pNumModes, ModeDesc* pDesc) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (uint* ppNumModes = &pNumModes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Format, uint, uint*, ModeDesc*, HResult>)(handle->LpVtbl[8]))(handle, enumFormat, flags, (uint*)ppNumModes, pDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList(this ComPtr<IDXGIOutput> comObj, Format enumFormat, uint flags, uint* pNumModes, ref ModeDesc pDesc) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (ModeDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Format, uint, uint*, ModeDesc*, HResult>)(handle->LpVtbl[8]))(handle, enumFormat, flags, pNumModes, (ModeDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList(this ComPtr<IDXGIOutput> comObj, Format enumFormat, uint flags, ref uint pNumModes, ref ModeDesc pDesc) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (uint* ppNumModes = &pNumModes)
			{
				fixed (ModeDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Format, uint, uint*, ModeDesc*, HResult>)(handle->LpVtbl[8]))(handle, enumFormat, flags, (uint*)ppNumModes, (ModeDesc*)ppDesc);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput> comObj, ModeDesc* pModeToMatch, ModeDesc* pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, pClosestMatch, pConcernedDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput> comObj, ref ModeDesc pModeToMatch, ModeDesc* pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, pClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput> comObj, ModeDesc* pModeToMatch, ref ModeDesc pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, (ModeDesc*)ppClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput> comObj, ref ModeDesc pModeToMatch, ref ModeDesc pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, (ModeDesc*)ppClosestMatch, pConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput> comObj, ModeDesc* pModeToMatch, ModeDesc* pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput> comObj, ModeDesc* pModeToMatch, ModeDesc* pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, pClosestMatch, (IUnknown*)pConcernedDevice.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput> comObj, ref ModeDesc pModeToMatch, ModeDesc* pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput> comObj, ref ModeDesc pModeToMatch, ModeDesc* pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, pClosestMatch, (IUnknown*)pConcernedDevice.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput> comObj, ModeDesc* pModeToMatch, ref ModeDesc pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput> comObj, ModeDesc* pModeToMatch, ref ModeDesc pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)pConcernedDevice.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput> comObj, ref ModeDesc pModeToMatch, ref ModeDesc pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
				{
					fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput> comObj, ref ModeDesc pModeToMatch, ref ModeDesc pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)pConcernedDevice.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult WaitForVBlank(this ComPtr<IDXGIOutput> comObj) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, HResult>)(handle->LpVtbl[10]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult TakeOwnership(this ComPtr<IDXGIOutput> comObj, IUnknown* pDevice, Bool32 exclusive) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IUnknown*, Bool32, HResult>)(handle->LpVtbl[11]))(handle, pDevice, exclusive);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult TakeOwnership(this ComPtr<IDXGIOutput> comObj, ref IUnknown pDevice, Bool32 exclusive) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IUnknown*, Bool32, HResult>)(handle->LpVtbl[11]))(handle, (IUnknown*)ppDevice, exclusive);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult TakeOwnership(this ComPtr<IDXGIOutput> comObj, ComPtr<IUnknown> pDevice, Bool32 exclusive) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IUnknown*, Bool32, HResult>)(handle->LpVtbl[11]))(handle, (IUnknown*)pDevice.Handle, exclusive);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ReleaseOwnership(this ComPtr<IDXGIOutput> comObj) 
		{
			IDXGIOutput* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIOutput*, void>)(handle->LpVtbl[12]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGammaControlCapabilities(this ComPtr<IDXGIOutput> comObj, GammaControlCapabilities* pGammaCaps) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, GammaControlCapabilities*, HResult>)(handle->LpVtbl[13]))(handle, pGammaCaps);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGammaControlCapabilities(this ComPtr<IDXGIOutput> comObj, ref GammaControlCapabilities pGammaCaps) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (GammaControlCapabilities* ppGammaCaps = &pGammaCaps)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, GammaControlCapabilities*, HResult>)(handle->LpVtbl[13]))(handle, (GammaControlCapabilities*)ppGammaCaps);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetGammaControl(this ComPtr<IDXGIOutput> comObj, GammaControl* pArray) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, GammaControl*, HResult>)(handle->LpVtbl[14]))(handle, pArray);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetGammaControl(this ComPtr<IDXGIOutput> comObj, ref GammaControl pArray) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (GammaControl* ppArray = &pArray)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, GammaControl*, HResult>)(handle->LpVtbl[14]))(handle, (GammaControl*)ppArray);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGammaControl(this ComPtr<IDXGIOutput> comObj, GammaControl* pArray) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, GammaControl*, HResult>)(handle->LpVtbl[15]))(handle, pArray);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGammaControl(this ComPtr<IDXGIOutput> comObj, ref GammaControl pArray) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (GammaControl* ppArray = &pArray)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, GammaControl*, HResult>)(handle->LpVtbl[15]))(handle, (GammaControl*)ppArray);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetDisplaySurface(this ComPtr<IDXGIOutput> comObj, IDXGISurface* pScanoutSurface) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(handle->LpVtbl[16]))(handle, pScanoutSurface);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetDisplaySurface(this ComPtr<IDXGIOutput> comObj, ref IDXGISurface pScanoutSurface) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (IDXGISurface* ppScanoutSurface = &pScanoutSurface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(handle->LpVtbl[16]))(handle, (IDXGISurface*)ppScanoutSurface);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetDisplaySurface(this ComPtr<IDXGIOutput> comObj, ComPtr<IDXGISurface> pScanoutSurface) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(handle->LpVtbl[16]))(handle, (IDXGISurface*)pScanoutSurface.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData(this ComPtr<IDXGIOutput> comObj, IDXGISurface* pDestination) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(handle->LpVtbl[17]))(handle, pDestination);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData(this ComPtr<IDXGIOutput> comObj, ref IDXGISurface pDestination) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (IDXGISurface* ppDestination = &pDestination)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(handle->LpVtbl[17]))(handle, (IDXGISurface*)ppDestination);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData(this ComPtr<IDXGIOutput> comObj, ComPtr<IDXGISurface> pDestination) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(handle->LpVtbl[17]))(handle, (IDXGISurface*)pDestination.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFrameStatistics(this ComPtr<IDXGIOutput> comObj, FrameStatistics* pStats) 
		{
			IDXGIOutput* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, FrameStatistics*, HResult>)(handle->LpVtbl[18]))(handle, pStats);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFrameStatistics(this ComPtr<IDXGIOutput> comObj, ref FrameStatistics pStats) 
		{
			IDXGIOutput* handle = comObj.Handle;
			fixed (FrameStatistics* ppStats = &pStats)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, FrameStatistics*, HResult>)(handle->LpVtbl[18]))(handle, (FrameStatistics*)ppStats);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGISwapChain> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGISwapChain> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGISwapChain> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGISwapChain> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGISwapChain> comObj) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGISwapChain> comObj) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGISwapChain> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGISwapChain> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISwapChain> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISwapChain> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISwapChain> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISwapChain> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISwapChain> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISwapChain> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISwapChain> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISwapChain> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISwapChain> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISwapChain> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISwapChain> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISwapChain> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISwapChain> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISwapChain> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGISwapChain> comObj, Guid* riid, void** ppParent) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGISwapChain> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGISwapChain> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGISwapChain> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGISwapChain> comObj, Guid* riid, void** ppDevice) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGISwapChain> comObj, ref Guid riid, void** ppDevice) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGISwapChain> comObj, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain* handle = comObj.Handle;
			ppDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGISwapChain> comObj, ref Guid riid, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Present(this ComPtr<IDXGISwapChain> comObj, uint syncInterval, uint flags) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint, uint, HResult>)(handle->LpVtbl[8]))(handle, syncInterval, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetBuffer(this ComPtr<IDXGISwapChain> comObj, uint buffer, Guid* riid, void** ppSurface) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint, Guid*, void**, HResult>)(handle->LpVtbl[9]))(handle, buffer, riid, ppSurface);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetBuffer(this ComPtr<IDXGISwapChain> comObj, uint buffer, ref Guid riid, void** ppSurface) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint, Guid*, void**, HResult>)(handle->LpVtbl[9]))(handle, buffer, (Guid*)priid, ppSurface);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetBuffer<T>(this ComPtr<IDXGISwapChain> comObj, uint buffer, out ComPtr<T> ppSurface) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain* handle = comObj.Handle;
			ppSurface = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint, Guid*, void**, HResult>)(handle->LpVtbl[9]))(handle, buffer, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppSurface.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetBuffer<T>(this ComPtr<IDXGISwapChain> comObj, uint buffer, ref Guid riid, out ComPtr<T> ppSurface) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppSurface = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint, Guid*, void**, HResult>)(handle->LpVtbl[9]))(handle, buffer, (Guid*)priid, (void**)ppSurface.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetFullscreenState(this ComPtr<IDXGISwapChain> comObj, Bool32 fullscreen, IDXGIOutput* pTarget) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32, IDXGIOutput*, HResult>)(handle->LpVtbl[10]))(handle, fullscreen, pTarget);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetFullscreenState(this ComPtr<IDXGISwapChain> comObj, Bool32 fullscreen, ref IDXGIOutput pTarget) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (IDXGIOutput* ppTarget = &pTarget)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32, IDXGIOutput*, HResult>)(handle->LpVtbl[10]))(handle, fullscreen, (IDXGIOutput*)ppTarget);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetFullscreenState(this ComPtr<IDXGISwapChain> comObj, Bool32 fullscreen, ComPtr<IDXGIOutput> pTarget) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32, IDXGIOutput*, HResult>)(handle->LpVtbl[10]))(handle, fullscreen, (IDXGIOutput*)pTarget.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenState(this ComPtr<IDXGISwapChain> comObj, Bool32* pFullscreen, IDXGIOutput** ppTarget) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32*, IDXGIOutput**, HResult>)(handle->LpVtbl[11]))(handle, pFullscreen, ppTarget);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenState(this ComPtr<IDXGISwapChain> comObj, ref Bool32 pFullscreen, IDXGIOutput** ppTarget) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Bool32* ppFullscreen = &pFullscreen)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32*, IDXGIOutput**, HResult>)(handle->LpVtbl[11]))(handle, (Bool32*)ppFullscreen, ppTarget);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenState(this ComPtr<IDXGISwapChain> comObj, Bool32* pFullscreen, ref IDXGIOutput* ppTarget) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (IDXGIOutput** pppTarget = &ppTarget)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32*, IDXGIOutput**, HResult>)(handle->LpVtbl[11]))(handle, pFullscreen, (IDXGIOutput**)pppTarget);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenState(this ComPtr<IDXGISwapChain> comObj, Bool32* pFullscreen, out ComPtr<IDXGIOutput> ppTarget) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			ppTarget = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32*, IDXGIOutput**, HResult>)(handle->LpVtbl[11]))(handle, pFullscreen, (IDXGIOutput**)ppTarget.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenState(this ComPtr<IDXGISwapChain> comObj, ref Bool32 pFullscreen, ref IDXGIOutput* ppTarget) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Bool32* ppFullscreen = &pFullscreen)
			{
				fixed (IDXGIOutput** pppTarget = &ppTarget)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32*, IDXGIOutput**, HResult>)(handle->LpVtbl[11]))(handle, (Bool32*)ppFullscreen, (IDXGIOutput**)pppTarget);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenState(this ComPtr<IDXGISwapChain> comObj, ref Bool32 pFullscreen, out ComPtr<IDXGIOutput> ppTarget) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (Bool32* ppFullscreen = &pFullscreen)
			{
				ppTarget = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32*, IDXGIOutput**, HResult>)(handle->LpVtbl[11]))(handle, (Bool32*)ppFullscreen, (IDXGIOutput**)ppTarget.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGISwapChain> comObj, SwapChainDesc* pDesc) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, SwapChainDesc*, HResult>)(handle->LpVtbl[12]))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGISwapChain> comObj, ref SwapChainDesc pDesc) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (SwapChainDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, SwapChainDesc*, HResult>)(handle->LpVtbl[12]))(handle, (SwapChainDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ResizeBuffers(this ComPtr<IDXGISwapChain> comObj, uint bufferCount, uint width, uint height, Format newFormat, uint swapChainFlags) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint, uint, uint, Format, uint, HResult>)(handle->LpVtbl[13]))(handle, bufferCount, width, height, newFormat, swapChainFlags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ResizeTarget(this ComPtr<IDXGISwapChain> comObj, ModeDesc* pNewTargetParameters) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, ModeDesc*, HResult>)(handle->LpVtbl[14]))(handle, pNewTargetParameters);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ResizeTarget(this ComPtr<IDXGISwapChain> comObj, ref ModeDesc pNewTargetParameters) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (ModeDesc* ppNewTargetParameters = &pNewTargetParameters)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, ModeDesc*, HResult>)(handle->LpVtbl[14]))(handle, (ModeDesc*)ppNewTargetParameters);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContainingOutput(this ComPtr<IDXGISwapChain> comObj, IDXGIOutput** ppOutput) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, IDXGIOutput**, HResult>)(handle->LpVtbl[15]))(handle, ppOutput);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContainingOutput(this ComPtr<IDXGISwapChain> comObj, ref IDXGIOutput* ppOutput) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (IDXGIOutput** pppOutput = &ppOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, IDXGIOutput**, HResult>)(handle->LpVtbl[15]))(handle, (IDXGIOutput**)pppOutput);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContainingOutput(this ComPtr<IDXGISwapChain> comObj, out ComPtr<IDXGIOutput> ppOutput) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			ppOutput = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, IDXGIOutput**, HResult>)(handle->LpVtbl[15]))(handle, (IDXGIOutput**)ppOutput.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFrameStatistics(this ComPtr<IDXGISwapChain> comObj, FrameStatistics* pStats) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, FrameStatistics*, HResult>)(handle->LpVtbl[16]))(handle, pStats);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFrameStatistics(this ComPtr<IDXGISwapChain> comObj, ref FrameStatistics pStats) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (FrameStatistics* ppStats = &pStats)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, FrameStatistics*, HResult>)(handle->LpVtbl[16]))(handle, (FrameStatistics*)ppStats);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetLastPresentCount(this ComPtr<IDXGISwapChain> comObj, uint* pLastPresentCount) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint*, HResult>)(handle->LpVtbl[17]))(handle, pLastPresentCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetLastPresentCount(this ComPtr<IDXGISwapChain> comObj, ref uint pLastPresentCount) 
		{
			IDXGISwapChain* handle = comObj.Handle;
			fixed (uint* ppLastPresentCount = &pLastPresentCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint*, HResult>)(handle->LpVtbl[17]))(handle, (uint*)ppLastPresentCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIFactory> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIFactory* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIFactory> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIFactory> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIFactory> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIFactory> comObj) 
		{
			IDXGIFactory* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIFactory> comObj) 
		{
			IDXGIFactory* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIFactory> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGIFactory* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIFactory> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIFactory> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGIFactory* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIFactory> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIFactory> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIFactory> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIFactory* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIFactory> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIFactory> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIFactory> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIFactory* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIFactory> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIFactory> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIFactory> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIFactory> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIFactory> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIFactory> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIFactory> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIFactory> comObj, Guid* riid, void** ppParent) 
		{
			IDXGIFactory* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIFactory> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIFactory> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIFactory> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapters(this ComPtr<IDXGIFactory> comObj, uint adapter, IDXGIAdapter** ppAdapter) 
		{
			IDXGIFactory* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, uint, IDXGIAdapter**, HResult>)(handle->LpVtbl[7]))(handle, adapter, ppAdapter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapters(this ComPtr<IDXGIFactory> comObj, uint adapter, ref IDXGIAdapter* ppAdapter) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (IDXGIAdapter** pppAdapter = &ppAdapter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, uint, IDXGIAdapter**, HResult>)(handle->LpVtbl[7]))(handle, adapter, (IDXGIAdapter**)pppAdapter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapters(this ComPtr<IDXGIFactory> comObj, uint adapter, out ComPtr<IDXGIAdapter> ppAdapter) 
		{
			IDXGIFactory* handle = comObj.Handle;
			ppAdapter = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, uint, IDXGIAdapter**, HResult>)(handle->LpVtbl[7]))(handle, adapter, (IDXGIAdapter**)ppAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult MakeWindowAssociation(this ComPtr<IDXGIFactory> comObj, nint windowHandle, uint flags) 
		{
			IDXGIFactory* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, nint, uint, HResult>)(handle->LpVtbl[8]))(handle, windowHandle, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetWindowAssociation(this ComPtr<IDXGIFactory> comObj, nint* pWindowHandle) 
		{
			IDXGIFactory* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, nint*, HResult>)(handle->LpVtbl[9]))(handle, pWindowHandle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetWindowAssociation(this ComPtr<IDXGIFactory> comObj, ref nint pWindowHandle) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (nint* ppWindowHandle = &pWindowHandle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, nint*, HResult>)(handle->LpVtbl[9]))(handle, (nint*)ppWindowHandle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, IUnknown* pDevice, SwapChainDesc* pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, pDevice, pDesc, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, ref IUnknown pDevice, SwapChainDesc* pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)ppDevice, pDesc, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, ComPtr<IUnknown> pDevice, SwapChainDesc* pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)pDevice.Handle, pDesc, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, IUnknown* pDevice, ref SwapChainDesc pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (SwapChainDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, pDevice, (SwapChainDesc*)ppDesc, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, ref IUnknown pDevice, ref SwapChainDesc pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)ppDevice, (SwapChainDesc*)ppDesc, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, ComPtr<IUnknown> pDevice, ref SwapChainDesc pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (SwapChainDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)pDevice.Handle, (SwapChainDesc*)ppDesc, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, IUnknown* pDevice, SwapChainDesc* pDesc, ref IDXGISwapChain* ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, pDevice, pDesc, (IDXGISwapChain**)pppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, IUnknown* pDevice, SwapChainDesc* pDesc, out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, pDevice, pDesc, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, ref IUnknown pDevice, SwapChainDesc* pDesc, ref IDXGISwapChain* ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)ppDevice, pDesc, (IDXGISwapChain**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, ComPtr<IUnknown> pDevice, SwapChainDesc* pDesc, out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)pDevice.Handle, pDesc, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, IUnknown* pDevice, ref SwapChainDesc pDesc, ref IDXGISwapChain* ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (SwapChainDesc* ppDesc = &pDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, pDevice, (SwapChainDesc*)ppDesc, (IDXGISwapChain**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, IUnknown* pDevice, ref SwapChainDesc pDesc, out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (SwapChainDesc* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, pDevice, (SwapChainDesc*)ppDesc, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, ref IUnknown pDevice, ref SwapChainDesc pDesc, ref IDXGISwapChain* ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc* ppDesc = &pDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)ppDevice, (SwapChainDesc*)ppDesc, (IDXGISwapChain**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory> comObj, ComPtr<IUnknown> pDevice, ref SwapChainDesc pDesc, out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (SwapChainDesc* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)pDevice.Handle, (SwapChainDesc*)ppDesc, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSoftwareAdapter(this ComPtr<IDXGIFactory> comObj, nint module, IDXGIAdapter** ppAdapter) 
		{
			IDXGIFactory* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, nint, IDXGIAdapter**, HResult>)(handle->LpVtbl[11]))(handle, module, ppAdapter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSoftwareAdapter(this ComPtr<IDXGIFactory> comObj, nint module, ref IDXGIAdapter* ppAdapter) 
		{
			IDXGIFactory* handle = comObj.Handle;
			fixed (IDXGIAdapter** pppAdapter = &ppAdapter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, nint, IDXGIAdapter**, HResult>)(handle->LpVtbl[11]))(handle, module, (IDXGIAdapter**)pppAdapter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSoftwareAdapter(this ComPtr<IDXGIFactory> comObj, nint module, out ComPtr<IDXGIAdapter> ppAdapter) 
		{
			IDXGIFactory* handle = comObj.Handle;
			ppAdapter = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, nint, IDXGIAdapter**, HResult>)(handle->LpVtbl[11]))(handle, module, (IDXGIAdapter**)ppAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIDevice> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIDevice> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIDevice* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIDevice> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIDevice> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIDevice> comObj) 
		{
			IDXGIDevice* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIDevice> comObj) 
		{
			IDXGIDevice* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIDevice> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGIDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIDevice> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIDevice* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDevice> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGIDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDevice> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIDevice* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDevice> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIDevice* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}
	}
}
