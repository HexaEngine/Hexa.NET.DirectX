// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXGI
{
	public static unsafe partial class Extensions
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput1> comObj, ref ModeDesc pModeToMatch, ModeDesc* pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, pClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput1> comObj, ModeDesc* pModeToMatch, ref ModeDesc pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, (ModeDesc*)ppClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput1> comObj, ref ModeDesc pModeToMatch, ref ModeDesc pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, (ModeDesc*)ppClosestMatch, pConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput1> comObj, ModeDesc* pModeToMatch, ModeDesc* pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput1> comObj, ModeDesc* pModeToMatch, ModeDesc* pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, pClosestMatch, (IUnknown*)pConcernedDevice.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput1> comObj, ref ModeDesc pModeToMatch, ModeDesc* pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput1> comObj, ref ModeDesc pModeToMatch, ModeDesc* pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, pClosestMatch, (IUnknown*)pConcernedDevice.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput1> comObj, ModeDesc* pModeToMatch, ref ModeDesc pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput1> comObj, ModeDesc* pModeToMatch, ref ModeDesc pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)pConcernedDevice.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput1> comObj, ref ModeDesc pModeToMatch, ref ModeDesc pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
				{
					fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput1> comObj, ref ModeDesc pModeToMatch, ref ModeDesc pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)pConcernedDevice.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult WaitForVBlank(this ComPtr<IDXGIOutput1> comObj) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, HResult>)(handle->LpVtbl[10]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult TakeOwnership(this ComPtr<IDXGIOutput1> comObj, IUnknown* pDevice, Bool32 exclusive) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, Bool32, HResult>)(handle->LpVtbl[11]))(handle, pDevice, exclusive);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult TakeOwnership(this ComPtr<IDXGIOutput1> comObj, ref IUnknown pDevice, Bool32 exclusive) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, Bool32, HResult>)(handle->LpVtbl[11]))(handle, (IUnknown*)ppDevice, exclusive);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult TakeOwnership(this ComPtr<IDXGIOutput1> comObj, ComPtr<IUnknown> pDevice, Bool32 exclusive) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, Bool32, HResult>)(handle->LpVtbl[11]))(handle, (IUnknown*)pDevice.Handle, exclusive);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ReleaseOwnership(this ComPtr<IDXGIOutput1> comObj) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIOutput1*, void>)(handle->LpVtbl[12]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGammaControlCapabilities(this ComPtr<IDXGIOutput1> comObj, GammaControlCapabilities* pGammaCaps) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, GammaControlCapabilities*, HResult>)(handle->LpVtbl[13]))(handle, pGammaCaps);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGammaControlCapabilities(this ComPtr<IDXGIOutput1> comObj, ref GammaControlCapabilities pGammaCaps) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (GammaControlCapabilities* ppGammaCaps = &pGammaCaps)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, GammaControlCapabilities*, HResult>)(handle->LpVtbl[13]))(handle, (GammaControlCapabilities*)ppGammaCaps);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetGammaControl(this ComPtr<IDXGIOutput1> comObj, GammaControl* pArray) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, GammaControl*, HResult>)(handle->LpVtbl[14]))(handle, pArray);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetGammaControl(this ComPtr<IDXGIOutput1> comObj, ref GammaControl pArray) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (GammaControl* ppArray = &pArray)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, GammaControl*, HResult>)(handle->LpVtbl[14]))(handle, (GammaControl*)ppArray);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGammaControl(this ComPtr<IDXGIOutput1> comObj, GammaControl* pArray) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, GammaControl*, HResult>)(handle->LpVtbl[15]))(handle, pArray);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGammaControl(this ComPtr<IDXGIOutput1> comObj, ref GammaControl pArray) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (GammaControl* ppArray = &pArray)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, GammaControl*, HResult>)(handle->LpVtbl[15]))(handle, (GammaControl*)ppArray);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetDisplaySurface(this ComPtr<IDXGIOutput1> comObj, IDXGISurface* pScanoutSurface) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IDXGISurface*, HResult>)(handle->LpVtbl[16]))(handle, pScanoutSurface);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetDisplaySurface(this ComPtr<IDXGIOutput1> comObj, ref IDXGISurface pScanoutSurface) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (IDXGISurface* ppScanoutSurface = &pScanoutSurface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IDXGISurface*, HResult>)(handle->LpVtbl[16]))(handle, (IDXGISurface*)ppScanoutSurface);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetDisplaySurface(this ComPtr<IDXGIOutput1> comObj, ComPtr<IDXGISurface> pScanoutSurface) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IDXGISurface*, HResult>)(handle->LpVtbl[16]))(handle, (IDXGISurface*)pScanoutSurface.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData(this ComPtr<IDXGIOutput1> comObj, IDXGISurface* pDestination) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IDXGISurface*, HResult>)(handle->LpVtbl[17]))(handle, pDestination);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData(this ComPtr<IDXGIOutput1> comObj, ref IDXGISurface pDestination) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (IDXGISurface* ppDestination = &pDestination)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IDXGISurface*, HResult>)(handle->LpVtbl[17]))(handle, (IDXGISurface*)ppDestination);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData(this ComPtr<IDXGIOutput1> comObj, ComPtr<IDXGISurface> pDestination) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IDXGISurface*, HResult>)(handle->LpVtbl[17]))(handle, (IDXGISurface*)pDestination.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFrameStatistics(this ComPtr<IDXGIOutput1> comObj, FrameStatistics* pStats) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, FrameStatistics*, HResult>)(handle->LpVtbl[18]))(handle, pStats);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFrameStatistics(this ComPtr<IDXGIOutput1> comObj, ref FrameStatistics pStats) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (FrameStatistics* ppStats = &pStats)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, FrameStatistics*, HResult>)(handle->LpVtbl[18]))(handle, (FrameStatistics*)ppStats);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList1(this ComPtr<IDXGIOutput1> comObj, Format enumFormat, uint flags, uint* pNumModes, ModeDesc1* pDesc) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, Format, uint, uint*, ModeDesc1*, HResult>)(handle->LpVtbl[19]))(handle, enumFormat, flags, pNumModes, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList1(this ComPtr<IDXGIOutput1> comObj, Format enumFormat, uint flags, ref uint pNumModes, ModeDesc1* pDesc) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (uint* ppNumModes = &pNumModes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, Format, uint, uint*, ModeDesc1*, HResult>)(handle->LpVtbl[19]))(handle, enumFormat, flags, (uint*)ppNumModes, pDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList1(this ComPtr<IDXGIOutput1> comObj, Format enumFormat, uint flags, uint* pNumModes, ref ModeDesc1 pDesc) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, Format, uint, uint*, ModeDesc1*, HResult>)(handle->LpVtbl[19]))(handle, enumFormat, flags, pNumModes, (ModeDesc1*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList1(this ComPtr<IDXGIOutput1> comObj, Format enumFormat, uint flags, ref uint pNumModes, ref ModeDesc1 pDesc) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (uint* ppNumModes = &pNumModes)
			{
				fixed (ModeDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, Format, uint, uint*, ModeDesc1*, HResult>)(handle->LpVtbl[19]))(handle, enumFormat, flags, (uint*)ppNumModes, (ModeDesc1*)ppDesc);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput1> comObj, ModeDesc1* pModeToMatch, ModeDesc1* pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, pModeToMatch, pClosestMatch, pConcernedDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput1> comObj, ref ModeDesc1 pModeToMatch, ModeDesc1* pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, (ModeDesc1*)ppModeToMatch, pClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput1> comObj, ModeDesc1* pModeToMatch, ref ModeDesc1 pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc1* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, pModeToMatch, (ModeDesc1*)ppClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput1> comObj, ref ModeDesc1 pModeToMatch, ref ModeDesc1 pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc1* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, (ModeDesc1*)ppModeToMatch, (ModeDesc1*)ppClosestMatch, pConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput1> comObj, ModeDesc1* pModeToMatch, ModeDesc1* pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, pModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput1> comObj, ModeDesc1* pModeToMatch, ModeDesc1* pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, pModeToMatch, pClosestMatch, (IUnknown*)pConcernedDevice.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput1> comObj, ref ModeDesc1 pModeToMatch, ModeDesc1* pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, (ModeDesc1*)ppModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput1> comObj, ref ModeDesc1 pModeToMatch, ModeDesc1* pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, (ModeDesc1*)ppModeToMatch, pClosestMatch, (IUnknown*)pConcernedDevice.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput1> comObj, ModeDesc1* pModeToMatch, ref ModeDesc1 pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc1* ppClosestMatch = &pClosestMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, pModeToMatch, (ModeDesc1*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput1> comObj, ModeDesc1* pModeToMatch, ref ModeDesc1 pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc1* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, pModeToMatch, (ModeDesc1*)ppClosestMatch, (IUnknown*)pConcernedDevice.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput1> comObj, ref ModeDesc1 pModeToMatch, ref ModeDesc1 pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc1* ppClosestMatch = &pClosestMatch)
				{
					fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, (ModeDesc1*)ppModeToMatch, (ModeDesc1*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput1> comObj, ref ModeDesc1 pModeToMatch, ref ModeDesc1 pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (ModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc1* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, (ModeDesc1*)ppModeToMatch, (ModeDesc1*)ppClosestMatch, (IUnknown*)pConcernedDevice.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData1(this ComPtr<IDXGIOutput1> comObj, IDXGIResource* pDestination) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IDXGIResource*, HResult>)(handle->LpVtbl[21]))(handle, pDestination);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData1(this ComPtr<IDXGIOutput1> comObj, ref IDXGIResource pDestination) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (IDXGIResource* ppDestination = &pDestination)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IDXGIResource*, HResult>)(handle->LpVtbl[21]))(handle, (IDXGIResource*)ppDestination);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData1(this ComPtr<IDXGIOutput1> comObj, ComPtr<IDXGIResource> pDestination) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IDXGIResource*, HResult>)(handle->LpVtbl[21]))(handle, (IDXGIResource*)pDestination.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput1> comObj, IUnknown* pDevice, IDXGIOutputDuplication** ppOutputDuplication) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, pDevice, ppOutputDuplication);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput1> comObj, ref IUnknown pDevice, IDXGIOutputDuplication** ppOutputDuplication) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, (IUnknown*)ppDevice, ppOutputDuplication);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput1> comObj, ComPtr<IUnknown> pDevice, IDXGIOutputDuplication** ppOutputDuplication) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, (IUnknown*)pDevice.Handle, ppOutputDuplication);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput1> comObj, IUnknown* pDevice, ref IDXGIOutputDuplication* ppOutputDuplication) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (IDXGIOutputDuplication** pppOutputDuplication = &ppOutputDuplication)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, pDevice, (IDXGIOutputDuplication**)pppOutputDuplication);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput1> comObj, IUnknown* pDevice, out ComPtr<IDXGIOutputDuplication> ppOutputDuplication) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			ppOutputDuplication = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, pDevice, (IDXGIOutputDuplication**)ppOutputDuplication.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput1> comObj, ref IUnknown pDevice, ref IDXGIOutputDuplication* ppOutputDuplication) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutputDuplication** pppOutputDuplication = &ppOutputDuplication)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, (IUnknown*)ppDevice, (IDXGIOutputDuplication**)pppOutputDuplication);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput1> comObj, ComPtr<IUnknown> pDevice, out ComPtr<IDXGIOutputDuplication> ppOutputDuplication) 
		{
			IDXGIOutput1* handle = comObj.Handle;
			ppOutputDuplication = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, (IUnknown*)pDevice.Handle, (IDXGIOutputDuplication**)ppOutputDuplication.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIDevice3> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIDevice3> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIDevice3> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice3* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIDevice3> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIDevice3> comObj) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIDevice3> comObj) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIDevice3> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIDevice3> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDevice3> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDevice3> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDevice3> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDevice3> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDevice3> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIDevice3> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIDevice3> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIDevice3> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIDevice3> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIDevice3> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIDevice3> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIDevice3> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIDevice3> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIDevice3> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIDevice3> comObj, Guid* riid, void** ppParent) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIDevice3> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIDevice3> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice3* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIDevice3> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetAdapter(this ComPtr<IDXGIDevice3> comObj, IDXGIAdapter** pAdapter) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, IDXGIAdapter**, HResult>)(handle->LpVtbl[7]))(handle, pAdapter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetAdapter(this ComPtr<IDXGIDevice3> comObj, ref IDXGIAdapter* pAdapter) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (IDXGIAdapter** ppAdapter = &pAdapter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, IDXGIAdapter**, HResult>)(handle->LpVtbl[7]))(handle, (IDXGIAdapter**)ppAdapter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetAdapter(this ComPtr<IDXGIDevice3> comObj, out ComPtr<IDXGIAdapter> pAdapter) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			pAdapter = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, IDXGIAdapter**, HResult>)(handle->LpVtbl[7]))(handle, (IDXGIAdapter**)pAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSurface(this ComPtr<IDXGIDevice3> comObj, SurfaceDesc* pDesc, uint numSurfaces, uint usage, SharedResource* pSharedResource, IDXGISurface** ppSurface) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, SurfaceDesc*, uint, uint, SharedResource*, IDXGISurface**, HResult>)(handle->LpVtbl[8]))(handle, pDesc, numSurfaces, usage, pSharedResource, ppSurface);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSurface(this ComPtr<IDXGIDevice3> comObj, ref SurfaceDesc pDesc, uint numSurfaces, uint usage, SharedResource* pSharedResource, IDXGISurface** ppSurface) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (SurfaceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, SurfaceDesc*, uint, uint, SharedResource*, IDXGISurface**, HResult>)(handle->LpVtbl[8]))(handle, (SurfaceDesc*)ppDesc, numSurfaces, usage, pSharedResource, ppSurface);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSurface(this ComPtr<IDXGIDevice3> comObj, SurfaceDesc* pDesc, uint numSurfaces, uint usage, ref SharedResource pSharedResource, IDXGISurface** ppSurface) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (SharedResource* ppSharedResource = &pSharedResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, SurfaceDesc*, uint, uint, SharedResource*, IDXGISurface**, HResult>)(handle->LpVtbl[8]))(handle, pDesc, numSurfaces, usage, (SharedResource*)ppSharedResource, ppSurface);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSurface(this ComPtr<IDXGIDevice3> comObj, ref SurfaceDesc pDesc, uint numSurfaces, uint usage, ref SharedResource pSharedResource, IDXGISurface** ppSurface) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (SurfaceDesc* ppDesc = &pDesc)
			{
				fixed (SharedResource* ppSharedResource = &pSharedResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, SurfaceDesc*, uint, uint, SharedResource*, IDXGISurface**, HResult>)(handle->LpVtbl[8]))(handle, (SurfaceDesc*)ppDesc, numSurfaces, usage, (SharedResource*)ppSharedResource, ppSurface);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSurface(this ComPtr<IDXGIDevice3> comObj, SurfaceDesc* pDesc, uint numSurfaces, uint usage, SharedResource* pSharedResource, ref IDXGISurface* ppSurface) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (IDXGISurface** pppSurface = &ppSurface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, SurfaceDesc*, uint, uint, SharedResource*, IDXGISurface**, HResult>)(handle->LpVtbl[8]))(handle, pDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)pppSurface);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSurface(this ComPtr<IDXGIDevice3> comObj, SurfaceDesc* pDesc, uint numSurfaces, uint usage, SharedResource* pSharedResource, out ComPtr<IDXGISurface> ppSurface) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			ppSurface = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, SurfaceDesc*, uint, uint, SharedResource*, IDXGISurface**, HResult>)(handle->LpVtbl[8]))(handle, pDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)ppSurface.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSurface(this ComPtr<IDXGIDevice3> comObj, ref SurfaceDesc pDesc, uint numSurfaces, uint usage, SharedResource* pSharedResource, ref IDXGISurface* ppSurface) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (SurfaceDesc* ppDesc = &pDesc)
			{
				fixed (IDXGISurface** pppSurface = &ppSurface)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, SurfaceDesc*, uint, uint, SharedResource*, IDXGISurface**, HResult>)(handle->LpVtbl[8]))(handle, (SurfaceDesc*)ppDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)pppSurface);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSurface(this ComPtr<IDXGIDevice3> comObj, ref SurfaceDesc pDesc, uint numSurfaces, uint usage, SharedResource* pSharedResource, out ComPtr<IDXGISurface> ppSurface) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (SurfaceDesc* ppDesc = &pDesc)
			{
				ppSurface = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, SurfaceDesc*, uint, uint, SharedResource*, IDXGISurface**, HResult>)(handle->LpVtbl[8]))(handle, (SurfaceDesc*)ppDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)ppSurface.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSurface(this ComPtr<IDXGIDevice3> comObj, SurfaceDesc* pDesc, uint numSurfaces, uint usage, ref SharedResource pSharedResource, ref IDXGISurface* ppSurface) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (SharedResource* ppSharedResource = &pSharedResource)
			{
				fixed (IDXGISurface** pppSurface = &ppSurface)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, SurfaceDesc*, uint, uint, SharedResource*, IDXGISurface**, HResult>)(handle->LpVtbl[8]))(handle, pDesc, numSurfaces, usage, (SharedResource*)ppSharedResource, (IDXGISurface**)pppSurface);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSurface(this ComPtr<IDXGIDevice3> comObj, SurfaceDesc* pDesc, uint numSurfaces, uint usage, ref SharedResource pSharedResource, out ComPtr<IDXGISurface> ppSurface) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (SharedResource* ppSharedResource = &pSharedResource)
			{
				ppSurface = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, SurfaceDesc*, uint, uint, SharedResource*, IDXGISurface**, HResult>)(handle->LpVtbl[8]))(handle, pDesc, numSurfaces, usage, (SharedResource*)ppSharedResource, (IDXGISurface**)ppSurface.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSurface(this ComPtr<IDXGIDevice3> comObj, ref SurfaceDesc pDesc, uint numSurfaces, uint usage, ref SharedResource pSharedResource, ref IDXGISurface* ppSurface) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (SurfaceDesc* ppDesc = &pDesc)
			{
				fixed (SharedResource* ppSharedResource = &pSharedResource)
				{
					fixed (IDXGISurface** pppSurface = &ppSurface)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, SurfaceDesc*, uint, uint, SharedResource*, IDXGISurface**, HResult>)(handle->LpVtbl[8]))(handle, (SurfaceDesc*)ppDesc, numSurfaces, usage, (SharedResource*)ppSharedResource, (IDXGISurface**)pppSurface);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSurface(this ComPtr<IDXGIDevice3> comObj, ref SurfaceDesc pDesc, uint numSurfaces, uint usage, ref SharedResource pSharedResource, out ComPtr<IDXGISurface> ppSurface) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (SurfaceDesc* ppDesc = &pDesc)
			{
				fixed (SharedResource* ppSharedResource = &pSharedResource)
				{
					ppSurface = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, SurfaceDesc*, uint, uint, SharedResource*, IDXGISurface**, HResult>)(handle->LpVtbl[8]))(handle, (SurfaceDesc*)ppDesc, numSurfaces, usage, (SharedResource*)ppSharedResource, (IDXGISurface**)ppSurface.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryResourceResidency(this ComPtr<IDXGIDevice3> comObj, IUnknown** ppResources, Residency* pResidencyStatus, uint numResources) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, IUnknown**, Residency*, uint, HResult>)(handle->LpVtbl[9]))(handle, ppResources, pResidencyStatus, numResources);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryResourceResidency(this ComPtr<IDXGIDevice3> comObj, ref IUnknown* ppResources, Residency* pResidencyStatus, uint numResources) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (IUnknown** pppResources = &ppResources)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, IUnknown**, Residency*, uint, HResult>)(handle->LpVtbl[9]))(handle, (IUnknown**)pppResources, pResidencyStatus, numResources);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryResourceResidency(this ComPtr<IDXGIDevice3> comObj, ComPtr<IUnknown> ppResources, Residency* pResidencyStatus, uint numResources) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, IUnknown**, Residency*, uint, HResult>)(handle->LpVtbl[9]))(handle, (IUnknown**)ppResources.Handle, pResidencyStatus, numResources);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryResourceResidency(this ComPtr<IDXGIDevice3> comObj, IUnknown** ppResources, ref Residency pResidencyStatus, uint numResources) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Residency* ppResidencyStatus = &pResidencyStatus)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, IUnknown**, Residency*, uint, HResult>)(handle->LpVtbl[9]))(handle, ppResources, (Residency*)ppResidencyStatus, numResources);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryResourceResidency(this ComPtr<IDXGIDevice3> comObj, ref IUnknown* ppResources, ref Residency pResidencyStatus, uint numResources) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (IUnknown** pppResources = &ppResources)
			{
				fixed (Residency* ppResidencyStatus = &pResidencyStatus)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, IUnknown**, Residency*, uint, HResult>)(handle->LpVtbl[9]))(handle, (IUnknown**)pppResources, (Residency*)ppResidencyStatus, numResources);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryResourceResidency(this ComPtr<IDXGIDevice3> comObj, ComPtr<IUnknown> ppResources, ref Residency pResidencyStatus, uint numResources) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Residency* ppResidencyStatus = &pResidencyStatus)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, IUnknown**, Residency*, uint, HResult>)(handle->LpVtbl[9]))(handle, (IUnknown**)ppResources.Handle, (Residency*)ppResidencyStatus, numResources);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetGPUThreadPriority(this ComPtr<IDXGIDevice3> comObj, int priority) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, int, HResult>)(handle->LpVtbl[10]))(handle, priority);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGPUThreadPriority(this ComPtr<IDXGIDevice3> comObj, int* pPriority) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, int*, HResult>)(handle->LpVtbl[11]))(handle, pPriority);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGPUThreadPriority(this ComPtr<IDXGIDevice3> comObj, ref int pPriority) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (int* ppPriority = &pPriority)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, int*, HResult>)(handle->LpVtbl[11]))(handle, (int*)ppPriority);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetMaximumFrameLatency(this ComPtr<IDXGIDevice3> comObj, uint maxLatency) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint, HResult>)(handle->LpVtbl[12]))(handle, maxLatency);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMaximumFrameLatency(this ComPtr<IDXGIDevice3> comObj, uint* pMaxLatency) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint*, HResult>)(handle->LpVtbl[13]))(handle, pMaxLatency);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMaximumFrameLatency(this ComPtr<IDXGIDevice3> comObj, ref uint pMaxLatency) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (uint* ppMaxLatency = &pMaxLatency)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint*, HResult>)(handle->LpVtbl[13]))(handle, (uint*)ppMaxLatency);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult OfferResources(this ComPtr<IDXGIDevice3> comObj, uint numResources, IDXGIResource** ppResources, OfferResourcePriority priority) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint, IDXGIResource**, OfferResourcePriority, HResult>)(handle->LpVtbl[14]))(handle, numResources, ppResources, priority);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult OfferResources(this ComPtr<IDXGIDevice3> comObj, uint numResources, ref IDXGIResource* ppResources, OfferResourcePriority priority) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (IDXGIResource** pppResources = &ppResources)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint, IDXGIResource**, OfferResourcePriority, HResult>)(handle->LpVtbl[14]))(handle, numResources, (IDXGIResource**)pppResources, priority);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult OfferResources(this ComPtr<IDXGIDevice3> comObj, uint numResources, ComPtr<IDXGIResource> ppResources, OfferResourcePriority priority) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint, IDXGIResource**, OfferResourcePriority, HResult>)(handle->LpVtbl[14]))(handle, numResources, (IDXGIResource**)ppResources.Handle, priority);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReclaimResources(this ComPtr<IDXGIDevice3> comObj, uint numResources, IDXGIResource** ppResources, Bool32* pDiscarded) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint, IDXGIResource**, Bool32*, HResult>)(handle->LpVtbl[15]))(handle, numResources, ppResources, pDiscarded);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReclaimResources(this ComPtr<IDXGIDevice3> comObj, uint numResources, ref IDXGIResource* ppResources, Bool32* pDiscarded) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (IDXGIResource** pppResources = &ppResources)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint, IDXGIResource**, Bool32*, HResult>)(handle->LpVtbl[15]))(handle, numResources, (IDXGIResource**)pppResources, pDiscarded);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReclaimResources(this ComPtr<IDXGIDevice3> comObj, uint numResources, ComPtr<IDXGIResource> ppResources, Bool32* pDiscarded) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint, IDXGIResource**, Bool32*, HResult>)(handle->LpVtbl[15]))(handle, numResources, (IDXGIResource**)ppResources.Handle, pDiscarded);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReclaimResources(this ComPtr<IDXGIDevice3> comObj, uint numResources, IDXGIResource** ppResources, ref Bool32 pDiscarded) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Bool32* ppDiscarded = &pDiscarded)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint, IDXGIResource**, Bool32*, HResult>)(handle->LpVtbl[15]))(handle, numResources, ppResources, (Bool32*)ppDiscarded);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReclaimResources(this ComPtr<IDXGIDevice3> comObj, uint numResources, ref IDXGIResource* ppResources, ref Bool32 pDiscarded) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (IDXGIResource** pppResources = &ppResources)
			{
				fixed (Bool32* ppDiscarded = &pDiscarded)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint, IDXGIResource**, Bool32*, HResult>)(handle->LpVtbl[15]))(handle, numResources, (IDXGIResource**)pppResources, (Bool32*)ppDiscarded);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReclaimResources(this ComPtr<IDXGIDevice3> comObj, uint numResources, ComPtr<IDXGIResource> ppResources, ref Bool32 pDiscarded) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			fixed (Bool32* ppDiscarded = &pDiscarded)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, uint, IDXGIResource**, Bool32*, HResult>)(handle->LpVtbl[15]))(handle, numResources, (IDXGIResource**)ppResources.Handle, (Bool32*)ppDiscarded);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnqueueSetEvent(this ComPtr<IDXGIDevice3> comObj, nint hEvent) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice3*, nint, HResult>)(handle->LpVtbl[16]))(handle, hEvent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Trim(this ComPtr<IDXGIDevice3> comObj) 
		{
			IDXGIDevice3* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIDevice3*, void>)(handle->LpVtbl[17]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGISwapChain2> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGISwapChain2> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGISwapChain2> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGISwapChain2> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGISwapChain2> comObj) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGISwapChain2> comObj) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGISwapChain2> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGISwapChain2> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISwapChain2> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISwapChain2> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISwapChain2> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISwapChain2> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISwapChain2> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGISwapChain2> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISwapChain2> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISwapChain2> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISwapChain2> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGISwapChain2> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISwapChain2> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISwapChain2> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISwapChain2> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGISwapChain2> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGISwapChain2> comObj, Guid* riid, void** ppParent) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGISwapChain2> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGISwapChain2> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGISwapChain2> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGISwapChain2> comObj, Guid* riid, void** ppDevice) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<IDXGISwapChain2> comObj, ref Guid riid, void** ppDevice) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGISwapChain2> comObj, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			ppDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<IDXGISwapChain2> comObj, ref Guid riid, out ComPtr<T> ppDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Present(this ComPtr<IDXGISwapChain2> comObj, uint syncInterval, uint flags) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint, uint, HResult>)(handle->LpVtbl[8]))(handle, syncInterval, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetBuffer(this ComPtr<IDXGISwapChain2> comObj, uint buffer, Guid* riid, void** ppSurface) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint, Guid*, void**, HResult>)(handle->LpVtbl[9]))(handle, buffer, riid, ppSurface);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetBuffer(this ComPtr<IDXGISwapChain2> comObj, uint buffer, ref Guid riid, void** ppSurface) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint, Guid*, void**, HResult>)(handle->LpVtbl[9]))(handle, buffer, (Guid*)priid, ppSurface);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetBuffer<T>(this ComPtr<IDXGISwapChain2> comObj, uint buffer, out ComPtr<T> ppSurface) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			ppSurface = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint, Guid*, void**, HResult>)(handle->LpVtbl[9]))(handle, buffer, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppSurface.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetBuffer<T>(this ComPtr<IDXGISwapChain2> comObj, uint buffer, ref Guid riid, out ComPtr<T> ppSurface) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppSurface = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint, Guid*, void**, HResult>)(handle->LpVtbl[9]))(handle, buffer, (Guid*)priid, (void**)ppSurface.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetFullscreenState(this ComPtr<IDXGISwapChain2> comObj, Bool32 fullscreen, IDXGIOutput* pTarget) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Bool32, IDXGIOutput*, HResult>)(handle->LpVtbl[10]))(handle, fullscreen, pTarget);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetFullscreenState(this ComPtr<IDXGISwapChain2> comObj, Bool32 fullscreen, ref IDXGIOutput pTarget) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (IDXGIOutput* ppTarget = &pTarget)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Bool32, IDXGIOutput*, HResult>)(handle->LpVtbl[10]))(handle, fullscreen, (IDXGIOutput*)ppTarget);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetFullscreenState(this ComPtr<IDXGISwapChain2> comObj, Bool32 fullscreen, ComPtr<IDXGIOutput> pTarget) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Bool32, IDXGIOutput*, HResult>)(handle->LpVtbl[10]))(handle, fullscreen, (IDXGIOutput*)pTarget.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenState(this ComPtr<IDXGISwapChain2> comObj, Bool32* pFullscreen, IDXGIOutput** ppTarget) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Bool32*, IDXGIOutput**, HResult>)(handle->LpVtbl[11]))(handle, pFullscreen, ppTarget);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenState(this ComPtr<IDXGISwapChain2> comObj, ref Bool32 pFullscreen, IDXGIOutput** ppTarget) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Bool32* ppFullscreen = &pFullscreen)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Bool32*, IDXGIOutput**, HResult>)(handle->LpVtbl[11]))(handle, (Bool32*)ppFullscreen, ppTarget);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenState(this ComPtr<IDXGISwapChain2> comObj, Bool32* pFullscreen, ref IDXGIOutput* ppTarget) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (IDXGIOutput** pppTarget = &ppTarget)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Bool32*, IDXGIOutput**, HResult>)(handle->LpVtbl[11]))(handle, pFullscreen, (IDXGIOutput**)pppTarget);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenState(this ComPtr<IDXGISwapChain2> comObj, Bool32* pFullscreen, out ComPtr<IDXGIOutput> ppTarget) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			ppTarget = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Bool32*, IDXGIOutput**, HResult>)(handle->LpVtbl[11]))(handle, pFullscreen, (IDXGIOutput**)ppTarget.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenState(this ComPtr<IDXGISwapChain2> comObj, ref Bool32 pFullscreen, ref IDXGIOutput* ppTarget) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Bool32* ppFullscreen = &pFullscreen)
			{
				fixed (IDXGIOutput** pppTarget = &ppTarget)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Bool32*, IDXGIOutput**, HResult>)(handle->LpVtbl[11]))(handle, (Bool32*)ppFullscreen, (IDXGIOutput**)pppTarget);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenState(this ComPtr<IDXGISwapChain2> comObj, ref Bool32 pFullscreen, out ComPtr<IDXGIOutput> ppTarget) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Bool32* ppFullscreen = &pFullscreen)
			{
				ppTarget = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Bool32*, IDXGIOutput**, HResult>)(handle->LpVtbl[11]))(handle, (Bool32*)ppFullscreen, (IDXGIOutput**)ppTarget.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGISwapChain2> comObj, SwapChainDesc* pDesc) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, SwapChainDesc*, HResult>)(handle->LpVtbl[12]))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGISwapChain2> comObj, ref SwapChainDesc pDesc) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (SwapChainDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, SwapChainDesc*, HResult>)(handle->LpVtbl[12]))(handle, (SwapChainDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ResizeBuffers(this ComPtr<IDXGISwapChain2> comObj, uint bufferCount, uint width, uint height, Format newFormat, uint swapChainFlags) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint, uint, uint, Format, uint, HResult>)(handle->LpVtbl[13]))(handle, bufferCount, width, height, newFormat, swapChainFlags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ResizeTarget(this ComPtr<IDXGISwapChain2> comObj, ModeDesc* pNewTargetParameters) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, ModeDesc*, HResult>)(handle->LpVtbl[14]))(handle, pNewTargetParameters);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ResizeTarget(this ComPtr<IDXGISwapChain2> comObj, ref ModeDesc pNewTargetParameters) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (ModeDesc* ppNewTargetParameters = &pNewTargetParameters)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, ModeDesc*, HResult>)(handle->LpVtbl[14]))(handle, (ModeDesc*)ppNewTargetParameters);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContainingOutput(this ComPtr<IDXGISwapChain2> comObj, IDXGIOutput** ppOutput) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, IDXGIOutput**, HResult>)(handle->LpVtbl[15]))(handle, ppOutput);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContainingOutput(this ComPtr<IDXGISwapChain2> comObj, ref IDXGIOutput* ppOutput) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (IDXGIOutput** pppOutput = &ppOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, IDXGIOutput**, HResult>)(handle->LpVtbl[15]))(handle, (IDXGIOutput**)pppOutput);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContainingOutput(this ComPtr<IDXGISwapChain2> comObj, out ComPtr<IDXGIOutput> ppOutput) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			ppOutput = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, IDXGIOutput**, HResult>)(handle->LpVtbl[15]))(handle, (IDXGIOutput**)ppOutput.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFrameStatistics(this ComPtr<IDXGISwapChain2> comObj, FrameStatistics* pStats) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, FrameStatistics*, HResult>)(handle->LpVtbl[16]))(handle, pStats);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFrameStatistics(this ComPtr<IDXGISwapChain2> comObj, ref FrameStatistics pStats) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (FrameStatistics* ppStats = &pStats)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, FrameStatistics*, HResult>)(handle->LpVtbl[16]))(handle, (FrameStatistics*)ppStats);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetLastPresentCount(this ComPtr<IDXGISwapChain2> comObj, uint* pLastPresentCount) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint*, HResult>)(handle->LpVtbl[17]))(handle, pLastPresentCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetLastPresentCount(this ComPtr<IDXGISwapChain2> comObj, ref uint pLastPresentCount) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (uint* ppLastPresentCount = &pLastPresentCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint*, HResult>)(handle->LpVtbl[17]))(handle, (uint*)ppLastPresentCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc1(this ComPtr<IDXGISwapChain2> comObj, SwapChainDesc1* pDesc) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, SwapChainDesc1*, HResult>)(handle->LpVtbl[18]))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc1(this ComPtr<IDXGISwapChain2> comObj, ref SwapChainDesc1 pDesc) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, SwapChainDesc1*, HResult>)(handle->LpVtbl[18]))(handle, (SwapChainDesc1*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenDesc(this ComPtr<IDXGISwapChain2> comObj, SwapChainFullscreenDesc* pDesc) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, SwapChainFullscreenDesc*, HResult>)(handle->LpVtbl[19]))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFullscreenDesc(this ComPtr<IDXGISwapChain2> comObj, ref SwapChainFullscreenDesc pDesc) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (SwapChainFullscreenDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, SwapChainFullscreenDesc*, HResult>)(handle->LpVtbl[19]))(handle, (SwapChainFullscreenDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetHwnd(this ComPtr<IDXGISwapChain2> comObj, nint* pHwnd) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, nint*, HResult>)(handle->LpVtbl[20]))(handle, pHwnd);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetHwnd(this ComPtr<IDXGISwapChain2> comObj, ref nint pHwnd) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (nint* ppHwnd = &pHwnd)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, nint*, HResult>)(handle->LpVtbl[20]))(handle, (nint*)ppHwnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetCoreWindow(this ComPtr<IDXGISwapChain2> comObj, Guid* refiid, void** ppUnk) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(handle->LpVtbl[21]))(handle, refiid, ppUnk);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetCoreWindow(this ComPtr<IDXGISwapChain2> comObj, ref Guid refiid, void** ppUnk) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* prefiid = &refiid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(handle->LpVtbl[21]))(handle, (Guid*)prefiid, ppUnk);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetCoreWindow<T>(this ComPtr<IDXGISwapChain2> comObj, out ComPtr<T> ppUnk) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			ppUnk = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(handle->LpVtbl[21]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppUnk.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetCoreWindow<T>(this ComPtr<IDXGISwapChain2> comObj, ref Guid refiid, out ComPtr<T> ppUnk) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Guid* prefiid = &refiid)
			{
				ppUnk = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Guid*, void**, HResult>)(handle->LpVtbl[21]))(handle, (Guid*)prefiid, (void**)ppUnk.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Present1(this ComPtr<IDXGISwapChain2> comObj, uint syncInterval, uint presentFlags, PresentParameters* pPresentParameters) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint, uint, PresentParameters*, HResult>)(handle->LpVtbl[22]))(handle, syncInterval, presentFlags, pPresentParameters);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Present1(this ComPtr<IDXGISwapChain2> comObj, uint syncInterval, uint presentFlags, ref PresentParameters pPresentParameters) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (PresentParameters* ppPresentParameters = &pPresentParameters)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint, uint, PresentParameters*, HResult>)(handle->LpVtbl[22]))(handle, syncInterval, presentFlags, (PresentParameters*)ppPresentParameters);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 IsTemporaryMonoSupported(this ComPtr<IDXGISwapChain2> comObj) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Bool32>)(handle->LpVtbl[23]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRestrictToOutput(this ComPtr<IDXGISwapChain2> comObj, IDXGIOutput** ppRestrictToOutput) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, IDXGIOutput**, HResult>)(handle->LpVtbl[24]))(handle, ppRestrictToOutput);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRestrictToOutput(this ComPtr<IDXGISwapChain2> comObj, ref IDXGIOutput* ppRestrictToOutput) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (IDXGIOutput** pppRestrictToOutput = &ppRestrictToOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, IDXGIOutput**, HResult>)(handle->LpVtbl[24]))(handle, (IDXGIOutput**)pppRestrictToOutput);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRestrictToOutput(this ComPtr<IDXGISwapChain2> comObj, out ComPtr<IDXGIOutput> ppRestrictToOutput) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			ppRestrictToOutput = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, IDXGIOutput**, HResult>)(handle->LpVtbl[24]))(handle, (IDXGIOutput**)ppRestrictToOutput.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetBackgroundColor(this ComPtr<IDXGISwapChain2> comObj, Vector4* pColor) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Vector4*, HResult>)(handle->LpVtbl[25]))(handle, pColor);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetBackgroundColor(this ComPtr<IDXGISwapChain2> comObj, ref Vector4 pColor) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Vector4* ppColor = &pColor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Vector4*, HResult>)(handle->LpVtbl[25]))(handle, (Vector4*)ppColor);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetBackgroundColor(this ComPtr<IDXGISwapChain2> comObj, Vector4* pColor) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Vector4*, HResult>)(handle->LpVtbl[26]))(handle, pColor);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetBackgroundColor(this ComPtr<IDXGISwapChain2> comObj, ref Vector4 pColor) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Vector4* ppColor = &pColor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Vector4*, HResult>)(handle->LpVtbl[26]))(handle, (Vector4*)ppColor);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetRotation(this ComPtr<IDXGISwapChain2> comObj, ModeRotation rotation) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, ModeRotation, HResult>)(handle->LpVtbl[27]))(handle, rotation);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRotation(this ComPtr<IDXGISwapChain2> comObj, ModeRotation* pRotation) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, ModeRotation*, HResult>)(handle->LpVtbl[28]))(handle, pRotation);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRotation(this ComPtr<IDXGISwapChain2> comObj, ref ModeRotation pRotation) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (ModeRotation* ppRotation = &pRotation)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, ModeRotation*, HResult>)(handle->LpVtbl[28]))(handle, (ModeRotation*)ppRotation);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetSourceSize(this ComPtr<IDXGISwapChain2> comObj, uint width, uint height) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint, uint, HResult>)(handle->LpVtbl[29]))(handle, width, height);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSourceSize(this ComPtr<IDXGISwapChain2> comObj, uint* pWidth, uint* pHeight) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint*, uint*, HResult>)(handle->LpVtbl[30]))(handle, pWidth, pHeight);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSourceSize(this ComPtr<IDXGISwapChain2> comObj, ref uint pWidth, uint* pHeight) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (uint* ppWidth = &pWidth)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint*, uint*, HResult>)(handle->LpVtbl[30]))(handle, (uint*)ppWidth, pHeight);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSourceSize(this ComPtr<IDXGISwapChain2> comObj, uint* pWidth, ref uint pHeight) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (uint* ppHeight = &pHeight)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint*, uint*, HResult>)(handle->LpVtbl[30]))(handle, pWidth, (uint*)ppHeight);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSourceSize(this ComPtr<IDXGISwapChain2> comObj, ref uint pWidth, ref uint pHeight) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (uint* ppWidth = &pWidth)
			{
				fixed (uint* ppHeight = &pHeight)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint*, uint*, HResult>)(handle->LpVtbl[30]))(handle, (uint*)ppWidth, (uint*)ppHeight);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetMaximumFrameLatency(this ComPtr<IDXGISwapChain2> comObj, uint maxLatency) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint, HResult>)(handle->LpVtbl[31]))(handle, maxLatency);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMaximumFrameLatency(this ComPtr<IDXGISwapChain2> comObj, uint* pMaxLatency) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pMaxLatency);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMaximumFrameLatency(this ComPtr<IDXGISwapChain2> comObj, ref uint pMaxLatency) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (uint* ppMaxLatency = &pMaxLatency)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (uint*)ppMaxLatency);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static nint GetFrameLatencyWaitableObject(this ComPtr<IDXGISwapChain2> comObj) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			nint ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, nint>)(handle->LpVtbl[33]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetMatrixTransform(this ComPtr<IDXGISwapChain2> comObj, Matrix3X2F* pMatrix) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Matrix3X2F*, HResult>)(handle->LpVtbl[34]))(handle, pMatrix);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetMatrixTransform(this ComPtr<IDXGISwapChain2> comObj, ref Matrix3X2F pMatrix) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Matrix3X2F* ppMatrix = &pMatrix)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Matrix3X2F*, HResult>)(handle->LpVtbl[34]))(handle, (Matrix3X2F*)ppMatrix);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMatrixTransform(this ComPtr<IDXGISwapChain2> comObj, Matrix3X2F* pMatrix) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Matrix3X2F*, HResult>)(handle->LpVtbl[35]))(handle, pMatrix);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMatrixTransform(this ComPtr<IDXGISwapChain2> comObj, ref Matrix3X2F pMatrix) 
		{
			IDXGISwapChain2* handle = comObj.Handle;
			fixed (Matrix3X2F* ppMatrix = &pMatrix)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, Matrix3X2F*, HResult>)(handle->LpVtbl[35]))(handle, (Matrix3X2F*)ppMatrix);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIOutput2> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIOutput2> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIOutput2> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput2* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIOutput2> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIOutput2> comObj) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIOutput2> comObj) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIOutput2> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIOutput2> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIOutput2> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIOutput2> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIOutput2> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIOutput2> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIOutput2> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIOutput2> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIOutput2> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIOutput2> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIOutput2> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIOutput2> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIOutput2> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIOutput2> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIOutput2> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIOutput2> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIOutput2> comObj, Guid* riid, void** ppParent) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIOutput2> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIOutput2> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput2* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIOutput2> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGIOutput2> comObj, OutputDesc* pDesc) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, OutputDesc*, HResult>)(handle->LpVtbl[7]))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<IDXGIOutput2> comObj, ref OutputDesc pDesc) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (OutputDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, OutputDesc*, HResult>)(handle->LpVtbl[7]))(handle, (OutputDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList(this ComPtr<IDXGIOutput2> comObj, Format enumFormat, uint flags, uint* pNumModes, ModeDesc* pDesc) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Format, uint, uint*, ModeDesc*, HResult>)(handle->LpVtbl[8]))(handle, enumFormat, flags, pNumModes, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList(this ComPtr<IDXGIOutput2> comObj, Format enumFormat, uint flags, ref uint pNumModes, ModeDesc* pDesc) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (uint* ppNumModes = &pNumModes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Format, uint, uint*, ModeDesc*, HResult>)(handle->LpVtbl[8]))(handle, enumFormat, flags, (uint*)ppNumModes, pDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList(this ComPtr<IDXGIOutput2> comObj, Format enumFormat, uint flags, uint* pNumModes, ref ModeDesc pDesc) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Format, uint, uint*, ModeDesc*, HResult>)(handle->LpVtbl[8]))(handle, enumFormat, flags, pNumModes, (ModeDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList(this ComPtr<IDXGIOutput2> comObj, Format enumFormat, uint flags, ref uint pNumModes, ref ModeDesc pDesc) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (uint* ppNumModes = &pNumModes)
			{
				fixed (ModeDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Format, uint, uint*, ModeDesc*, HResult>)(handle->LpVtbl[8]))(handle, enumFormat, flags, (uint*)ppNumModes, (ModeDesc*)ppDesc);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput2> comObj, ModeDesc* pModeToMatch, ModeDesc* pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, pClosestMatch, pConcernedDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput2> comObj, ref ModeDesc pModeToMatch, ModeDesc* pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, pClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput2> comObj, ModeDesc* pModeToMatch, ref ModeDesc pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, (ModeDesc*)ppClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput2> comObj, ref ModeDesc pModeToMatch, ref ModeDesc pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, (ModeDesc*)ppClosestMatch, pConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput2> comObj, ModeDesc* pModeToMatch, ModeDesc* pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput2> comObj, ModeDesc* pModeToMatch, ModeDesc* pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, pClosestMatch, (IUnknown*)pConcernedDevice.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput2> comObj, ref ModeDesc pModeToMatch, ModeDesc* pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput2> comObj, ref ModeDesc pModeToMatch, ModeDesc* pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, pClosestMatch, (IUnknown*)pConcernedDevice.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput2> comObj, ModeDesc* pModeToMatch, ref ModeDesc pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput2> comObj, ModeDesc* pModeToMatch, ref ModeDesc pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, pModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)pConcernedDevice.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput2> comObj, ref ModeDesc pModeToMatch, ref ModeDesc pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
				{
					fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode(this ComPtr<IDXGIOutput2> comObj, ref ModeDesc pModeToMatch, ref ModeDesc pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(handle->LpVtbl[9]))(handle, (ModeDesc*)ppModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)pConcernedDevice.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult WaitForVBlank(this ComPtr<IDXGIOutput2> comObj) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, HResult>)(handle->LpVtbl[10]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult TakeOwnership(this ComPtr<IDXGIOutput2> comObj, IUnknown* pDevice, Bool32 exclusive) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IUnknown*, Bool32, HResult>)(handle->LpVtbl[11]))(handle, pDevice, exclusive);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult TakeOwnership(this ComPtr<IDXGIOutput2> comObj, ref IUnknown pDevice, Bool32 exclusive) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IUnknown*, Bool32, HResult>)(handle->LpVtbl[11]))(handle, (IUnknown*)ppDevice, exclusive);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult TakeOwnership(this ComPtr<IDXGIOutput2> comObj, ComPtr<IUnknown> pDevice, Bool32 exclusive) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IUnknown*, Bool32, HResult>)(handle->LpVtbl[11]))(handle, (IUnknown*)pDevice.Handle, exclusive);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ReleaseOwnership(this ComPtr<IDXGIOutput2> comObj) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<IDXGIOutput2*, void>)(handle->LpVtbl[12]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGammaControlCapabilities(this ComPtr<IDXGIOutput2> comObj, GammaControlCapabilities* pGammaCaps) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, GammaControlCapabilities*, HResult>)(handle->LpVtbl[13]))(handle, pGammaCaps);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGammaControlCapabilities(this ComPtr<IDXGIOutput2> comObj, ref GammaControlCapabilities pGammaCaps) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (GammaControlCapabilities* ppGammaCaps = &pGammaCaps)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, GammaControlCapabilities*, HResult>)(handle->LpVtbl[13]))(handle, (GammaControlCapabilities*)ppGammaCaps);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetGammaControl(this ComPtr<IDXGIOutput2> comObj, GammaControl* pArray) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, GammaControl*, HResult>)(handle->LpVtbl[14]))(handle, pArray);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetGammaControl(this ComPtr<IDXGIOutput2> comObj, ref GammaControl pArray) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (GammaControl* ppArray = &pArray)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, GammaControl*, HResult>)(handle->LpVtbl[14]))(handle, (GammaControl*)ppArray);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGammaControl(this ComPtr<IDXGIOutput2> comObj, GammaControl* pArray) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, GammaControl*, HResult>)(handle->LpVtbl[15]))(handle, pArray);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetGammaControl(this ComPtr<IDXGIOutput2> comObj, ref GammaControl pArray) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (GammaControl* ppArray = &pArray)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, GammaControl*, HResult>)(handle->LpVtbl[15]))(handle, (GammaControl*)ppArray);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetDisplaySurface(this ComPtr<IDXGIOutput2> comObj, IDXGISurface* pScanoutSurface) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IDXGISurface*, HResult>)(handle->LpVtbl[16]))(handle, pScanoutSurface);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetDisplaySurface(this ComPtr<IDXGIOutput2> comObj, ref IDXGISurface pScanoutSurface) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (IDXGISurface* ppScanoutSurface = &pScanoutSurface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IDXGISurface*, HResult>)(handle->LpVtbl[16]))(handle, (IDXGISurface*)ppScanoutSurface);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetDisplaySurface(this ComPtr<IDXGIOutput2> comObj, ComPtr<IDXGISurface> pScanoutSurface) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IDXGISurface*, HResult>)(handle->LpVtbl[16]))(handle, (IDXGISurface*)pScanoutSurface.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData(this ComPtr<IDXGIOutput2> comObj, IDXGISurface* pDestination) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IDXGISurface*, HResult>)(handle->LpVtbl[17]))(handle, pDestination);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData(this ComPtr<IDXGIOutput2> comObj, ref IDXGISurface pDestination) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (IDXGISurface* ppDestination = &pDestination)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IDXGISurface*, HResult>)(handle->LpVtbl[17]))(handle, (IDXGISurface*)ppDestination);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData(this ComPtr<IDXGIOutput2> comObj, ComPtr<IDXGISurface> pDestination) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IDXGISurface*, HResult>)(handle->LpVtbl[17]))(handle, (IDXGISurface*)pDestination.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFrameStatistics(this ComPtr<IDXGIOutput2> comObj, FrameStatistics* pStats) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, FrameStatistics*, HResult>)(handle->LpVtbl[18]))(handle, pStats);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetFrameStatistics(this ComPtr<IDXGIOutput2> comObj, ref FrameStatistics pStats) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (FrameStatistics* ppStats = &pStats)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, FrameStatistics*, HResult>)(handle->LpVtbl[18]))(handle, (FrameStatistics*)ppStats);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList1(this ComPtr<IDXGIOutput2> comObj, Format enumFormat, uint flags, uint* pNumModes, ModeDesc1* pDesc) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Format, uint, uint*, ModeDesc1*, HResult>)(handle->LpVtbl[19]))(handle, enumFormat, flags, pNumModes, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList1(this ComPtr<IDXGIOutput2> comObj, Format enumFormat, uint flags, ref uint pNumModes, ModeDesc1* pDesc) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (uint* ppNumModes = &pNumModes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Format, uint, uint*, ModeDesc1*, HResult>)(handle->LpVtbl[19]))(handle, enumFormat, flags, (uint*)ppNumModes, pDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList1(this ComPtr<IDXGIOutput2> comObj, Format enumFormat, uint flags, uint* pNumModes, ref ModeDesc1 pDesc) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Format, uint, uint*, ModeDesc1*, HResult>)(handle->LpVtbl[19]))(handle, enumFormat, flags, pNumModes, (ModeDesc1*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplayModeList1(this ComPtr<IDXGIOutput2> comObj, Format enumFormat, uint flags, ref uint pNumModes, ref ModeDesc1 pDesc) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (uint* ppNumModes = &pNumModes)
			{
				fixed (ModeDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Format, uint, uint*, ModeDesc1*, HResult>)(handle->LpVtbl[19]))(handle, enumFormat, flags, (uint*)ppNumModes, (ModeDesc1*)ppDesc);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput2> comObj, ModeDesc1* pModeToMatch, ModeDesc1* pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, pModeToMatch, pClosestMatch, pConcernedDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput2> comObj, ref ModeDesc1 pModeToMatch, ModeDesc1* pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, (ModeDesc1*)ppModeToMatch, pClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput2> comObj, ModeDesc1* pModeToMatch, ref ModeDesc1 pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc1* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, pModeToMatch, (ModeDesc1*)ppClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput2> comObj, ref ModeDesc1 pModeToMatch, ref ModeDesc1 pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc1* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, (ModeDesc1*)ppModeToMatch, (ModeDesc1*)ppClosestMatch, pConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput2> comObj, ModeDesc1* pModeToMatch, ModeDesc1* pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, pModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput2> comObj, ModeDesc1* pModeToMatch, ModeDesc1* pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, pModeToMatch, pClosestMatch, (IUnknown*)pConcernedDevice.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput2> comObj, ref ModeDesc1 pModeToMatch, ModeDesc1* pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, (ModeDesc1*)ppModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput2> comObj, ref ModeDesc1 pModeToMatch, ModeDesc1* pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, (ModeDesc1*)ppModeToMatch, pClosestMatch, (IUnknown*)pConcernedDevice.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput2> comObj, ModeDesc1* pModeToMatch, ref ModeDesc1 pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc1* ppClosestMatch = &pClosestMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, pModeToMatch, (ModeDesc1*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput2> comObj, ModeDesc1* pModeToMatch, ref ModeDesc1 pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc1* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, pModeToMatch, (ModeDesc1*)ppClosestMatch, (IUnknown*)pConcernedDevice.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput2> comObj, ref ModeDesc1 pModeToMatch, ref ModeDesc1 pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc1* ppClosestMatch = &pClosestMatch)
				{
					fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, (ModeDesc1*)ppModeToMatch, (ModeDesc1*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult FindClosestMatchingMode1(this ComPtr<IDXGIOutput2> comObj, ref ModeDesc1 pModeToMatch, ref ModeDesc1 pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (ModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc1* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, ModeDesc1*, ModeDesc1*, IUnknown*, HResult>)(handle->LpVtbl[20]))(handle, (ModeDesc1*)ppModeToMatch, (ModeDesc1*)ppClosestMatch, (IUnknown*)pConcernedDevice.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData1(this ComPtr<IDXGIOutput2> comObj, IDXGIResource* pDestination) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IDXGIResource*, HResult>)(handle->LpVtbl[21]))(handle, pDestination);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData1(this ComPtr<IDXGIOutput2> comObj, ref IDXGIResource pDestination) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (IDXGIResource* ppDestination = &pDestination)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IDXGIResource*, HResult>)(handle->LpVtbl[21]))(handle, (IDXGIResource*)ppDestination);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDisplaySurfaceData1(this ComPtr<IDXGIOutput2> comObj, ComPtr<IDXGIResource> pDestination) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IDXGIResource*, HResult>)(handle->LpVtbl[21]))(handle, (IDXGIResource*)pDestination.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput2> comObj, IUnknown* pDevice, IDXGIOutputDuplication** ppOutputDuplication) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, pDevice, ppOutputDuplication);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput2> comObj, ref IUnknown pDevice, IDXGIOutputDuplication** ppOutputDuplication) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, (IUnknown*)ppDevice, ppOutputDuplication);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput2> comObj, ComPtr<IUnknown> pDevice, IDXGIOutputDuplication** ppOutputDuplication) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, (IUnknown*)pDevice.Handle, ppOutputDuplication);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput2> comObj, IUnknown* pDevice, ref IDXGIOutputDuplication* ppOutputDuplication) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (IDXGIOutputDuplication** pppOutputDuplication = &ppOutputDuplication)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, pDevice, (IDXGIOutputDuplication**)pppOutputDuplication);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput2> comObj, IUnknown* pDevice, out ComPtr<IDXGIOutputDuplication> ppOutputDuplication) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			ppOutputDuplication = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, pDevice, (IDXGIOutputDuplication**)ppOutputDuplication.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput2> comObj, ref IUnknown pDevice, ref IDXGIOutputDuplication* ppOutputDuplication) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutputDuplication** pppOutputDuplication = &ppOutputDuplication)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, (IUnknown*)ppDevice, (IDXGIOutputDuplication**)pppOutputDuplication);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult DuplicateOutput(this ComPtr<IDXGIOutput2> comObj, ComPtr<IUnknown> pDevice, out ComPtr<IDXGIOutputDuplication> ppOutputDuplication) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			ppOutputDuplication = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, IUnknown*, IDXGIOutputDuplication**, HResult>)(handle->LpVtbl[22]))(handle, (IUnknown*)pDevice.Handle, (IDXGIOutputDuplication**)ppOutputDuplication.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 SupportsOverlays(this ComPtr<IDXGIOutput2> comObj) 
		{
			IDXGIOutput2* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Bool32>)(handle->LpVtbl[23]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIFactory3> comObj, Guid* riid, void** ppvObject) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<IDXGIFactory3> comObj, ref Guid riid, void** ppvObject) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIFactory3> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory3* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<IDXGIFactory3> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<IDXGIFactory3> comObj) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<IDXGIFactory3> comObj) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIFactory3> comObj, Guid* name, uint dataSize, void* pData) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<IDXGIFactory3> comObj, ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, uint, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIFactory3> comObj, Guid* name, IUnknown* pUnknown) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIFactory3> comObj, ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIFactory3> comObj, Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIFactory3> comObj, Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIFactory3> comObj, ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<IDXGIFactory3> comObj, ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIFactory3> comObj, Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIFactory3> comObj, ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIFactory3> comObj, Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<IDXGIFactory3> comObj, ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIFactory3> comObj, Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIFactory3> comObj, ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIFactory3> comObj, Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<IDXGIFactory3> comObj, ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIFactory3> comObj, Guid* riid, void** ppParent) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent(this ComPtr<IDXGIFactory3> comObj, ref Guid riid, void** ppParent) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIFactory3> comObj, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory3* handle = comObj.Handle;
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetParent<T>(this ComPtr<IDXGIFactory3> comObj, ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Guid*, void**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapters(this ComPtr<IDXGIFactory3> comObj, uint adapter, IDXGIAdapter** ppAdapter) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, uint, IDXGIAdapter**, HResult>)(handle->LpVtbl[7]))(handle, adapter, ppAdapter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapters(this ComPtr<IDXGIFactory3> comObj, uint adapter, ref IDXGIAdapter* ppAdapter) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IDXGIAdapter** pppAdapter = &ppAdapter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, uint, IDXGIAdapter**, HResult>)(handle->LpVtbl[7]))(handle, adapter, (IDXGIAdapter**)pppAdapter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapters(this ComPtr<IDXGIFactory3> comObj, uint adapter, out ComPtr<IDXGIAdapter> ppAdapter) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			ppAdapter = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, uint, IDXGIAdapter**, HResult>)(handle->LpVtbl[7]))(handle, adapter, (IDXGIAdapter**)ppAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult MakeWindowAssociation(this ComPtr<IDXGIFactory3> comObj, nint windowHandle, uint flags) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, nint, uint, HResult>)(handle->LpVtbl[8]))(handle, windowHandle, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetWindowAssociation(this ComPtr<IDXGIFactory3> comObj, nint* pWindowHandle) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, nint*, HResult>)(handle->LpVtbl[9]))(handle, pWindowHandle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetWindowAssociation(this ComPtr<IDXGIFactory3> comObj, ref nint pWindowHandle) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (nint* ppWindowHandle = &pWindowHandle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, nint*, HResult>)(handle->LpVtbl[9]))(handle, (nint*)ppWindowHandle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, SwapChainDesc* pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, pDevice, pDesc, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, SwapChainDesc* pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)ppDevice, pDesc, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, SwapChainDesc* pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)pDevice.Handle, pDesc, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, ref SwapChainDesc pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, pDevice, (SwapChainDesc*)ppDesc, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, ref SwapChainDesc pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)ppDevice, (SwapChainDesc*)ppDesc, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, ref SwapChainDesc pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)pDevice.Handle, (SwapChainDesc*)ppDesc, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, SwapChainDesc* pDesc, ref IDXGISwapChain* ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, pDevice, pDesc, (IDXGISwapChain**)pppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, SwapChainDesc* pDesc, out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, pDevice, pDesc, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, SwapChainDesc* pDesc, ref IDXGISwapChain* ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)ppDevice, pDesc, (IDXGISwapChain**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, SwapChainDesc* pDesc, out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)pDevice.Handle, pDesc, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, ref SwapChainDesc pDesc, ref IDXGISwapChain* ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc* ppDesc = &pDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, pDevice, (SwapChainDesc*)ppDesc, (IDXGISwapChain**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, ref SwapChainDesc pDesc, out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, pDevice, (SwapChainDesc*)ppDesc, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, ref SwapChainDesc pDesc, ref IDXGISwapChain* ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc* ppDesc = &pDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)ppDevice, (SwapChainDesc*)ppDesc, (IDXGISwapChain**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChain(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, ref SwapChainDesc pDesc, out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, SwapChainDesc*, IDXGISwapChain**, HResult>)(handle->LpVtbl[10]))(handle, (IUnknown*)pDevice.Handle, (SwapChainDesc*)ppDesc, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSoftwareAdapter(this ComPtr<IDXGIFactory3> comObj, nint module, IDXGIAdapter** ppAdapter) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, nint, IDXGIAdapter**, HResult>)(handle->LpVtbl[11]))(handle, module, ppAdapter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSoftwareAdapter(this ComPtr<IDXGIFactory3> comObj, nint module, ref IDXGIAdapter* ppAdapter) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IDXGIAdapter** pppAdapter = &ppAdapter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, nint, IDXGIAdapter**, HResult>)(handle->LpVtbl[11]))(handle, module, (IDXGIAdapter**)pppAdapter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSoftwareAdapter(this ComPtr<IDXGIFactory3> comObj, nint module, out ComPtr<IDXGIAdapter> ppAdapter) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			ppAdapter = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, nint, IDXGIAdapter**, HResult>)(handle->LpVtbl[11]))(handle, module, (IDXGIAdapter**)ppAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapters1(this ComPtr<IDXGIFactory3> comObj, uint adapter, IDXGIAdapter1** ppAdapter) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, uint, IDXGIAdapter1**, HResult>)(handle->LpVtbl[12]))(handle, adapter, ppAdapter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapters1(this ComPtr<IDXGIFactory3> comObj, uint adapter, ref IDXGIAdapter1* ppAdapter) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IDXGIAdapter1** pppAdapter = &ppAdapter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, uint, IDXGIAdapter1**, HResult>)(handle->LpVtbl[12]))(handle, adapter, (IDXGIAdapter1**)pppAdapter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult EnumAdapters1(this ComPtr<IDXGIFactory3> comObj, uint adapter, out ComPtr<IDXGIAdapter1> ppAdapter) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			ppAdapter = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, uint, IDXGIAdapter1**, HResult>)(handle->LpVtbl[12]))(handle, adapter, (IDXGIAdapter1**)ppAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 IsCurrent(this ComPtr<IDXGIFactory3> comObj) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Bool32>)(handle->LpVtbl[13]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 IsWindowedStereoEnabled(this ComPtr<IDXGIFactory3> comObj) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, Bool32>)(handle->LpVtbl[14]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, SwapChainDesc1* pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, nint hWnd, SwapChainDesc1* pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)ppDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, nint hWnd, SwapChainDesc1* pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)pDevice.Handle, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, ref SwapChainDesc1 pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, (SwapChainDesc1*)ppDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, nint hWnd, ref SwapChainDesc1 pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)ppDevice, hWnd, (SwapChainDesc1*)ppDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, nint hWnd, ref SwapChainDesc1 pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)pDevice.Handle, hWnd, (SwapChainDesc1*)ppDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, SwapChainDesc1* pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, pDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, nint hWnd, SwapChainDesc1* pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)ppDevice, hWnd, pDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, nint hWnd, SwapChainDesc1* pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)pDevice.Handle, hWnd, pDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, ref SwapChainDesc1 pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, (SwapChainDesc1*)ppDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, nint hWnd, ref SwapChainDesc1 pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)ppDevice, hWnd, (SwapChainDesc1*)ppDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, nint hWnd, ref SwapChainDesc1 pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)pDevice.Handle, hWnd, (SwapChainDesc1*)ppDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, SwapChainDesc1* pDesc, SwapChainFullscreenDesc* pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, pDesc, pFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, SwapChainDesc1* pDesc, SwapChainFullscreenDesc* pFullscreenDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, pDesc, pFullscreenDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, nint hWnd, SwapChainDesc1* pDesc, SwapChainFullscreenDesc* pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)ppDevice, hWnd, pDesc, pFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, nint hWnd, SwapChainDesc1* pDesc, SwapChainFullscreenDesc* pFullscreenDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)pDevice.Handle, hWnd, pDesc, pFullscreenDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, ref SwapChainDesc1 pDesc, SwapChainFullscreenDesc* pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, (SwapChainDesc1*)ppDesc, pFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, ref SwapChainDesc1 pDesc, SwapChainFullscreenDesc* pFullscreenDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, (SwapChainDesc1*)ppDesc, pFullscreenDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, nint hWnd, ref SwapChainDesc1 pDesc, SwapChainFullscreenDesc* pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)ppDevice, hWnd, (SwapChainDesc1*)ppDesc, pFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, nint hWnd, ref SwapChainDesc1 pDesc, SwapChainFullscreenDesc* pFullscreenDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)pDevice.Handle, hWnd, (SwapChainDesc1*)ppDesc, pFullscreenDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, SwapChainDesc1* pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, pDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, SwapChainDesc1* pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, pDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, nint hWnd, SwapChainDesc1* pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)ppDevice, hWnd, pDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, nint hWnd, SwapChainDesc1* pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)pDevice.Handle, hWnd, pDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, ref SwapChainDesc1 pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, (SwapChainDesc1*)ppDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, ref SwapChainDesc1 pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, (SwapChainDesc1*)ppDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, nint hWnd, ref SwapChainDesc1 pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
					{
						fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)ppDevice, hWnd, (SwapChainDesc1*)ppDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, nint hWnd, ref SwapChainDesc1 pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, ComPtr<IDXGIOutput> pRestrictToOutput, IDXGISwapChain1** ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)pDevice.Handle, hWnd, (SwapChainDesc1*)ppDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)pRestrictToOutput.Handle, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, SwapChainDesc1* pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, SwapChainDesc1* pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, nint hWnd, SwapChainDesc1* pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)ppDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, nint hWnd, SwapChainDesc1* pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)pDevice.Handle, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, ref SwapChainDesc1 pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, (SwapChainDesc1*)ppDesc, pFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, ref SwapChainDesc1 pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, (SwapChainDesc1*)ppDesc, pFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, nint hWnd, ref SwapChainDesc1 pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)ppDevice, hWnd, (SwapChainDesc1*)ppDesc, pFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, nint hWnd, ref SwapChainDesc1 pDesc, SwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)pDevice.Handle, hWnd, (SwapChainDesc1*)ppDesc, pFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, SwapChainDesc1* pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, pDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, SwapChainDesc1* pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, pDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, nint hWnd, SwapChainDesc1* pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)ppDevice, hWnd, pDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ComPtr<IUnknown> pDevice, nint hWnd, SwapChainDesc1* pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
			{
				ppSwapChain = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)pDevice.Handle, hWnd, pDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, ref SwapChainDesc1 pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, (SwapChainDesc1*)ppDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, IUnknown* pDevice, nint hWnd, ref SwapChainDesc1 pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, out ComPtr<IDXGISwapChain1> ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (SwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					ppSwapChain = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, pDevice, hWnd, (SwapChainDesc1*)ppDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)ppSwapChain.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSwapChainForHwnd(this ComPtr<IDXGIFactory3> comObj, ref IUnknown pDevice, nint hWnd, ref SwapChainDesc1 pDesc, ref SwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain) 
		{
			IDXGIFactory3* handle = comObj.Handle;
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (SwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (SwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, IUnknown*, nint, SwapChainDesc1*, SwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(handle->LpVtbl[15]))(handle, (IUnknown*)ppDevice, hWnd, (SwapChainDesc1*)ppDesc, (SwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}
	}
}
