// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXGI
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "DXGI_JPEG_DC_HUFFMAN_TABLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiJpegDcHuffmanTable
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CodeCounts")]
		[NativeName(NativeNameType.Type, "BYTE[12]")]
		public byte CodeCounts_0;
		public byte CodeCounts_1;
		public byte CodeCounts_2;
		public byte CodeCounts_3;
		public byte CodeCounts_4;
		public byte CodeCounts_5;
		public byte CodeCounts_6;
		public byte CodeCounts_7;
		public byte CodeCounts_8;
		public byte CodeCounts_9;
		public byte CodeCounts_10;
		public byte CodeCounts_11;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CodeValues")]
		[NativeName(NativeNameType.Type, "BYTE[12]")]
		public byte CodeValues_0;
		public byte CodeValues_1;
		public byte CodeValues_2;
		public byte CodeValues_3;
		public byte CodeValues_4;
		public byte CodeValues_5;
		public byte CodeValues_6;
		public byte CodeValues_7;
		public byte CodeValues_8;
		public byte CodeValues_9;
		public byte CodeValues_10;
		public byte CodeValues_11;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe DxgiJpegDcHuffmanTable(byte* codeCounts = default, byte* codeValues = default)
		{
			if (codeCounts != default(byte*))
			{
				CodeCounts_0 = codeCounts[0];
				CodeCounts_1 = codeCounts[1];
				CodeCounts_2 = codeCounts[2];
				CodeCounts_3 = codeCounts[3];
				CodeCounts_4 = codeCounts[4];
				CodeCounts_5 = codeCounts[5];
				CodeCounts_6 = codeCounts[6];
				CodeCounts_7 = codeCounts[7];
				CodeCounts_8 = codeCounts[8];
				CodeCounts_9 = codeCounts[9];
				CodeCounts_10 = codeCounts[10];
				CodeCounts_11 = codeCounts[11];
			}
			if (codeValues != default(byte*))
			{
				CodeValues_0 = codeValues[0];
				CodeValues_1 = codeValues[1];
				CodeValues_2 = codeValues[2];
				CodeValues_3 = codeValues[3];
				CodeValues_4 = codeValues[4];
				CodeValues_5 = codeValues[5];
				CodeValues_6 = codeValues[6];
				CodeValues_7 = codeValues[7];
				CodeValues_8 = codeValues[8];
				CodeValues_9 = codeValues[9];
				CodeValues_10 = codeValues[10];
				CodeValues_11 = codeValues[11];
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe DxgiJpegDcHuffmanTable(Span<byte> codeCounts = default, Span<byte> codeValues = default)
		{
			if (codeCounts != default(Span<byte>))
			{
				CodeCounts_0 = codeCounts[0];
				CodeCounts_1 = codeCounts[1];
				CodeCounts_2 = codeCounts[2];
				CodeCounts_3 = codeCounts[3];
				CodeCounts_4 = codeCounts[4];
				CodeCounts_5 = codeCounts[5];
				CodeCounts_6 = codeCounts[6];
				CodeCounts_7 = codeCounts[7];
				CodeCounts_8 = codeCounts[8];
				CodeCounts_9 = codeCounts[9];
				CodeCounts_10 = codeCounts[10];
				CodeCounts_11 = codeCounts[11];
			}
			if (codeValues != default(Span<byte>))
			{
				CodeValues_0 = codeValues[0];
				CodeValues_1 = codeValues[1];
				CodeValues_2 = codeValues[2];
				CodeValues_3 = codeValues[3];
				CodeValues_4 = codeValues[4];
				CodeValues_5 = codeValues[5];
				CodeValues_6 = codeValues[6];
				CodeValues_7 = codeValues[7];
				CodeValues_8 = codeValues[8];
				CodeValues_9 = codeValues[9];
				CodeValues_10 = codeValues[10];
				CodeValues_11 = codeValues[11];
			}
		}


	}

}
