// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXGI
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct HdrMetadataHdr10
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort RedPrimary_0;
		public ushort RedPrimary_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort GreenPrimary_0;
		public ushort GreenPrimary_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort BluePrimary_0;
		public ushort BluePrimary_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort WhitePoint_0;
		public ushort WhitePoint_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint MaxMasteringLuminance;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint MinMasteringLuminance;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort MaxContentLightLevel;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort MaxFrameAverageLightLevel;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe HdrMetadataHdr10(ushort* redPrimary = default, ushort* greenPrimary = default, ushort* bluePrimary = default, ushort* whitePoint = default, uint maxMasteringLuminance = default, uint minMasteringLuminance = default, ushort maxContentLightLevel = default, ushort maxFrameAverageLightLevel = default)
		{
			if (redPrimary != default(ushort*))
			{
				RedPrimary_0 = redPrimary[0];
				RedPrimary_1 = redPrimary[1];
			}
			if (greenPrimary != default(ushort*))
			{
				GreenPrimary_0 = greenPrimary[0];
				GreenPrimary_1 = greenPrimary[1];
			}
			if (bluePrimary != default(ushort*))
			{
				BluePrimary_0 = bluePrimary[0];
				BluePrimary_1 = bluePrimary[1];
			}
			if (whitePoint != default(ushort*))
			{
				WhitePoint_0 = whitePoint[0];
				WhitePoint_1 = whitePoint[1];
			}
			MaxMasteringLuminance = maxMasteringLuminance;
			MinMasteringLuminance = minMasteringLuminance;
			MaxContentLightLevel = maxContentLightLevel;
			MaxFrameAverageLightLevel = maxFrameAverageLightLevel;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe HdrMetadataHdr10(Span<ushort> redPrimary = default, Span<ushort> greenPrimary = default, Span<ushort> bluePrimary = default, Span<ushort> whitePoint = default, uint maxMasteringLuminance = default, uint minMasteringLuminance = default, ushort maxContentLightLevel = default, ushort maxFrameAverageLightLevel = default)
		{
			if (redPrimary != default(Span<ushort>))
			{
				RedPrimary_0 = redPrimary[0];
				RedPrimary_1 = redPrimary[1];
			}
			if (greenPrimary != default(Span<ushort>))
			{
				GreenPrimary_0 = greenPrimary[0];
				GreenPrimary_1 = greenPrimary[1];
			}
			if (bluePrimary != default(Span<ushort>))
			{
				BluePrimary_0 = bluePrimary[0];
				BluePrimary_1 = bluePrimary[1];
			}
			if (whitePoint != default(Span<ushort>))
			{
				WhitePoint_0 = whitePoint[0];
				WhitePoint_1 = whitePoint[1];
			}
			MaxMasteringLuminance = maxMasteringLuminance;
			MinMasteringLuminance = minMasteringLuminance;
			MaxContentLightLevel = maxContentLightLevel;
			MaxFrameAverageLightLevel = maxFrameAverageLightLevel;
		}


	}

}
