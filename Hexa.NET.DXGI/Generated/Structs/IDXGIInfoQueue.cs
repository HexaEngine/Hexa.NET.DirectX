// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXGI
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("d67441c7-672a-476f-9e82-cd55b44949ce")]
	public partial struct IDXGIInfoQueue : IComObject, IComObject<IDXGIInfoQueue>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("d67441c7-672a-476f-9e82-cd55b44949ce");

		public unsafe IDXGIInfoQueue (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(Guid* riid, void** ppvObject) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid*, void**, HResult>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(ref Guid riid, void** ppvObject) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface<T>(out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface<T>(ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint AddRef() 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint Release() 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetMessageCountLimit(Guid producer, ulong messageCountLimit) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong, HResult>)(LpVtbl[3]))(ptr, producer, messageCountLimit);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ClearStoredMessages(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, void>)(LpVtbl[4]))(ptr, producer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetMessageA(Guid producer, ulong messageIndex, InfoQueueMessage* pMessage, nuint* pMessageByteLength) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong, InfoQueueMessage*, nuint*, HResult>)(LpVtbl[5]))(ptr, producer, messageIndex, pMessage, pMessageByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetMessageA(Guid producer, ulong messageIndex, ref InfoQueueMessage pMessage, nuint* pMessageByteLength) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueMessage* ppMessage = &pMessage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong, InfoQueueMessage*, nuint*, HResult>)(LpVtbl[5]))(ptr, producer, messageIndex, (InfoQueueMessage*)ppMessage, pMessageByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetMessageA(Guid producer, ulong messageIndex, InfoQueueMessage* pMessage, ref nuint pMessageByteLength) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppMessageByteLength = &pMessageByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong, InfoQueueMessage*, nuint*, HResult>)(LpVtbl[5]))(ptr, producer, messageIndex, pMessage, (nuint*)ppMessageByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetMessageA(Guid producer, ulong messageIndex, ref InfoQueueMessage pMessage, ref nuint pMessageByteLength) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueMessage* ppMessage = &pMessage)
			{
				fixed (nuint* ppMessageByteLength = &pMessageByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong, InfoQueueMessage*, nuint*, HResult>)(LpVtbl[5]))(ptr, producer, messageIndex, (InfoQueueMessage*)ppMessage, (nuint*)ppMessageByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ulong GetNumStoredMessagesAllowedByRetrievalFilters(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong>)(LpVtbl[6]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ulong GetNumStoredMessages(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong>)(LpVtbl[7]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ulong GetNumMessagesDiscardedByMessageCountLimit(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong>)(LpVtbl[8]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ulong GetMessageCountLimit(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong>)(LpVtbl[9]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ulong GetNumMessagesAllowedByStorageFilter(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong>)(LpVtbl[10]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ulong GetNumMessagesDeniedByStorageFilter(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, ulong>)(LpVtbl[11]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddStorageFilterEntries(Guid producer, InfoQueueFilter* pFilter) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(LpVtbl[12]))(ptr, producer, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddStorageFilterEntries(Guid producer, ref InfoQueueFilter pFilter) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(LpVtbl[12]))(ptr, producer, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetStorageFilter(Guid producer, InfoQueueFilter* pFilter, nuint* pFilterByteLength) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[13]))(ptr, producer, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetStorageFilter(Guid producer, ref InfoQueueFilter pFilter, nuint* pFilterByteLength) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[13]))(ptr, producer, (InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetStorageFilter(Guid producer, InfoQueueFilter* pFilter, ref nuint pFilterByteLength) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[13]))(ptr, producer, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetStorageFilter(Guid producer, ref InfoQueueFilter pFilter, ref nuint pFilterByteLength) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[13]))(ptr, producer, (InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ClearStorageFilter(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, void>)(LpVtbl[14]))(ptr, producer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushEmptyStorageFilter(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, HResult>)(LpVtbl[15]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushDenyAllStorageFilter(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, HResult>)(LpVtbl[16]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushCopyOfStorageFilter(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, HResult>)(LpVtbl[17]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushStorageFilter(Guid producer, InfoQueueFilter* pFilter) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(LpVtbl[18]))(ptr, producer, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushStorageFilter(Guid producer, ref InfoQueueFilter pFilter) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(LpVtbl[18]))(ptr, producer, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void PopStorageFilter(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, void>)(LpVtbl[19]))(ptr, producer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetStorageFilterStackSize(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, uint>)(LpVtbl[20]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddRetrievalFilterEntries(Guid producer, InfoQueueFilter* pFilter) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(LpVtbl[21]))(ptr, producer, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddRetrievalFilterEntries(Guid producer, ref InfoQueueFilter pFilter) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(LpVtbl[21]))(ptr, producer, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetRetrievalFilter(Guid producer, InfoQueueFilter* pFilter, nuint* pFilterByteLength) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[22]))(ptr, producer, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetRetrievalFilter(Guid producer, ref InfoQueueFilter pFilter, nuint* pFilterByteLength) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[22]))(ptr, producer, (InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetRetrievalFilter(Guid producer, InfoQueueFilter* pFilter, ref nuint pFilterByteLength) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[22]))(ptr, producer, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetRetrievalFilter(Guid producer, ref InfoQueueFilter pFilter, ref nuint pFilterByteLength) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[22]))(ptr, producer, (InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ClearRetrievalFilter(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, void>)(LpVtbl[23]))(ptr, producer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushEmptyRetrievalFilter(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, HResult>)(LpVtbl[24]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushDenyAllRetrievalFilter(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, HResult>)(LpVtbl[25]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushCopyOfRetrievalFilter(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, HResult>)(LpVtbl[26]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushRetrievalFilter(Guid producer, InfoQueueFilter* pFilter) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(LpVtbl[27]))(ptr, producer, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushRetrievalFilter(Guid producer, ref InfoQueueFilter pFilter) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueFilter*, HResult>)(LpVtbl[27]))(ptr, producer, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void PopRetrievalFilter(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, void>)(LpVtbl[28]))(ptr, producer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetRetrievalFilterStackSize(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, uint>)(LpVtbl[29]))(ptr, producer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddMessage(Guid producer, InfoQueueMessageCategory category, InfoQueueMessageSeverity severity, int id, byte* pDescription) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageCategory, InfoQueueMessageSeverity, int, byte*, HResult>)(LpVtbl[30]))(ptr, producer, category, severity, id, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddMessage(Guid producer, InfoQueueMessageCategory category, InfoQueueMessageSeverity severity, int id, ReadOnlySpan<byte> pDescription) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppDescription = pDescription)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageCategory, InfoQueueMessageSeverity, int, byte*, HResult>)(LpVtbl[30]))(ptr, producer, category, severity, id, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddMessage(Guid producer, InfoQueueMessageCategory category, InfoQueueMessageSeverity severity, int id, string pDescription) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageCategory, InfoQueueMessageSeverity, int, byte*, HResult>)(LpVtbl[30]))(ptr, producer, category, severity, id, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddApplicationMessage(InfoQueueMessageSeverity severity, byte* pDescription) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, InfoQueueMessageSeverity, byte*, HResult>)(LpVtbl[31]))(ptr, severity, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddApplicationMessage(InfoQueueMessageSeverity severity, ReadOnlySpan<byte> pDescription) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppDescription = pDescription)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, InfoQueueMessageSeverity, byte*, HResult>)(LpVtbl[31]))(ptr, severity, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddApplicationMessage(InfoQueueMessageSeverity severity, string pDescription) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, InfoQueueMessageSeverity, byte*, HResult>)(LpVtbl[31]))(ptr, severity, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetBreakOnCategory(Guid producer, InfoQueueMessageCategory category, Bool32 bEnable) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageCategory, Bool32, HResult>)(LpVtbl[32]))(ptr, producer, category, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetBreakOnSeverity(Guid producer, InfoQueueMessageSeverity severity, Bool32 bEnable) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageSeverity, Bool32, HResult>)(LpVtbl[33]))(ptr, producer, severity, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetBreakOnID(Guid producer, int id, Bool32 bEnable) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, int, Bool32, HResult>)(LpVtbl[34]))(ptr, producer, id, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe Bool32 GetBreakOnCategory(Guid producer, InfoQueueMessageCategory category) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageCategory, Bool32>)(LpVtbl[35]))(ptr, producer, category);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe Bool32 GetBreakOnSeverity(Guid producer, InfoQueueMessageSeverity severity) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, InfoQueueMessageSeverity, Bool32>)(LpVtbl[36]))(ptr, producer, severity);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe Bool32 GetBreakOnID(Guid producer, int id) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, int, Bool32>)(LpVtbl[37]))(ptr, producer, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void SetMuteDebugOutput(Guid producer, Bool32 bMute) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, Bool32, void>)(LpVtbl[38]))(ptr, producer, bMute);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe Bool32 GetMuteDebugOutput(Guid producer) 
		{
			IDXGIInfoQueue* ptr = (IDXGIInfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIInfoQueue*, Guid, Bool32>)(LpVtbl[39]))(ptr, producer);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDXGIInfoQueue value)
		{
			return Unsafe.As<IDXGIInfoQueue, IUnknown>(ref value);
		}

	}

}
