// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXGI
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("ae02eedb-c735-4690-8d52-5a8dc20213aa")]
	public partial struct IDXGIOutput : IComObject, IComObject<IDXGIOutput>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("ae02eedb-c735-4690-8d52-5a8dc20213aa");

		public unsafe IDXGIOutput (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(Guid* riid, void** ppvObject) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(ref Guid riid, void** ppvObject) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface<T>(out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface<T>(ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint AddRef() 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint Release() 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateData(Guid* name, uint dataSize, void* pData) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint, void*, HResult>)(LpVtbl[3]))(ptr, name, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateData(ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint, void*, HResult>)(LpVtbl[3]))(ptr, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(Guid* name, IUnknown* pUnknown) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, IUnknown*, HResult>)(LpVtbl[4]))(ptr, name, pUnknown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, IUnknown*, HResult>)(LpVtbl[4]))(ptr, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, IUnknown*, HResult>)(LpVtbl[4]))(ptr, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, IUnknown*, HResult>)(LpVtbl[4]))(ptr, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, IUnknown*, HResult>)(LpVtbl[4]))(ptr, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, IUnknown*, HResult>)(LpVtbl[4]))(ptr, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData(Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(LpVtbl[5]))(ptr, name, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData(ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(LpVtbl[5]))(ptr, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData(Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(LpVtbl[5]))(ptr, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData(ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(LpVtbl[5]))(ptr, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData<T>(Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(LpVtbl[5]))(ptr, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData<T>(ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(LpVtbl[5]))(ptr, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData<T>(Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(LpVtbl[5]))(ptr, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData<T>(ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, uint*, void*, HResult>)(LpVtbl[5]))(ptr, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetParent(Guid* riid, void** ppParent) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, riid, ppParent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetParent(ref Guid riid, void** ppParent) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetParent<T>(out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppParent = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetParent<T>(ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDesc(OutputDesc* pDesc) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, OutputDesc*, HResult>)(LpVtbl[7]))(ptr, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDesc(ref OutputDesc pDesc) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (OutputDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, OutputDesc*, HResult>)(LpVtbl[7]))(ptr, (OutputDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDisplayModeList(Format enumFormat, uint flags, uint* pNumModes, ModeDesc* pDesc) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Format, uint, uint*, ModeDesc*, HResult>)(LpVtbl[8]))(ptr, enumFormat, flags, pNumModes, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDisplayModeList(Format enumFormat, uint flags, ref uint pNumModes, ModeDesc* pDesc) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumModes = &pNumModes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Format, uint, uint*, ModeDesc*, HResult>)(LpVtbl[8]))(ptr, enumFormat, flags, (uint*)ppNumModes, pDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDisplayModeList(Format enumFormat, uint flags, uint* pNumModes, ref ModeDesc pDesc) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ModeDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Format, uint, uint*, ModeDesc*, HResult>)(LpVtbl[8]))(ptr, enumFormat, flags, pNumModes, (ModeDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDisplayModeList(Format enumFormat, uint flags, ref uint pNumModes, ref ModeDesc pDesc) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumModes = &pNumModes)
			{
				fixed (ModeDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, Format, uint, uint*, ModeDesc*, HResult>)(LpVtbl[8]))(ptr, enumFormat, flags, (uint*)ppNumModes, (ModeDesc*)ppDesc);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult FindClosestMatchingMode(ModeDesc* pModeToMatch, ModeDesc* pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(LpVtbl[9]))(ptr, pModeToMatch, pClosestMatch, pConcernedDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult FindClosestMatchingMode(ref ModeDesc pModeToMatch, ModeDesc* pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(LpVtbl[9]))(ptr, (ModeDesc*)ppModeToMatch, pClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult FindClosestMatchingMode(ModeDesc* pModeToMatch, ref ModeDesc pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(LpVtbl[9]))(ptr, pModeToMatch, (ModeDesc*)ppClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult FindClosestMatchingMode(ref ModeDesc pModeToMatch, ref ModeDesc pClosestMatch, IUnknown* pConcernedDevice) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(LpVtbl[9]))(ptr, (ModeDesc*)ppModeToMatch, (ModeDesc*)ppClosestMatch, pConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult FindClosestMatchingMode(ModeDesc* pModeToMatch, ModeDesc* pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(LpVtbl[9]))(ptr, pModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult FindClosestMatchingMode(ModeDesc* pModeToMatch, ModeDesc* pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(LpVtbl[9]))(ptr, pModeToMatch, pClosestMatch, (IUnknown*)pConcernedDevice.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult FindClosestMatchingMode(ref ModeDesc pModeToMatch, ModeDesc* pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(LpVtbl[9]))(ptr, (ModeDesc*)ppModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult FindClosestMatchingMode(ref ModeDesc pModeToMatch, ModeDesc* pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(LpVtbl[9]))(ptr, (ModeDesc*)ppModeToMatch, pClosestMatch, (IUnknown*)pConcernedDevice.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult FindClosestMatchingMode(ModeDesc* pModeToMatch, ref ModeDesc pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(LpVtbl[9]))(ptr, pModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult FindClosestMatchingMode(ModeDesc* pModeToMatch, ref ModeDesc pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(LpVtbl[9]))(ptr, pModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)pConcernedDevice.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult FindClosestMatchingMode(ref ModeDesc pModeToMatch, ref ModeDesc pClosestMatch, ref IUnknown pConcernedDevice) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
				{
					fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(LpVtbl[9]))(ptr, (ModeDesc*)ppModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult FindClosestMatchingMode(ref ModeDesc pModeToMatch, ref ModeDesc pClosestMatch, ComPtr<IUnknown> pConcernedDevice) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (ModeDesc* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, ModeDesc*, ModeDesc*, IUnknown*, HResult>)(LpVtbl[9]))(ptr, (ModeDesc*)ppModeToMatch, (ModeDesc*)ppClosestMatch, (IUnknown*)pConcernedDevice.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult WaitForVBlank() 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, HResult>)(LpVtbl[10]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult TakeOwnership(IUnknown* pDevice, Bool32 exclusive) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IUnknown*, Bool32, HResult>)(LpVtbl[11]))(ptr, pDevice, exclusive);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult TakeOwnership(ref IUnknown pDevice, Bool32 exclusive) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IUnknown*, Bool32, HResult>)(LpVtbl[11]))(ptr, (IUnknown*)ppDevice, exclusive);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult TakeOwnership(ComPtr<IUnknown> pDevice, Bool32 exclusive) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IUnknown*, Bool32, HResult>)(LpVtbl[11]))(ptr, (IUnknown*)pDevice.Handle, exclusive);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ReleaseOwnership() 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIOutput*, void>)(LpVtbl[12]))(ptr);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetGammaControlCapabilities(GammaControlCapabilities* pGammaCaps) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, GammaControlCapabilities*, HResult>)(LpVtbl[13]))(ptr, pGammaCaps);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetGammaControlCapabilities(ref GammaControlCapabilities pGammaCaps) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (GammaControlCapabilities* ppGammaCaps = &pGammaCaps)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, GammaControlCapabilities*, HResult>)(LpVtbl[13]))(ptr, (GammaControlCapabilities*)ppGammaCaps);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetGammaControl(GammaControl* pArray) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, GammaControl*, HResult>)(LpVtbl[14]))(ptr, pArray);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetGammaControl(ref GammaControl pArray) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (GammaControl* ppArray = &pArray)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, GammaControl*, HResult>)(LpVtbl[14]))(ptr, (GammaControl*)ppArray);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetGammaControl(GammaControl* pArray) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, GammaControl*, HResult>)(LpVtbl[15]))(ptr, pArray);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetGammaControl(ref GammaControl pArray) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (GammaControl* ppArray = &pArray)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, GammaControl*, HResult>)(LpVtbl[15]))(ptr, (GammaControl*)ppArray);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetDisplaySurface(IDXGISurface* pScanoutSurface) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(LpVtbl[16]))(ptr, pScanoutSurface);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetDisplaySurface(ref IDXGISurface pScanoutSurface) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISurface* ppScanoutSurface = &pScanoutSurface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(LpVtbl[16]))(ptr, (IDXGISurface*)ppScanoutSurface);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetDisplaySurface(ComPtr<IDXGISurface> pScanoutSurface) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(LpVtbl[16]))(ptr, (IDXGISurface*)pScanoutSurface.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDisplaySurfaceData(IDXGISurface* pDestination) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(LpVtbl[17]))(ptr, pDestination);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDisplaySurfaceData(ref IDXGISurface pDestination) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISurface* ppDestination = &pDestination)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(LpVtbl[17]))(ptr, (IDXGISurface*)ppDestination);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDisplaySurfaceData(ComPtr<IDXGISurface> pDestination) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(LpVtbl[17]))(ptr, (IDXGISurface*)pDestination.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetFrameStatistics(FrameStatistics* pStats) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, FrameStatistics*, HResult>)(LpVtbl[18]))(ptr, pStats);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetFrameStatistics(ref FrameStatistics pStats) 
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (FrameStatistics* ppStats = &pStats)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, FrameStatistics*, HResult>)(LpVtbl[18]))(ptr, (FrameStatistics*)ppStats);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIObject (IDXGIOutput value)
		{
			return Unsafe.As<IDXGIOutput, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIOutput value)
		{
			return Unsafe.As<IDXGIOutput, IUnknown>(ref value);
		}

	}

}
