// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXGI
{
	public unsafe partial class DXGI
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int CreateDXGIFactoryNative(Guid* riid, void** ppFactory)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Guid*, void**, int>)funcTable[0])(riid, ppFactory);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[0])((nint)riid, (nint)ppFactory);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateDXGIFactory(Guid* riid, void** ppFactory)
		{
			int ret = CreateDXGIFactoryNative(riid, ppFactory);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateDXGIFactory(ref Guid riid, void** ppFactory)
		{
			fixed (Guid* priid = &riid)
			{
				int ret = CreateDXGIFactoryNative((Guid*)priid, ppFactory);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateDXGIFactory<T>(out ComPtr<T> ppFactory) where T : unmanaged, IComObject, IComObject<T>
		{
			ppFactory = default;
			int ret = CreateDXGIFactoryNative((Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppFactory.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateDXGIFactory<T>(ref Guid riid, out ComPtr<T> ppFactory) where T : unmanaged, IComObject, IComObject<T>
		{
			fixed (Guid* priid = &riid)
			{
				ppFactory = default;
				int ret = CreateDXGIFactoryNative((Guid*)priid, (void**)ppFactory.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int CreateDXGIFactory1Native(Guid* riid, void** ppFactory)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Guid*, void**, int>)funcTable[1])(riid, ppFactory);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[1])((nint)riid, (nint)ppFactory);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateDXGIFactory1(Guid* riid, void** ppFactory)
		{
			int ret = CreateDXGIFactory1Native(riid, ppFactory);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateDXGIFactory1(ref Guid riid, void** ppFactory)
		{
			fixed (Guid* priid = &riid)
			{
				int ret = CreateDXGIFactory1Native((Guid*)priid, ppFactory);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateDXGIFactory1<T>(out ComPtr<T> ppFactory) where T : unmanaged, IComObject, IComObject<T>
		{
			ppFactory = default;
			int ret = CreateDXGIFactory1Native((Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppFactory.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateDXGIFactory1<T>(ref Guid riid, out ComPtr<T> ppFactory) where T : unmanaged, IComObject, IComObject<T>
		{
			fixed (Guid* priid = &riid)
			{
				ppFactory = default;
				int ret = CreateDXGIFactory1Native((Guid*)priid, (void**)ppFactory.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int CreateDXGIFactory2Native(uint flags, Guid* riid, void** ppFactory)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, Guid*, void**, int>)funcTable[2])(flags, riid, ppFactory);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, nint, int>)funcTable[2])(flags, (nint)riid, (nint)ppFactory);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateDXGIFactory2(uint flags, Guid* riid, void** ppFactory)
		{
			int ret = CreateDXGIFactory2Native(flags, riid, ppFactory);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateDXGIFactory2(uint flags, ref Guid riid, void** ppFactory)
		{
			fixed (Guid* priid = &riid)
			{
				int ret = CreateDXGIFactory2Native(flags, (Guid*)priid, ppFactory);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateDXGIFactory2<T>(uint flags, out ComPtr<T> ppFactory) where T : unmanaged, IComObject, IComObject<T>
		{
			ppFactory = default;
			int ret = CreateDXGIFactory2Native(flags, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppFactory.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateDXGIFactory2<T>(uint flags, ref Guid riid, out ComPtr<T> ppFactory) where T : unmanaged, IComObject, IComObject<T>
		{
			fixed (Guid* priid = &riid)
			{
				ppFactory = default;
				int ret = CreateDXGIFactory2Native(flags, (Guid*)priid, (void**)ppFactory.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetDebugInterface1Native(uint flags, Guid* riid, void** pDebug)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, Guid*, void**, int>)funcTable[3])(flags, riid, pDebug);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, nint, int>)funcTable[3])(flags, (nint)riid, (nint)pDebug);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugInterface1(uint flags, Guid* riid, void** pDebug)
		{
			int ret = GetDebugInterface1Native(flags, riid, pDebug);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugInterface1(uint flags, ref Guid riid, void** pDebug)
		{
			fixed (Guid* priid = &riid)
			{
				int ret = GetDebugInterface1Native(flags, (Guid*)priid, pDebug);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugInterface1<T>(uint flags, out ComPtr<T> pDebug) where T : unmanaged, IComObject, IComObject<T>
		{
			pDebug = default;
			int ret = GetDebugInterface1Native(flags, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)pDebug.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugInterface1<T>(uint flags, ref Guid riid, out ComPtr<T> pDebug) where T : unmanaged, IComObject, IComObject<T>
		{
			fixed (Guid* priid = &riid)
			{
				pDebug = default;
				int ret = GetDebugInterface1Native(flags, (Guid*)priid, (void**)pDebug.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int DeclareAdapterRemovalSupportNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[4])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[4])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int DeclareAdapterRemovalSupport()
		{
			int ret = DeclareAdapterRemovalSupportNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int DisableVBlankVirtualizationNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[5])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[5])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int DisableVBlankVirtualization()
		{
			int ret = DisableVBlankVirtualizationNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetDebugInterfaceNative(Guid* riid, void** ppDebug)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Guid*, void**, int>)funcTable[6])(riid, ppDebug);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[6])((nint)riid, (nint)ppDebug);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugInterface(Guid* riid, void** ppDebug)
		{
			int ret = GetDebugInterfaceNative(riid, ppDebug);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugInterface(ref Guid riid, void** ppDebug)
		{
			fixed (Guid* priid = &riid)
			{
				int ret = GetDebugInterfaceNative((Guid*)priid, ppDebug);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugInterface<T>(out ComPtr<T> ppDebug) where T : unmanaged, IComObject, IComObject<T>
		{
			ppDebug = default;
			int ret = GetDebugInterfaceNative((Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppDebug.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugInterface<T>(ref Guid riid, out ComPtr<T> ppDebug) where T : unmanaged, IComObject, IComObject<T>
		{
			fixed (Guid* priid = &riid)
			{
				ppDebug = default;
				int ret = GetDebugInterfaceNative((Guid*)priid, (void**)ppDebug.GetAddressOf());
				return ret;
			}
		}

	}
}
