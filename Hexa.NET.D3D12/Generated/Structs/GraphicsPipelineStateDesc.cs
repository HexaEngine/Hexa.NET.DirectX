// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GraphicsPipelineStateDesc
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ID3D12RootSignature* PRootSignature;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ShaderBytecode VS;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ShaderBytecode PS;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ShaderBytecode DS;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ShaderBytecode HS;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ShaderBytecode GS;

		/// <summary>
		/// To be documented.
		/// </summary>
		public StreamOutputDesc StreamOutput;

		/// <summary>
		/// To be documented.
		/// </summary>
		public BlendDesc BlendState;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint SampleMask;

		/// <summary>
		/// To be documented.
		/// </summary>
		public RasterizerDesc RasterizerState;

		/// <summary>
		/// To be documented.
		/// </summary>
		public DepthStencilDesc DepthStencilState;

		/// <summary>
		/// To be documented.
		/// </summary>
		public InputLayoutDesc InputLayout;

		/// <summary>
		/// To be documented.
		/// </summary>
		public IndexBufferStripCutValue IBStripCutValue;

		/// <summary>
		/// To be documented.
		/// </summary>
		public PrimitiveTopologyType PrimitiveTopologyType;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NumRenderTargets;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Format RTVFormats_0;
		public Format RTVFormats_1;
		public Format RTVFormats_2;
		public Format RTVFormats_3;
		public Format RTVFormats_4;
		public Format RTVFormats_5;
		public Format RTVFormats_6;
		public Format RTVFormats_7;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Format DSVFormat;

		/// <summary>
		/// To be documented.
		/// </summary>
		public SampleDesc SampleDesc;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NodeMask;

		/// <summary>
		/// To be documented.
		/// </summary>
		public CachedPipelineState CachedPSO;

		/// <summary>
		/// To be documented.
		/// </summary>
		public PipelineStateFlags Flags;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe GraphicsPipelineStateDesc(ID3D12RootSignature* pRootSignature = default, ShaderBytecode vs = default, ShaderBytecode ps = default, ShaderBytecode ds = default, ShaderBytecode hs = default, ShaderBytecode gs = default, StreamOutputDesc streamOutput = default, BlendDesc blendState = default, uint sampleMask = default, RasterizerDesc rasterizerState = default, DepthStencilDesc depthStencilState = default, InputLayoutDesc inputLayout = default, IndexBufferStripCutValue ibStripCutValue = default, PrimitiveTopologyType primitiveTopologyType = default, uint numRenderTargets = default, Format* rtvFormats = default, Format dsvFormat = default, SampleDesc sampleDesc = default, uint nodeMask = default, CachedPipelineState cachedPso = default, PipelineStateFlags flags = default)
		{
			PRootSignature = pRootSignature;
			VS = vs;
			PS = ps;
			DS = ds;
			HS = hs;
			GS = gs;
			StreamOutput = streamOutput;
			BlendState = blendState;
			SampleMask = sampleMask;
			RasterizerState = rasterizerState;
			DepthStencilState = depthStencilState;
			InputLayout = inputLayout;
			IBStripCutValue = ibStripCutValue;
			PrimitiveTopologyType = primitiveTopologyType;
			NumRenderTargets = numRenderTargets;
			if (rtvFormats != default(Format*))
			{
				RTVFormats_0 = rtvFormats[0];
				RTVFormats_1 = rtvFormats[1];
				RTVFormats_2 = rtvFormats[2];
				RTVFormats_3 = rtvFormats[3];
				RTVFormats_4 = rtvFormats[4];
				RTVFormats_5 = rtvFormats[5];
				RTVFormats_6 = rtvFormats[6];
				RTVFormats_7 = rtvFormats[7];
			}
			DSVFormat = dsvFormat;
			SampleDesc = sampleDesc;
			NodeMask = nodeMask;
			CachedPSO = cachedPso;
			Flags = flags;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe GraphicsPipelineStateDesc(ID3D12RootSignature* pRootSignature = default, ShaderBytecode vs = default, ShaderBytecode ps = default, ShaderBytecode ds = default, ShaderBytecode hs = default, ShaderBytecode gs = default, StreamOutputDesc streamOutput = default, BlendDesc blendState = default, uint sampleMask = default, RasterizerDesc rasterizerState = default, DepthStencilDesc depthStencilState = default, InputLayoutDesc inputLayout = default, IndexBufferStripCutValue ibStripCutValue = default, PrimitiveTopologyType primitiveTopologyType = default, uint numRenderTargets = default, Span<Format> rtvFormats = default, Format dsvFormat = default, SampleDesc sampleDesc = default, uint nodeMask = default, CachedPipelineState cachedPso = default, PipelineStateFlags flags = default)
		{
			PRootSignature = pRootSignature;
			VS = vs;
			PS = ps;
			DS = ds;
			HS = hs;
			GS = gs;
			StreamOutput = streamOutput;
			BlendState = blendState;
			SampleMask = sampleMask;
			RasterizerState = rasterizerState;
			DepthStencilState = depthStencilState;
			InputLayout = inputLayout;
			IBStripCutValue = ibStripCutValue;
			PrimitiveTopologyType = primitiveTopologyType;
			NumRenderTargets = numRenderTargets;
			if (rtvFormats != default(Span<Format>))
			{
				RTVFormats_0 = rtvFormats[0];
				RTVFormats_1 = rtvFormats[1];
				RTVFormats_2 = rtvFormats[2];
				RTVFormats_3 = rtvFormats[3];
				RTVFormats_4 = rtvFormats[4];
				RTVFormats_5 = rtvFormats[5];
				RTVFormats_6 = rtvFormats[6];
				RTVFormats_7 = rtvFormats[7];
			}
			DSVFormat = dsvFormat;
			SampleDesc = sampleDesc;
			NodeMask = nodeMask;
			CachedPSO = cachedPso;
			Flags = flags;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Format> RTVFormats
		
		{
			get
			{
				fixed (Format* p = &this.RTVFormats_0)
				{
					return new Span<Format>(p, 8);
				}
			}
		}
	}

}
