// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("c64226a8-9201-46af-b4cc-53fb9ff7414f")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12PipelineLibrary")]
	public partial struct ID3D12PipelineLibrary : IComObject, IComObject<ID3D12PipelineLibrary>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c64226a8-9201-46af-b4cc-53fb9ff7414f");

		public unsafe ID3D12PipelineLibrary (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint AddRef() 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint Release() 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pDataSize")] [NativeName(NativeNameType.Type, "UINT*")] uint* pDataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, uint*, void*, int>)(LpVtbl[3]))(ptr, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pDataSize")] [NativeName(NativeNameType.Type, "UINT*")] uint* pDataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, uint*, void*, int>)(LpVtbl[3]))(ptr, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pDataSize")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pDataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, uint*, void*, int>)(LpVtbl[3]))(ptr, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pDataSize")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pDataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, uint*, void*, int>)(LpVtbl[3]))(ptr, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPrivateData<T>([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pDataSize")] [NativeName(NativeNameType.Type, "UINT*")] uint* pDataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, uint*, void*, int>)(LpVtbl[3]))(ptr, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPrivateData<T>([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pDataSize")] [NativeName(NativeNameType.Type, "UINT*")] uint* pDataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, uint*, void*, int>)(LpVtbl[3]))(ptr, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPrivateData<T>([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pDataSize")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pDataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, uint*, void*, int>)(LpVtbl[3]))(ptr, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPrivateData<T>([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pDataSize")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pDataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, uint*, void*, int>)(LpVtbl[3]))(ptr, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "DataSize")] [NativeName(NativeNameType.Type, "UINT")] uint dataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const void*")] void* pData) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, uint, void*, int>)(LpVtbl[4]))(ptr, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "DataSize")] [NativeName(NativeNameType.Type, "UINT")] uint dataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const void*")] void* pData) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, uint, void*, int>)(LpVtbl[4]))(ptr, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] IUnknown* pData) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, IUnknown*, int>)(LpVtbl[5]))(ptr, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] IUnknown* pData) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, IUnknown*, int>)(LpVtbl[5]))(ptr, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] ref IUnknown pData) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppData = &pData)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, IUnknown*, int>)(LpVtbl[5]))(ptr, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] ComPtr<IUnknown> pData) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, IUnknown*, int>)(LpVtbl[5]))(ptr, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] ref IUnknown pData) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, IUnknown*, int>)(LpVtbl[5]))(ptr, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] ComPtr<IUnknown> pData) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, IUnknown*, int>)(LpVtbl[5]))(ptr, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* name) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, int>)(LpVtbl[6]))(ptr, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> name) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* pname = name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, int>)(LpVtbl[6]))(ptr, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] string name) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, int>)(LpVtbl[6]))(ptr, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDevice")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDevice([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvDevice")] [NativeName(NativeNameType.Type, "void**")] void** ppvDevice) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, void**, int>)(LpVtbl[7]))(ptr, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDevice")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDevice([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvDevice")] [NativeName(NativeNameType.Type, "void**")] void** ppvDevice) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, void**, int>)(LpVtbl[7]))(ptr, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDevice")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDevice<T>([NativeName(NativeNameType.Param, "ppvDevice")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvDevice = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, void**, int>)(LpVtbl[7]))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDevice")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDevice<T>([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvDevice")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, void**, int>)(LpVtbl[7]))(ptr, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "StorePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int StorePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pPipeline")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ID3D12PipelineState* pPipeline) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, ID3D12PipelineState*, int>)(LpVtbl[8]))(ptr, pName, pPipeline);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "StorePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int StorePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pName, [NativeName(NativeNameType.Param, "pPipeline")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ID3D12PipelineState* pPipeline) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppName = pName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, ID3D12PipelineState*, int>)(LpVtbl[8]))(ptr, (char*)ppName, pPipeline);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "StorePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int StorePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pName, [NativeName(NativeNameType.Param, "pPipeline")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ID3D12PipelineState* pPipeline) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, ID3D12PipelineState*, int>)(LpVtbl[8]))(ptr, pStr0, pPipeline);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "StorePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int StorePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pPipeline")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ref ID3D12PipelineState pPipeline) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12PipelineState* ppPipeline = &pPipeline)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, ID3D12PipelineState*, int>)(LpVtbl[8]))(ptr, pName, (ID3D12PipelineState*)ppPipeline);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "StorePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int StorePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pPipeline")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ComPtr<ID3D12PipelineState> pPipeline) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, ID3D12PipelineState*, int>)(LpVtbl[8]))(ptr, pName, (ID3D12PipelineState*)pPipeline.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "StorePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int StorePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pName, [NativeName(NativeNameType.Param, "pPipeline")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ref ID3D12PipelineState pPipeline) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppName = pName)
			{
				fixed (ID3D12PipelineState* ppPipeline = &pPipeline)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, ID3D12PipelineState*, int>)(LpVtbl[8]))(ptr, (char*)ppName, (ID3D12PipelineState*)ppPipeline);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "StorePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int StorePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pName, [NativeName(NativeNameType.Param, "pPipeline")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ref ID3D12PipelineState pPipeline) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3D12PipelineState* ppPipeline = &pPipeline)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, ID3D12PipelineState*, int>)(LpVtbl[8]))(ptr, pStr0, (ID3D12PipelineState*)ppPipeline);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] D3D12GraphicsPipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, pName, pDesc, riid, ppPipelineState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] D3D12GraphicsPipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppName = pName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, (char*)ppName, pDesc, riid, ppPipelineState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] D3D12GraphicsPipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, pStr0, pDesc, riid, ppPipelineState);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] ref D3D12GraphicsPipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, pName, (D3D12GraphicsPipelineStateDesc*)ppDesc, riid, ppPipelineState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] ref D3D12GraphicsPipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppName = pName)
			{
				fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, (char*)ppName, (D3D12GraphicsPipelineStateDesc*)ppDesc, riid, ppPipelineState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] ref D3D12GraphicsPipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, pStr0, (D3D12GraphicsPipelineStateDesc*)ppDesc, riid, ppPipelineState);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] D3D12GraphicsPipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, pName, pDesc, (Guid*)priid, ppPipelineState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] D3D12GraphicsPipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppName = pName)
			{
				fixed (Guid* priid = &riid)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, (char*)ppName, pDesc, (Guid*)priid, ppPipelineState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] D3D12GraphicsPipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, pStr0, pDesc, (Guid*)priid, ppPipelineState);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] ref D3D12GraphicsPipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, pName, (D3D12GraphicsPipelineStateDesc*)ppDesc, (Guid*)priid, ppPipelineState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] ref D3D12GraphicsPipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppName = pName)
			{
				fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
				{
					fixed (Guid* priid = &riid)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, (char*)ppName, (D3D12GraphicsPipelineStateDesc*)ppDesc, (Guid*)priid, ppPipelineState);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] ref D3D12GraphicsPipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, pStr0, (D3D12GraphicsPipelineStateDesc*)ppDesc, (Guid*)priid, ppPipelineState);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline<T>([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] D3D12GraphicsPipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppPipelineState) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppPipelineState = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, pName, pDesc, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppPipelineState.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline<T>([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] ref D3D12GraphicsPipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppPipelineState) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
			{
				ppPipelineState = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, pName, (D3D12GraphicsPipelineStateDesc*)ppDesc, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppPipelineState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline<T>([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] D3D12GraphicsPipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppPipelineState) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppPipelineState = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, pName, pDesc, (Guid*)priid, (void**)ppPipelineState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadGraphicsPipeline<T>([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] ref D3D12GraphicsPipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppPipelineState) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					ppPipelineState = default;
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, int>)(LpVtbl[9]))(ptr, pName, (D3D12GraphicsPipelineStateDesc*)ppDesc, (Guid*)priid, (void**)ppPipelineState.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] D3D12ComputePipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, pName, pDesc, riid, ppPipelineState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] D3D12ComputePipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppName = pName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, (char*)ppName, pDesc, riid, ppPipelineState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] D3D12ComputePipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, pStr0, pDesc, riid, ppPipelineState);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] ref D3D12ComputePipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, pName, (D3D12ComputePipelineStateDesc*)ppDesc, riid, ppPipelineState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] ref D3D12ComputePipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppName = pName)
			{
				fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, (char*)ppName, (D3D12ComputePipelineStateDesc*)ppDesc, riid, ppPipelineState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] ref D3D12ComputePipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, pStr0, (D3D12ComputePipelineStateDesc*)ppDesc, riid, ppPipelineState);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] D3D12ComputePipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, pName, pDesc, (Guid*)priid, ppPipelineState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] D3D12ComputePipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppName = pName)
			{
				fixed (Guid* priid = &riid)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, (char*)ppName, pDesc, (Guid*)priid, ppPipelineState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] D3D12ComputePipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, pStr0, pDesc, (Guid*)priid, ppPipelineState);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] ref D3D12ComputePipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, pName, (D3D12ComputePipelineStateDesc*)ppDesc, (Guid*)priid, ppPipelineState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] ref D3D12ComputePipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* ppName = pName)
			{
				fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
				{
					fixed (Guid* priid = &riid)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, (char*)ppName, (D3D12ComputePipelineStateDesc*)ppDesc, (Guid*)priid, ppPipelineState);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] ref D3D12ComputePipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, pStr0, (D3D12ComputePipelineStateDesc*)ppDesc, (Guid*)priid, ppPipelineState);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline<T>([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] D3D12ComputePipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppPipelineState) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppPipelineState = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, pName, pDesc, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppPipelineState.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline<T>([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] ref D3D12ComputePipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppPipelineState) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
			{
				ppPipelineState = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, pName, (D3D12ComputePipelineStateDesc*)ppDesc, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppPipelineState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline<T>([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] D3D12ComputePipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppPipelineState) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppPipelineState = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, pName, pDesc, (Guid*)priid, (void**)ppPipelineState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int LoadComputePipeline<T>([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] ref D3D12ComputePipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppPipelineState) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					ppPipelineState = default;
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, int>)(LpVtbl[10]))(ptr, pName, (D3D12ComputePipelineStateDesc*)ppDesc, (Guid*)priid, (void**)ppPipelineState.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetSerializedSize")]
		[return: NativeName(NativeNameType.Type, "SIZE_T")]
		public readonly unsafe nuint GetSerializedSize() 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			nuint ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, nuint>)(LpVtbl[11]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Serialize")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Serialize([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "DataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint dataSizeInBytes) 
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, void*, nuint, int>)(LpVtbl[12]))(ptr, pData, dataSizeInBytes);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Serialize")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Serialize<T>([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] ComPtr<T> pData, [NativeName(NativeNameType.Param, "DataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint dataSizeInBytes) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, void*, nuint, int>)(LpVtbl[12]))(ptr, (void*)pData.Handle, dataSizeInBytes);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12PipelineLibrary value)
		{
			return Unsafe.As<ID3D12PipelineLibrary, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12PipelineLibrary value)
		{
			return Unsafe.As<ID3D12PipelineLibrary, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12PipelineLibrary value)
		{
			return Unsafe.As<ID3D12PipelineLibrary, IUnknown>(ref value);
		}

	}

}
