// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("0ec870a6-5d7e-4c22-8cfc-5baae07616ed")]
	public partial struct ID3D12CommandQueue : IComObject, IComObject<ID3D12CommandQueue>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("0ec870a6-5d7e-4c22-8cfc-5baae07616ed");

		public unsafe ID3D12CommandQueue (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(Guid* riid, void** ppvObject) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(ref Guid riid, void** ppvObject) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface<T>(out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface<T>(ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint AddRef() 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint Release() 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(LpVtbl[3]))(ptr, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData(ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(LpVtbl[3]))(ptr, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData(Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(LpVtbl[3]))(ptr, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData(ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(LpVtbl[3]))(ptr, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData<T>(Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(LpVtbl[3]))(ptr, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData<T>(ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(LpVtbl[3]))(ptr, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData<T>(Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(LpVtbl[3]))(ptr, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData<T>(ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(LpVtbl[3]))(ptr, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateData(Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint, void*, HResult>)(LpVtbl[4]))(ptr, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateData(ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint, void*, HResult>)(LpVtbl[4]))(ptr, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, IUnknown*, HResult>)(LpVtbl[5]))(ptr, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(ref Guid guid, IUnknown* pData) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, IUnknown*, HResult>)(LpVtbl[5]))(ptr, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(Guid* guid, ref IUnknown pData) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, IUnknown*, HResult>)(LpVtbl[5]))(ptr, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, IUnknown*, HResult>)(LpVtbl[5]))(ptr, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(ref Guid guid, ref IUnknown pData) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, IUnknown*, HResult>)(LpVtbl[5]))(ptr, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, IUnknown*, HResult>)(LpVtbl[5]))(ptr, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetName(char* name) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, char*, HResult>)(LpVtbl[6]))(ptr, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetName(ReadOnlySpan<char> name) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, char*, HResult>)(LpVtbl[6]))(ptr, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetName(string name) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, char*, HResult>)(LpVtbl[6]))(ptr, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDevice(Guid* riid, void** ppvDevice) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDevice(ref Guid riid, void** ppvDevice) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDevice<T>(out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDevice<T>(ref Guid riid, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
								{
									fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
									{
										((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UpdateTileMappings(ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(LpVtbl[8]))(ptr, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, pSrcRegionStartCoordinate, pRegionSize, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, pDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, pSrcRegionStartCoordinate, pRegionSize, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, pSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, pSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, pDstRegionStartCoordinate, pSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, pSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, pDstRegionStartCoordinate, pSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, pDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
					{
						fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppRegionSize = &pRegionSize)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppRegionSize = &pRegionSize)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				fixed (TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppRegionSize = &pRegionSize)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileRegionSize* ppRegionSize = &pRegionSize)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, pDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
					{
						fixed (TileRegionSize* ppRegionSize = &pRegionSize)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, pSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
			{
				fixed (TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, pDstRegionStartCoordinate, pSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					fixed (TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, pSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
			{
				fixed (TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, pDstRegionStartCoordinate, pSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					fixed (TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						fixed (TileRegionSize* ppRegionSize = &pRegionSize)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					fixed (TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					fixed (TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
			{
				fixed (TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						fixed (TileRegionSize* ppRegionSize = &pRegionSize)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
			{
				fixed (TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, pDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						fixed (TileRegionSize* ppRegionSize = &pRegionSize)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					fixed (TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, pDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
					{
						fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
						{
							fixed (TileRegionSize* ppRegionSize = &pRegionSize)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CopyTileMappings(ComPtr<ID3D12Resource> pDstResource, ref TiledResourceCoordinate pDstRegionStartCoordinate, ComPtr<ID3D12Resource> pSrcResource, ref TiledResourceCoordinate pSrcRegionStartCoordinate, ref TileRegionSize pRegionSize, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					fixed (TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)pDstResource.Handle, (TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)pSrcResource.Handle, (TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ExecuteCommandLists(uint numCommandLists, ID3D12CommandList** ppCommandLists) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint, ID3D12CommandList**, void>)(LpVtbl[10]))(ptr, numCommandLists, ppCommandLists);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ExecuteCommandLists(uint numCommandLists, ref ID3D12CommandList* ppCommandLists) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandList** pppCommandLists = &ppCommandLists)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint, ID3D12CommandList**, void>)(LpVtbl[10]))(ptr, numCommandLists, (ID3D12CommandList**)pppCommandLists);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ExecuteCommandLists(uint numCommandLists, ComPtr<ID3D12CommandList> ppCommandLists) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint, ID3D12CommandList**, void>)(LpVtbl[10]))(ptr, numCommandLists, (ID3D12CommandList**)ppCommandLists.Handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void SetMarker(uint metadata, void* pData, uint size) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint, void*, uint, void>)(LpVtbl[11]))(ptr, metadata, pData, size);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void BeginEvent(uint metadata, void* pData, uint size) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint, void*, uint, void>)(LpVtbl[12]))(ptr, metadata, pData, size);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void EndEvent() 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, void>)(LpVtbl[13]))(ptr);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult Signal(ID3D12Fence* pFence, ulong value) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[14]))(ptr, pFence, value);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult Signal(ref ID3D12Fence pFence, ulong value) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Fence* ppFence = &pFence)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[14]))(ptr, (ID3D12Fence*)ppFence, value);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult Signal(ComPtr<ID3D12Fence> pFence, ulong value) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[14]))(ptr, (ID3D12Fence*)pFence.Handle, value);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult Wait(ID3D12Fence* pFence, ulong value) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[15]))(ptr, pFence, value);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult Wait(ref ID3D12Fence pFence, ulong value) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Fence* ppFence = &pFence)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[15]))(ptr, (ID3D12Fence*)ppFence, value);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult Wait(ComPtr<ID3D12Fence> pFence, ulong value) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[15]))(ptr, (ID3D12Fence*)pFence.Handle, value);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetTimestampFrequency(ulong* pFrequency) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, HResult>)(LpVtbl[16]))(ptr, pFrequency);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetTimestampFrequency(ref ulong pFrequency) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppFrequency = &pFrequency)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, HResult>)(LpVtbl[16]))(ptr, (ulong*)ppFrequency);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetClockCalibration(ulong* pGpuTimestamp, ulong* pCpuTimestamp) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, ulong*, HResult>)(LpVtbl[17]))(ptr, pGpuTimestamp, pCpuTimestamp);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetClockCalibration(ref ulong pGpuTimestamp, ulong* pCpuTimestamp) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppGpuTimestamp = &pGpuTimestamp)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, ulong*, HResult>)(LpVtbl[17]))(ptr, (ulong*)ppGpuTimestamp, pCpuTimestamp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetClockCalibration(ulong* pGpuTimestamp, ref ulong pCpuTimestamp) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppCpuTimestamp = &pCpuTimestamp)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, ulong*, HResult>)(LpVtbl[17]))(ptr, pGpuTimestamp, (ulong*)ppCpuTimestamp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetClockCalibration(ref ulong pGpuTimestamp, ref ulong pCpuTimestamp) 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppGpuTimestamp = &pGpuTimestamp)
			{
				fixed (ulong* ppCpuTimestamp = &pCpuTimestamp)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, ulong*, HResult>)(LpVtbl[17]))(ptr, (ulong*)ppGpuTimestamp, (ulong*)ppCpuTimestamp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe CommandQueueDesc GetDesc() 
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			CommandQueueDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, CommandQueueDesc>)(LpVtbl[18]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12CommandQueue value)
		{
			return Unsafe.As<ID3D12CommandQueue, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12CommandQueue value)
		{
			return Unsafe.As<ID3D12CommandQueue, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12CommandQueue value)
		{
			return Unsafe.As<ID3D12CommandQueue, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12CommandQueue value)
		{
			return Unsafe.As<ID3D12CommandQueue, IUnknown>(ref value);
		}

	}

}
