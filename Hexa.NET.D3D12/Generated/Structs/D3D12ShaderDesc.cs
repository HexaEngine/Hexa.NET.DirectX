// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_D3D12_SHADER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ShaderDesc
	{
		/// <summary>
		/// Shader version<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Version")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Version;

		/// <summary>
		/// Creator string<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Creator")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Creator;

		/// <summary>
		/// Shader compilation/parse flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Flags;

		/// <summary>
		/// Number of constant buffers<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConstantBuffers")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ConstantBuffers;

		/// <summary>
		/// Number of bound resources<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BoundResources")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BoundResources;

		/// <summary>
		/// Number of parameters in the input signature<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InputParameters")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InputParameters;

		/// <summary>
		/// Number of parameters in the output signature<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OutputParameters")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutputParameters;

		/// <summary>
		/// Number of emitted instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InstructionCount;

		/// <summary>
		/// Number of temporary registers used <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempRegisterCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TempRegisterCount;

		/// <summary>
		/// Number of temporary arrays used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempArrayCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TempArrayCount;

		/// <summary>
		/// Number of constant defines <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DefCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DefCount;

		/// <summary>
		/// Number of declarations (input + output)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DclCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DclCount;

		/// <summary>
		/// Number of non-categorized texture instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureNormalInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureNormalInstructions;

		/// <summary>
		/// Number of texture load instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureLoadInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureLoadInstructions;

		/// <summary>
		/// Number of texture comparison instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureCompInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureCompInstructions;

		/// <summary>
		/// Number of texture bias instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureBiasInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureBiasInstructions;

		/// <summary>
		/// Number of texture gradient instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureGradientInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureGradientInstructions;

		/// <summary>
		/// Number of floating point arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FloatInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FloatInstructionCount;

		/// <summary>
		/// Number of signed integer arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IntInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint IntInstructionCount;

		/// <summary>
		/// Number of unsigned integer arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UintInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UintInstructionCount;

		/// <summary>
		/// Number of static flow control instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StaticFlowControlCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StaticFlowControlCount;

		/// <summary>
		/// Number of dynamic flow control instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DynamicFlowControlCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DynamicFlowControlCount;

		/// <summary>
		/// Number of macro instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MacroInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MacroInstructionCount;

		/// <summary>
		/// Number of array instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ArrayInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArrayInstructionCount;

		/// <summary>
		/// Number of cut instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CutInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CutInstructionCount;

		/// <summary>
		/// Number of emit instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EmitInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint EmitInstructionCount;

		/// <summary>
		/// Geometry shader output topology<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GSOutputTopology")]
		[NativeName(NativeNameType.Type, "D3D_PRIMITIVE_TOPOLOGY")]
		public D3D12PrimitiveTopology GSOutputTopology;

		/// <summary>
		/// Geometry shader maximum output vertex count<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GSMaxOutputVertexCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint GSMaxOutputVertexCount;

		/// <summary>
		/// GS/HS input primitive<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InputPrimitive")]
		[NativeName(NativeNameType.Type, "D3D_PRIMITIVE")]
		public D3DPrimitive InputPrimitive;

		/// <summary>
		/// Number of parameters in the patch constant signature<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PatchConstantParameters")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PatchConstantParameters;

		/// <summary>
		/// Number of Geometry shader instances<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cGSInstanceCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CGSInstanceCount;

		/// <summary>
		/// Number of control points in the HS->DS stage<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cControlPoints")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CControlPoints;

		/// <summary>
		/// Primitive output by the tessellator<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HSOutputPrimitive")]
		[NativeName(NativeNameType.Type, "D3D_TESSELLATOR_OUTPUT_PRIMITIVE")]
		public D3DTessellatorOutputPrimitive HSOutputPrimitive;

		/// <summary>
		/// Partitioning mode of the tessellator<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HSPartitioning")]
		[NativeName(NativeNameType.Type, "D3D_TESSELLATOR_PARTITIONING")]
		public D3DTessellatorPartitioning HSPartitioning;

		/// <summary>
		/// Domain of the tessellator (quad, tri, isoline)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TessellatorDomain")]
		[NativeName(NativeNameType.Type, "D3D_TESSELLATOR_DOMAIN")]
		public D3DTessellatorDomain TessellatorDomain;

		/// <summary>
		/// Number of barrier instructions in a compute shader<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cBarrierInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CBarrierInstructions;

		/// <summary>
		/// Number of interlocked instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cInterlockedInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CInterlockedInstructions;

		/// <summary>
		/// Number of texture writes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cTextureStoreInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CTextureStoreInstructions;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe D3D12ShaderDesc(uint version = default, byte* creator = default, uint flags = default, uint constantBuffers = default, uint boundResources = default, uint inputParameters = default, uint outputParameters = default, uint instructionCount = default, uint tempRegisterCount = default, uint tempArrayCount = default, uint defCount = default, uint dclCount = default, uint textureNormalInstructions = default, uint textureLoadInstructions = default, uint textureCompInstructions = default, uint textureBiasInstructions = default, uint textureGradientInstructions = default, uint floatInstructionCount = default, uint intInstructionCount = default, uint uintInstructionCount = default, uint staticFlowControlCount = default, uint dynamicFlowControlCount = default, uint macroInstructionCount = default, uint arrayInstructionCount = default, uint cutInstructionCount = default, uint emitInstructionCount = default, D3D12PrimitiveTopology gsOutputTopology = default, uint gsMaxOutputVertexCount = default, D3DPrimitive inputPrimitive = default, uint patchConstantParameters = default, uint cGSInstanceCount = default, uint cControlPoints = default, D3DTessellatorOutputPrimitive hsOutputPrimitive = default, D3DTessellatorPartitioning hsPartitioning = default, D3DTessellatorDomain tessellatorDomain = default, uint cBarrierInstructions = default, uint cInterlockedInstructions = default, uint cTextureStoreInstructions = default)
		{
			Version = version;
			Creator = creator;
			Flags = flags;
			ConstantBuffers = constantBuffers;
			BoundResources = boundResources;
			InputParameters = inputParameters;
			OutputParameters = outputParameters;
			InstructionCount = instructionCount;
			TempRegisterCount = tempRegisterCount;
			TempArrayCount = tempArrayCount;
			DefCount = defCount;
			DclCount = dclCount;
			TextureNormalInstructions = textureNormalInstructions;
			TextureLoadInstructions = textureLoadInstructions;
			TextureCompInstructions = textureCompInstructions;
			TextureBiasInstructions = textureBiasInstructions;
			TextureGradientInstructions = textureGradientInstructions;
			FloatInstructionCount = floatInstructionCount;
			IntInstructionCount = intInstructionCount;
			UintInstructionCount = uintInstructionCount;
			StaticFlowControlCount = staticFlowControlCount;
			DynamicFlowControlCount = dynamicFlowControlCount;
			MacroInstructionCount = macroInstructionCount;
			ArrayInstructionCount = arrayInstructionCount;
			CutInstructionCount = cutInstructionCount;
			EmitInstructionCount = emitInstructionCount;
			GSOutputTopology = gsOutputTopology;
			GSMaxOutputVertexCount = gsMaxOutputVertexCount;
			InputPrimitive = inputPrimitive;
			PatchConstantParameters = patchConstantParameters;
			CGSInstanceCount = cGSInstanceCount;
			CControlPoints = cControlPoints;
			HSOutputPrimitive = hsOutputPrimitive;
			HSPartitioning = hsPartitioning;
			TessellatorDomain = tessellatorDomain;
			CBarrierInstructions = cBarrierInstructions;
			CInterlockedInstructions = cInterlockedInstructions;
			CTextureStoreInstructions = cTextureStoreInstructions;
		}


	}

}
