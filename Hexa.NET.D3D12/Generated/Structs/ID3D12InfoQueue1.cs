// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("2852dd88-b484-4c0c-b6b1-67168500e600")]
	public partial struct ID3D12InfoQueue1 : IComObject, IComObject<ID3D12InfoQueue1>, IComObject<ID3D12InfoQueue>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("2852dd88-b484-4c0c-b6b1-67168500e600");

		public unsafe ID3D12InfoQueue1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(Guid* riid, void** ppvObject) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, Guid*, void**, HResult>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(ref Guid riid, void** ppvObject) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface<T>(out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface<T>(ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint AddRef() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint Release() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetMessageCountLimit(ulong messageCountLimit) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong, HResult>)(LpVtbl[3]))(ptr, messageCountLimit);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ClearStoredMessages() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(LpVtbl[4]))(ptr);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetMessageA(ulong messageIndex, Message* pMessage, nuint* pMessageByteLength) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong, Message*, nuint*, HResult>)(LpVtbl[5]))(ptr, messageIndex, pMessage, pMessageByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetMessageA(ulong messageIndex, ref Message pMessage, nuint* pMessageByteLength) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Message* ppMessage = &pMessage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong, Message*, nuint*, HResult>)(LpVtbl[5]))(ptr, messageIndex, (Message*)ppMessage, pMessageByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetMessageA(ulong messageIndex, Message* pMessage, ref nuint pMessageByteLength) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppMessageByteLength = &pMessageByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong, Message*, nuint*, HResult>)(LpVtbl[5]))(ptr, messageIndex, pMessage, (nuint*)ppMessageByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetMessageA(ulong messageIndex, ref Message pMessage, ref nuint pMessageByteLength) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Message* ppMessage = &pMessage)
			{
				fixed (nuint* ppMessageByteLength = &pMessageByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong, Message*, nuint*, HResult>)(LpVtbl[5]))(ptr, messageIndex, (Message*)ppMessage, (nuint*)ppMessageByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ulong GetNumMessagesAllowedByStorageFilter() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(LpVtbl[6]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ulong GetNumMessagesDeniedByStorageFilter() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(LpVtbl[7]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ulong GetNumStoredMessages() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(LpVtbl[8]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ulong GetNumStoredMessagesAllowedByRetrievalFilter() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(LpVtbl[9]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ulong GetNumMessagesDiscardedByMessageCountLimit() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(LpVtbl[10]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ulong GetMessageCountLimit() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(LpVtbl[11]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddStorageFilterEntries(InfoQueueFilter* pFilter) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, HResult>)(LpVtbl[12]))(ptr, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddStorageFilterEntries(ref InfoQueueFilter pFilter) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, HResult>)(LpVtbl[12]))(ptr, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetStorageFilter(InfoQueueFilter* pFilter, nuint* pFilterByteLength) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[13]))(ptr, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetStorageFilter(ref InfoQueueFilter pFilter, nuint* pFilterByteLength) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[13]))(ptr, (InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetStorageFilter(InfoQueueFilter* pFilter, ref nuint pFilterByteLength) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[13]))(ptr, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetStorageFilter(ref InfoQueueFilter pFilter, ref nuint pFilterByteLength) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[13]))(ptr, (InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ClearStorageFilter() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(LpVtbl[14]))(ptr);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushEmptyStorageFilter() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, HResult>)(LpVtbl[15]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushCopyOfStorageFilter() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, HResult>)(LpVtbl[16]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushStorageFilter(InfoQueueFilter* pFilter) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, HResult>)(LpVtbl[17]))(ptr, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushStorageFilter(ref InfoQueueFilter pFilter) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, HResult>)(LpVtbl[17]))(ptr, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void PopStorageFilter() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(LpVtbl[18]))(ptr);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetStorageFilterStackSize() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint>)(LpVtbl[19]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddRetrievalFilterEntries(InfoQueueFilter* pFilter) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, HResult>)(LpVtbl[20]))(ptr, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddRetrievalFilterEntries(ref InfoQueueFilter pFilter) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, HResult>)(LpVtbl[20]))(ptr, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetRetrievalFilter(InfoQueueFilter* pFilter, nuint* pFilterByteLength) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[21]))(ptr, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetRetrievalFilter(ref InfoQueueFilter pFilter, nuint* pFilterByteLength) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[21]))(ptr, (InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetRetrievalFilter(InfoQueueFilter* pFilter, ref nuint pFilterByteLength) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[21]))(ptr, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetRetrievalFilter(ref InfoQueueFilter pFilter, ref nuint pFilterByteLength) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, HResult>)(LpVtbl[21]))(ptr, (InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ClearRetrievalFilter() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(LpVtbl[22]))(ptr);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushEmptyRetrievalFilter() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, HResult>)(LpVtbl[23]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushCopyOfRetrievalFilter() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, HResult>)(LpVtbl[24]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushRetrievalFilter(InfoQueueFilter* pFilter) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, HResult>)(LpVtbl[25]))(ptr, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PushRetrievalFilter(ref InfoQueueFilter pFilter) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, HResult>)(LpVtbl[25]))(ptr, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void PopRetrievalFilter() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(LpVtbl[26]))(ptr);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetRetrievalFilterStackSize() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint>)(LpVtbl[27]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddMessage(MessageCategory category, MessageSeverity severity, MessageId id, byte* pDescription) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageCategory, MessageSeverity, MessageId, byte*, HResult>)(LpVtbl[28]))(ptr, category, severity, id, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddMessage(MessageCategory category, MessageSeverity severity, MessageId id, ReadOnlySpan<byte> pDescription) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppDescription = pDescription)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageCategory, MessageSeverity, MessageId, byte*, HResult>)(LpVtbl[28]))(ptr, category, severity, id, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddMessage(MessageCategory category, MessageSeverity severity, MessageId id, string pDescription) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageCategory, MessageSeverity, MessageId, byte*, HResult>)(LpVtbl[28]))(ptr, category, severity, id, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddApplicationMessage(MessageSeverity severity, byte* pDescription) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageSeverity, byte*, HResult>)(LpVtbl[29]))(ptr, severity, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddApplicationMessage(MessageSeverity severity, ReadOnlySpan<byte> pDescription) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppDescription = pDescription)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageSeverity, byte*, HResult>)(LpVtbl[29]))(ptr, severity, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult AddApplicationMessage(MessageSeverity severity, string pDescription) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageSeverity, byte*, HResult>)(LpVtbl[29]))(ptr, severity, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetBreakOnCategory(MessageCategory category, Bool32 bEnable) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageCategory, Bool32, HResult>)(LpVtbl[30]))(ptr, category, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetBreakOnSeverity(MessageSeverity severity, Bool32 bEnable) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageSeverity, Bool32, HResult>)(LpVtbl[31]))(ptr, severity, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetBreakOnID(MessageId id, Bool32 bEnable) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageId, Bool32, HResult>)(LpVtbl[32]))(ptr, id, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe Bool32 GetBreakOnCategory(MessageCategory category) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Bool32 ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageCategory, Bool32>)(LpVtbl[33]))(ptr, category);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe Bool32 GetBreakOnSeverity(MessageSeverity severity) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Bool32 ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageSeverity, Bool32>)(LpVtbl[34]))(ptr, severity);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe Bool32 GetBreakOnID(MessageId id) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Bool32 ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageId, Bool32>)(LpVtbl[35]))(ptr, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void SetMuteDebugOutput(Bool32 bMute) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, Bool32, void>)(LpVtbl[36]))(ptr, bMute);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe Bool32 GetMuteDebugOutput() 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Bool32 ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, Bool32>)(LpVtbl[37]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult RegisterMessageCallback(MessageFunc callbackFunc, MessageCallbackFlags callbackFilterFlags, void* pContext, uint* pCallbackCookie) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageFunc, MessageCallbackFlags, void*, uint*, HResult>)(LpVtbl[38]))(ptr, callbackFunc, callbackFilterFlags, pContext, pCallbackCookie);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult RegisterMessageCallback<T>(MessageFunc callbackFunc, MessageCallbackFlags callbackFilterFlags, ComPtr<T> pContext, uint* pCallbackCookie) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageFunc, MessageCallbackFlags, void*, uint*, HResult>)(LpVtbl[38]))(ptr, callbackFunc, callbackFilterFlags, (void*)pContext.Handle, pCallbackCookie);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult RegisterMessageCallback(MessageFunc callbackFunc, MessageCallbackFlags callbackFilterFlags, void* pContext, ref uint pCallbackCookie) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppCallbackCookie = &pCallbackCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageFunc, MessageCallbackFlags, void*, uint*, HResult>)(LpVtbl[38]))(ptr, callbackFunc, callbackFilterFlags, pContext, (uint*)ppCallbackCookie);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult RegisterMessageCallback<T>(MessageFunc callbackFunc, MessageCallbackFlags callbackFilterFlags, ComPtr<T> pContext, ref uint pCallbackCookie) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppCallbackCookie = &pCallbackCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageFunc, MessageCallbackFlags, void*, uint*, HResult>)(LpVtbl[38]))(ptr, callbackFunc, callbackFilterFlags, (void*)pContext.Handle, (uint*)ppCallbackCookie);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult UnregisterMessageCallback(uint callbackCookie) 
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint, HResult>)(LpVtbl[39]))(ptr, callbackCookie);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12InfoQueue (ID3D12InfoQueue1 value)
		{
			return Unsafe.As<ID3D12InfoQueue1, ID3D12InfoQueue>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12InfoQueue1 value)
		{
			return Unsafe.As<ID3D12InfoQueue1, IUnknown>(ref value);
		}

	}

}
