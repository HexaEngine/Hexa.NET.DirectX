// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VideoDecoderHeapDesc
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NodeMask;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoDecodeConfiguration Configuration;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DecodeWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DecodeHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Format Format;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Rational FrameRate;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint BitRate;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint MaxDecodePictureBufferCount;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe VideoDecoderHeapDesc(uint nodeMask = default, VideoDecodeConfiguration configuration = default, uint decodeWidth = default, uint decodeHeight = default, Format format = default, Rational frameRate = default, uint bitRate = default, uint maxDecodePictureBufferCount = default)
		{
			NodeMask = nodeMask;
			Configuration = configuration;
			DecodeWidth = decodeWidth;
			DecodeHeight = decodeHeight;
			Format = format;
			FrameRate = frameRate;
			BitRate = bitRate;
			MaxDecodePictureBufferCount = maxDecodePictureBufferCount;
		}


	}

}
