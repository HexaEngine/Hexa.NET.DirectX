// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FeatureDataD3D12Options
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public Bool32 DoublePrecisionFloatShaderOps;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Bool32 OutputMergerLogicOp;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ShaderMinPrecisionSupport MinPrecisionSupport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public TiledResourcesTier TiledResourcesTier;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ResourceBindingTier ResourceBindingTier;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Bool32 PSSpecifiedStencilRefSupported;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Bool32 TypedUAVLoadAdditionalFormats;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Bool32 ROVsSupported;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ConservativeRasterizationTier ConservativeRasterizationTier;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint MaxGPUVirtualAddressBitsPerResource;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Bool32 StandardSwizzle64KBSupported;

		/// <summary>
		/// To be documented.
		/// </summary>
		public CrossNodeSharingTier CrossNodeSharingTier;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Bool32 CrossAdapterRowMajorTextureSupported;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Bool32 VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ResourceHeapTier ResourceHeapTier;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe FeatureDataD3D12Options(Bool32 doublePrecisionFloatShaderOps = default, Bool32 outputMergerLogicOp = default, ShaderMinPrecisionSupport minPrecisionSupport = default, TiledResourcesTier tiledResourcesTier = default, ResourceBindingTier resourceBindingTier = default, Bool32 psSpecifiedStencilRefSupported = default, Bool32 typedUavLoadAdditionalFormats = default, Bool32 roVsSupported = default, ConservativeRasterizationTier conservativeRasterizationTier = default, uint maxGpuVirtualAddressBitsPerResource = default, Bool32 standardSwizzle64KbSupported = default, CrossNodeSharingTier crossNodeSharingTier = default, Bool32 crossAdapterRowMajorTextureSupported = default, Bool32 vpAndRtArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGsEmulation = default, ResourceHeapTier resourceHeapTier = default)
		{
			DoublePrecisionFloatShaderOps = doublePrecisionFloatShaderOps;
			OutputMergerLogicOp = outputMergerLogicOp;
			MinPrecisionSupport = minPrecisionSupport;
			TiledResourcesTier = tiledResourcesTier;
			ResourceBindingTier = resourceBindingTier;
			PSSpecifiedStencilRefSupported = psSpecifiedStencilRefSupported;
			TypedUAVLoadAdditionalFormats = typedUavLoadAdditionalFormats;
			ROVsSupported = roVsSupported;
			ConservativeRasterizationTier = conservativeRasterizationTier;
			MaxGPUVirtualAddressBitsPerResource = maxGpuVirtualAddressBitsPerResource;
			StandardSwizzle64KBSupported = standardSwizzle64KbSupported;
			CrossNodeSharingTier = crossNodeSharingTier;
			CrossAdapterRowMajorTextureSupported = crossAdapterRowMajorTextureSupported;
			VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation = vpAndRtArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGsEmulation;
			ResourceHeapTier = resourceHeapTier;
		}


	}

}
