// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// {C59598B4-48B3-4869-B9B1-B1618B14A8B7}<br/>
	/// </summary>
	[Guid("c59598b4-48b3-4869-b9b1-b1618b14a8b7")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12ShaderReflectionConstantBuffer")]
	public partial struct ID3D12ShaderReflectionConstantBuffer : IComObject, IComObject<ID3D12ShaderReflectionConstantBuffer>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c59598b4-48b3-4869-b9b1-b1618b14a8b7");

		public unsafe ID3D12ShaderReflectionConstantBuffer (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_BUFFER_DESC*")] D3D12ShaderBufferDesc* pDesc) 
		{
			ID3D12ShaderReflectionConstantBuffer* ptr = (ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionConstantBuffer*, D3D12ShaderBufferDesc*, int>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_BUFFER_DESC*")] ref D3D12ShaderBufferDesc pDesc) 
		{
			ID3D12ShaderReflectionConstantBuffer* ptr = (ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ShaderBufferDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionConstantBuffer*, D3D12ShaderBufferDesc*, int>)(*LpVtbl))(ptr, (D3D12ShaderBufferDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionVariable*")]
		public readonly unsafe ID3D12ShaderReflectionVariable* GetVariableByIndex([NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index) 
		{
			ID3D12ShaderReflectionConstantBuffer* ptr = (ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionConstantBuffer*, uint, ID3D12ShaderReflectionVariable*>)(LpVtbl[1]))(ptr, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionVariable*")]
		public readonly unsafe ID3D12ShaderReflectionVariable* GetVariableByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name) 
		{
			ID3D12ShaderReflectionConstantBuffer* ptr = (ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionConstantBuffer*, byte*, ID3D12ShaderReflectionVariable*>)(LpVtbl[2]))(ptr, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionVariable*")]
		public readonly unsafe ID3D12ShaderReflectionVariable* GetVariableByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> name) 
		{
			ID3D12ShaderReflectionConstantBuffer* ptr = (ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pname = name)
			{
				ID3D12ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionConstantBuffer*, byte*, ID3D12ShaderReflectionVariable*>)(LpVtbl[2]))(ptr, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionVariable*")]
		public readonly unsafe ID3D12ShaderReflectionVariable* GetVariableByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] string name) 
		{
			ID3D12ShaderReflectionConstantBuffer* ptr = (ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D12ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionConstantBuffer*, byte*, ID3D12ShaderReflectionVariable*>)(LpVtbl[2]))(ptr, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

}
