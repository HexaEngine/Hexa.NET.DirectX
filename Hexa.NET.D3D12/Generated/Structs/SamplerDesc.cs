// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SamplerDesc
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public Filter Filter;

		/// <summary>
		/// To be documented.
		/// </summary>
		public TextureAddressMode AddressU;

		/// <summary>
		/// To be documented.
		/// </summary>
		public TextureAddressMode AddressV;

		/// <summary>
		/// To be documented.
		/// </summary>
		public TextureAddressMode AddressW;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float MipLODBias;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint MaxAnisotropy;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ComparisonFunc ComparisonFunc;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float BorderColor_0;
		public float BorderColor_1;
		public float BorderColor_2;
		public float BorderColor_3;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float MinLOD;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float MaxLOD;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe SamplerDesc(Filter filter = default, TextureAddressMode addressU = default, TextureAddressMode addressV = default, TextureAddressMode addressW = default, float mipLodBias = default, uint maxAnisotropy = default, ComparisonFunc comparisonFunc = default, float* borderColor = default, float minLod = default, float maxLod = default)
		{
			Filter = filter;
			AddressU = addressU;
			AddressV = addressV;
			AddressW = addressW;
			MipLODBias = mipLodBias;
			MaxAnisotropy = maxAnisotropy;
			ComparisonFunc = comparisonFunc;
			if (borderColor != default(float*))
			{
				BorderColor_0 = borderColor[0];
				BorderColor_1 = borderColor[1];
				BorderColor_2 = borderColor[2];
				BorderColor_3 = borderColor[3];
			}
			MinLOD = minLod;
			MaxLOD = maxLod;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe SamplerDesc(Filter filter = default, TextureAddressMode addressU = default, TextureAddressMode addressV = default, TextureAddressMode addressW = default, float mipLodBias = default, uint maxAnisotropy = default, ComparisonFunc comparisonFunc = default, Span<float> borderColor = default, float minLod = default, float maxLod = default)
		{
			Filter = filter;
			AddressU = addressU;
			AddressV = addressV;
			AddressW = addressW;
			MipLODBias = mipLodBias;
			MaxAnisotropy = maxAnisotropy;
			ComparisonFunc = comparisonFunc;
			if (borderColor != default(Span<float>))
			{
				BorderColor_0 = borderColor[0];
				BorderColor_1 = borderColor[1];
				BorderColor_2 = borderColor[2];
				BorderColor_3 = borderColor[3];
			}
			MinLOD = minLod;
			MaxLOD = maxLod;
		}


	}

}
