// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VideoProcessInputStreamArguments
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoProcessInputStream InputStream_0;
		public VideoProcessInputStream InputStream_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoProcessTransform Transform;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoProcessInputStreamFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoProcessInputStreamRate RateInfo;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FilterLevels_0;
		public int FilterLevels_1;
		public int FilterLevels_2;
		public int FilterLevels_3;
		public int FilterLevels_4;
		public int FilterLevels_5;
		public int FilterLevels_6;
		public int FilterLevels_7;
		public int FilterLevels_8;
		public int FilterLevels_9;
		public int FilterLevels_10;
		public int FilterLevels_11;
		public int FilterLevels_12;
		public int FilterLevels_13;
		public int FilterLevels_14;
		public int FilterLevels_15;
		public int FilterLevels_16;
		public int FilterLevels_17;
		public int FilterLevels_18;
		public int FilterLevels_19;
		public int FilterLevels_20;
		public int FilterLevels_21;
		public int FilterLevels_22;
		public int FilterLevels_23;
		public int FilterLevels_24;
		public int FilterLevels_25;
		public int FilterLevels_26;
		public int FilterLevels_27;
		public int FilterLevels_28;
		public int FilterLevels_29;
		public int FilterLevels_30;
		public int FilterLevels_31;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoProcessAlphaBlending AlphaBlending;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe VideoProcessInputStreamArguments(VideoProcessInputStream* inputStream = default, VideoProcessTransform transform = default, VideoProcessInputStreamFlags flags = default, VideoProcessInputStreamRate rateInfo = default, int* filterLevels = default, VideoProcessAlphaBlending alphaBlending = default)
		{
			if (inputStream != default(VideoProcessInputStream*))
			{
				InputStream_0 = inputStream[0];
				InputStream_1 = inputStream[1];
			}
			Transform = transform;
			Flags = flags;
			RateInfo = rateInfo;
			if (filterLevels != default(int*))
			{
				FilterLevels_0 = filterLevels[0];
				FilterLevels_1 = filterLevels[1];
				FilterLevels_2 = filterLevels[2];
				FilterLevels_3 = filterLevels[3];
				FilterLevels_4 = filterLevels[4];
				FilterLevels_5 = filterLevels[5];
				FilterLevels_6 = filterLevels[6];
				FilterLevels_7 = filterLevels[7];
				FilterLevels_8 = filterLevels[8];
				FilterLevels_9 = filterLevels[9];
				FilterLevels_10 = filterLevels[10];
				FilterLevels_11 = filterLevels[11];
				FilterLevels_12 = filterLevels[12];
				FilterLevels_13 = filterLevels[13];
				FilterLevels_14 = filterLevels[14];
				FilterLevels_15 = filterLevels[15];
				FilterLevels_16 = filterLevels[16];
				FilterLevels_17 = filterLevels[17];
				FilterLevels_18 = filterLevels[18];
				FilterLevels_19 = filterLevels[19];
				FilterLevels_20 = filterLevels[20];
				FilterLevels_21 = filterLevels[21];
				FilterLevels_22 = filterLevels[22];
				FilterLevels_23 = filterLevels[23];
				FilterLevels_24 = filterLevels[24];
				FilterLevels_25 = filterLevels[25];
				FilterLevels_26 = filterLevels[26];
				FilterLevels_27 = filterLevels[27];
				FilterLevels_28 = filterLevels[28];
				FilterLevels_29 = filterLevels[29];
				FilterLevels_30 = filterLevels[30];
				FilterLevels_31 = filterLevels[31];
			}
			AlphaBlending = alphaBlending;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe VideoProcessInputStreamArguments(Span<VideoProcessInputStream> inputStream = default, VideoProcessTransform transform = default, VideoProcessInputStreamFlags flags = default, VideoProcessInputStreamRate rateInfo = default, Span<int> filterLevels = default, VideoProcessAlphaBlending alphaBlending = default)
		{
			if (inputStream != default(Span<VideoProcessInputStream>))
			{
				InputStream_0 = inputStream[0];
				InputStream_1 = inputStream[1];
			}
			Transform = transform;
			Flags = flags;
			RateInfo = rateInfo;
			if (filterLevels != default(Span<int>))
			{
				FilterLevels_0 = filterLevels[0];
				FilterLevels_1 = filterLevels[1];
				FilterLevels_2 = filterLevels[2];
				FilterLevels_3 = filterLevels[3];
				FilterLevels_4 = filterLevels[4];
				FilterLevels_5 = filterLevels[5];
				FilterLevels_6 = filterLevels[6];
				FilterLevels_7 = filterLevels[7];
				FilterLevels_8 = filterLevels[8];
				FilterLevels_9 = filterLevels[9];
				FilterLevels_10 = filterLevels[10];
				FilterLevels_11 = filterLevels[11];
				FilterLevels_12 = filterLevels[12];
				FilterLevels_13 = filterLevels[13];
				FilterLevels_14 = filterLevels[14];
				FilterLevels_15 = filterLevels[15];
				FilterLevels_16 = filterLevels[16];
				FilterLevels_17 = filterLevels[17];
				FilterLevels_18 = filterLevels[18];
				FilterLevels_19 = filterLevels[19];
				FilterLevels_20 = filterLevels[20];
				FilterLevels_21 = filterLevels[21];
				FilterLevels_22 = filterLevels[22];
				FilterLevels_23 = filterLevels[23];
				FilterLevels_24 = filterLevels[24];
				FilterLevels_25 = filterLevels[25];
				FilterLevels_26 = filterLevels[26];
				FilterLevels_27 = filterLevels[27];
				FilterLevels_28 = filterLevels[28];
				FilterLevels_29 = filterLevels[29];
				FilterLevels_30 = filterLevels[30];
				FilterLevels_31 = filterLevels[31];
			}
			AlphaBlending = alphaBlending;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<VideoProcessInputStream> InputStream
		
		{
			get
			{
				fixed (VideoProcessInputStream* p = &this.InputStream_0)
				{
					return new Span<VideoProcessInputStream>(p, 2);
				}
			}
		}
	}

}
