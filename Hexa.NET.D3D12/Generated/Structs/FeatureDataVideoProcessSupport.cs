// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FeatureDataVideoProcessSupport
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NodeIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoSample InputSample;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoFieldType InputFieldType;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoFrameStereoFormat InputStereoFormat;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Rational InputFrameRate;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoFormat OutputFormat;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoFrameStereoFormat OutputStereoFormat;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Rational OutputFrameRate;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoProcessSupportFlags SupportFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoScaleSupport ScaleSupport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoProcessFeatureFlags FeatureSupport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoProcessDeinterlaceFlags DeinterlaceSupport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoProcessAutoProcessingFlags AutoProcessingSupport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoProcessFilterFlags FilterSupport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoProcessFilterRange FilterRangeSupport_0;
		public VideoProcessFilterRange FilterRangeSupport_1;
		public VideoProcessFilterRange FilterRangeSupport_2;
		public VideoProcessFilterRange FilterRangeSupport_3;
		public VideoProcessFilterRange FilterRangeSupport_4;
		public VideoProcessFilterRange FilterRangeSupport_5;
		public VideoProcessFilterRange FilterRangeSupport_6;
		public VideoProcessFilterRange FilterRangeSupport_7;
		public VideoProcessFilterRange FilterRangeSupport_8;
		public VideoProcessFilterRange FilterRangeSupport_9;
		public VideoProcessFilterRange FilterRangeSupport_10;
		public VideoProcessFilterRange FilterRangeSupport_11;
		public VideoProcessFilterRange FilterRangeSupport_12;
		public VideoProcessFilterRange FilterRangeSupport_13;
		public VideoProcessFilterRange FilterRangeSupport_14;
		public VideoProcessFilterRange FilterRangeSupport_15;
		public VideoProcessFilterRange FilterRangeSupport_16;
		public VideoProcessFilterRange FilterRangeSupport_17;
		public VideoProcessFilterRange FilterRangeSupport_18;
		public VideoProcessFilterRange FilterRangeSupport_19;
		public VideoProcessFilterRange FilterRangeSupport_20;
		public VideoProcessFilterRange FilterRangeSupport_21;
		public VideoProcessFilterRange FilterRangeSupport_22;
		public VideoProcessFilterRange FilterRangeSupport_23;
		public VideoProcessFilterRange FilterRangeSupport_24;
		public VideoProcessFilterRange FilterRangeSupport_25;
		public VideoProcessFilterRange FilterRangeSupport_26;
		public VideoProcessFilterRange FilterRangeSupport_27;
		public VideoProcessFilterRange FilterRangeSupport_28;
		public VideoProcessFilterRange FilterRangeSupport_29;
		public VideoProcessFilterRange FilterRangeSupport_30;
		public VideoProcessFilterRange FilterRangeSupport_31;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe FeatureDataVideoProcessSupport(uint nodeIndex = default, VideoSample inputSample = default, VideoFieldType inputFieldType = default, VideoFrameStereoFormat inputStereoFormat = default, Rational inputFrameRate = default, VideoFormat outputFormat = default, VideoFrameStereoFormat outputStereoFormat = default, Rational outputFrameRate = default, VideoProcessSupportFlags supportFlags = default, VideoScaleSupport scaleSupport = default, VideoProcessFeatureFlags featureSupport = default, VideoProcessDeinterlaceFlags deinterlaceSupport = default, VideoProcessAutoProcessingFlags autoProcessingSupport = default, VideoProcessFilterFlags filterSupport = default, VideoProcessFilterRange* filterRangeSupport = default)
		{
			NodeIndex = nodeIndex;
			InputSample = inputSample;
			InputFieldType = inputFieldType;
			InputStereoFormat = inputStereoFormat;
			InputFrameRate = inputFrameRate;
			OutputFormat = outputFormat;
			OutputStereoFormat = outputStereoFormat;
			OutputFrameRate = outputFrameRate;
			SupportFlags = supportFlags;
			ScaleSupport = scaleSupport;
			FeatureSupport = featureSupport;
			DeinterlaceSupport = deinterlaceSupport;
			AutoProcessingSupport = autoProcessingSupport;
			FilterSupport = filterSupport;
			if (filterRangeSupport != default(VideoProcessFilterRange*))
			{
				FilterRangeSupport_0 = filterRangeSupport[0];
				FilterRangeSupport_1 = filterRangeSupport[1];
				FilterRangeSupport_2 = filterRangeSupport[2];
				FilterRangeSupport_3 = filterRangeSupport[3];
				FilterRangeSupport_4 = filterRangeSupport[4];
				FilterRangeSupport_5 = filterRangeSupport[5];
				FilterRangeSupport_6 = filterRangeSupport[6];
				FilterRangeSupport_7 = filterRangeSupport[7];
				FilterRangeSupport_8 = filterRangeSupport[8];
				FilterRangeSupport_9 = filterRangeSupport[9];
				FilterRangeSupport_10 = filterRangeSupport[10];
				FilterRangeSupport_11 = filterRangeSupport[11];
				FilterRangeSupport_12 = filterRangeSupport[12];
				FilterRangeSupport_13 = filterRangeSupport[13];
				FilterRangeSupport_14 = filterRangeSupport[14];
				FilterRangeSupport_15 = filterRangeSupport[15];
				FilterRangeSupport_16 = filterRangeSupport[16];
				FilterRangeSupport_17 = filterRangeSupport[17];
				FilterRangeSupport_18 = filterRangeSupport[18];
				FilterRangeSupport_19 = filterRangeSupport[19];
				FilterRangeSupport_20 = filterRangeSupport[20];
				FilterRangeSupport_21 = filterRangeSupport[21];
				FilterRangeSupport_22 = filterRangeSupport[22];
				FilterRangeSupport_23 = filterRangeSupport[23];
				FilterRangeSupport_24 = filterRangeSupport[24];
				FilterRangeSupport_25 = filterRangeSupport[25];
				FilterRangeSupport_26 = filterRangeSupport[26];
				FilterRangeSupport_27 = filterRangeSupport[27];
				FilterRangeSupport_28 = filterRangeSupport[28];
				FilterRangeSupport_29 = filterRangeSupport[29];
				FilterRangeSupport_30 = filterRangeSupport[30];
				FilterRangeSupport_31 = filterRangeSupport[31];
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe FeatureDataVideoProcessSupport(uint nodeIndex = default, VideoSample inputSample = default, VideoFieldType inputFieldType = default, VideoFrameStereoFormat inputStereoFormat = default, Rational inputFrameRate = default, VideoFormat outputFormat = default, VideoFrameStereoFormat outputStereoFormat = default, Rational outputFrameRate = default, VideoProcessSupportFlags supportFlags = default, VideoScaleSupport scaleSupport = default, VideoProcessFeatureFlags featureSupport = default, VideoProcessDeinterlaceFlags deinterlaceSupport = default, VideoProcessAutoProcessingFlags autoProcessingSupport = default, VideoProcessFilterFlags filterSupport = default, Span<VideoProcessFilterRange> filterRangeSupport = default)
		{
			NodeIndex = nodeIndex;
			InputSample = inputSample;
			InputFieldType = inputFieldType;
			InputStereoFormat = inputStereoFormat;
			InputFrameRate = inputFrameRate;
			OutputFormat = outputFormat;
			OutputStereoFormat = outputStereoFormat;
			OutputFrameRate = outputFrameRate;
			SupportFlags = supportFlags;
			ScaleSupport = scaleSupport;
			FeatureSupport = featureSupport;
			DeinterlaceSupport = deinterlaceSupport;
			AutoProcessingSupport = autoProcessingSupport;
			FilterSupport = filterSupport;
			if (filterRangeSupport != default(Span<VideoProcessFilterRange>))
			{
				FilterRangeSupport_0 = filterRangeSupport[0];
				FilterRangeSupport_1 = filterRangeSupport[1];
				FilterRangeSupport_2 = filterRangeSupport[2];
				FilterRangeSupport_3 = filterRangeSupport[3];
				FilterRangeSupport_4 = filterRangeSupport[4];
				FilterRangeSupport_5 = filterRangeSupport[5];
				FilterRangeSupport_6 = filterRangeSupport[6];
				FilterRangeSupport_7 = filterRangeSupport[7];
				FilterRangeSupport_8 = filterRangeSupport[8];
				FilterRangeSupport_9 = filterRangeSupport[9];
				FilterRangeSupport_10 = filterRangeSupport[10];
				FilterRangeSupport_11 = filterRangeSupport[11];
				FilterRangeSupport_12 = filterRangeSupport[12];
				FilterRangeSupport_13 = filterRangeSupport[13];
				FilterRangeSupport_14 = filterRangeSupport[14];
				FilterRangeSupport_15 = filterRangeSupport[15];
				FilterRangeSupport_16 = filterRangeSupport[16];
				FilterRangeSupport_17 = filterRangeSupport[17];
				FilterRangeSupport_18 = filterRangeSupport[18];
				FilterRangeSupport_19 = filterRangeSupport[19];
				FilterRangeSupport_20 = filterRangeSupport[20];
				FilterRangeSupport_21 = filterRangeSupport[21];
				FilterRangeSupport_22 = filterRangeSupport[22];
				FilterRangeSupport_23 = filterRangeSupport[23];
				FilterRangeSupport_24 = filterRangeSupport[24];
				FilterRangeSupport_25 = filterRangeSupport[25];
				FilterRangeSupport_26 = filterRangeSupport[26];
				FilterRangeSupport_27 = filterRangeSupport[27];
				FilterRangeSupport_28 = filterRangeSupport[28];
				FilterRangeSupport_29 = filterRangeSupport[29];
				FilterRangeSupport_30 = filterRangeSupport[30];
				FilterRangeSupport_31 = filterRangeSupport[31];
			}
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<VideoProcessFilterRange> FilterRangeSupport
		
		{
			get
			{
				fixed (VideoProcessFilterRange* p = &this.FilterRangeSupport_0)
				{
					return new Span<VideoProcessFilterRange>(p, 32);
				}
			}
		}
	}

}
