// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VideoProcessOutputStreamArguments
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoProcessOutputStream OutputStream_0;
		public VideoProcessOutputStream OutputStream_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Rect32 TargetRectangle;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe VideoProcessOutputStreamArguments(VideoProcessOutputStream* outputStream = default, Rect32 targetRectangle = default)
		{
			if (outputStream != default(VideoProcessOutputStream*))
			{
				OutputStream_0 = outputStream[0];
				OutputStream_1 = outputStream[1];
			}
			TargetRectangle = targetRectangle;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe VideoProcessOutputStreamArguments(Span<VideoProcessOutputStream> outputStream = default, Rect32 targetRectangle = default)
		{
			if (outputStream != default(Span<VideoProcessOutputStream>))
			{
				OutputStream_0 = outputStream[0];
				OutputStream_1 = outputStream[1];
			}
			TargetRectangle = targetRectangle;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<VideoProcessOutputStream> OutputStream
		
		{
			get
			{
				fixed (VideoProcessOutputStream* p = &this.OutputStream_0)
				{
					return new Span<VideoProcessOutputStream>(p, 2);
				}
			}
		}
	}

}
