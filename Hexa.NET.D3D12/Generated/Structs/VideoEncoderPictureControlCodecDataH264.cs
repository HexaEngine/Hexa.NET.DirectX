// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VideoEncoderPictureControlCodecDataH264
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoEncoderPictureControlCodecDataH264Flags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VideoEncoderFrameTypeH264 FrameType;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint PicParameterSetId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint IdrPicId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint PictureOrderCountNumber;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint FrameDecodingOrderNumber;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint TemporalLayerIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint List0ReferenceFramesCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe uint* PList0ReferenceFrames;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint List1ReferenceFramesCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe uint* PList1ReferenceFrames;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ReferenceFramesReconPictureDescriptorsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe VideoEncoderReferencePictureDescriptorH264* PReferenceFramesReconPictureDescriptors;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte AdaptiveRefPicMarkingModeFlag;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint RefPicMarkingOperationsCommandsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe VideoEncoderPictureControlCodecDataH264ReferencePictureMarkingOperation* PRefPicMarkingOperationsCommands;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint List0RefPicModificationsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe VideoEncoderPictureControlCodecDataH264ReferencePictureListModificationOperation* PList0RefPicModifications;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint List1RefPicModificationsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe VideoEncoderPictureControlCodecDataH264ReferencePictureListModificationOperation* PList1RefPicModifications;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint QPMapValuesCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* PRateControlQPMap;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe VideoEncoderPictureControlCodecDataH264(VideoEncoderPictureControlCodecDataH264Flags flags = default, VideoEncoderFrameTypeH264 frameType = default, uint picParameterSetId = default, uint idrPicId = default, uint pictureOrderCountNumber = default, uint frameDecodingOrderNumber = default, uint temporalLayerIndex = default, uint list0ReferenceFramesCount = default, uint* pList0ReferenceFrames = default, uint list1ReferenceFramesCount = default, uint* pList1ReferenceFrames = default, uint referenceFramesReconPictureDescriptorsCount = default, VideoEncoderReferencePictureDescriptorH264* pReferenceFramesReconPictureDescriptors = default, byte adaptiveRefPicMarkingModeFlag = default, uint refPicMarkingOperationsCommandsCount = default, VideoEncoderPictureControlCodecDataH264ReferencePictureMarkingOperation* pRefPicMarkingOperationsCommands = default, uint list0RefPicModificationsCount = default, VideoEncoderPictureControlCodecDataH264ReferencePictureListModificationOperation* pList0RefPicModifications = default, uint list1RefPicModificationsCount = default, VideoEncoderPictureControlCodecDataH264ReferencePictureListModificationOperation* pList1RefPicModifications = default, uint qpMapValuesCount = default, byte* pRateControlQPMap = default)
		{
			Flags = flags;
			FrameType = frameType;
			PicParameterSetId = picParameterSetId;
			IdrPicId = idrPicId;
			PictureOrderCountNumber = pictureOrderCountNumber;
			FrameDecodingOrderNumber = frameDecodingOrderNumber;
			TemporalLayerIndex = temporalLayerIndex;
			List0ReferenceFramesCount = list0ReferenceFramesCount;
			PList0ReferenceFrames = pList0ReferenceFrames;
			List1ReferenceFramesCount = list1ReferenceFramesCount;
			PList1ReferenceFrames = pList1ReferenceFrames;
			ReferenceFramesReconPictureDescriptorsCount = referenceFramesReconPictureDescriptorsCount;
			PReferenceFramesReconPictureDescriptors = pReferenceFramesReconPictureDescriptors;
			AdaptiveRefPicMarkingModeFlag = adaptiveRefPicMarkingModeFlag;
			RefPicMarkingOperationsCommandsCount = refPicMarkingOperationsCommandsCount;
			PRefPicMarkingOperationsCommands = pRefPicMarkingOperationsCommands;
			List0RefPicModificationsCount = list0RefPicModificationsCount;
			PList0RefPicModifications = pList0RefPicModifications;
			List1RefPicModificationsCount = list1RefPicModificationsCount;
			PList1RefPicModifications = pList1RefPicModifications;
			QPMapValuesCount = qpMapValuesCount;
			PRateControlQPMap = pRateControlQPMap;
		}


	}

}
