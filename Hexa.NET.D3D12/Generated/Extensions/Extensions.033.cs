// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	public static unsafe partial class Extensions
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
			{
				fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
						{
							((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
			{
				fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
						{
							((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void OMSetDepthBounds(this ComPtr<ID3D12GraphicsCommandList7> comObj, float min, float max) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, float, float, void>)(handle->LpVtbl[62]))(handle, min, max);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetSamplePositions(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint numSamplesPerPixel, uint numPixels, SamplePosition* pSamplePositions) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, uint, SamplePosition*, void>)(handle->LpVtbl[63]))(handle, numSamplesPerPixel, numPixels, pSamplePositions);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetSamplePositions(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint numSamplesPerPixel, uint numPixels, ref SamplePosition pSamplePositions) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (SamplePosition* ppSamplePositions = &pSamplePositions)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, uint, SamplePosition*, void>)(handle->LpVtbl[63]))(handle, numSamplesPerPixel, numPixels, (SamplePosition*)ppSamplePositions);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, pDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, pSrcRect, format, resolveMode);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, pSrcRect, format, resolveMode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)pDstResource.Handle, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, pSrcRect, format, resolveMode);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ref ID3D12Resource pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, pDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, pSrcRect, format, resolveMode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ComPtr<ID3D12Resource> pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, pDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)pSrcResource.Handle, srcSubresource, pSrcRect, format, resolveMode);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, ref ID3D12Resource pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, pSrcRect, format, resolveMode);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstResource, uint dstSubresource, uint dstX, uint dstY, ComPtr<ID3D12Resource> pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)pDstResource.Handle, dstSubresource, dstX, dstY, (ID3D12Resource*)pSrcResource.Handle, srcSubresource, pSrcRect, format, resolveMode);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (Rect32* ppSrcRect = &pSrcRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, pDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (Rect32* ppSrcRect = &pSrcRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (Rect32* ppSrcRect = &pSrcRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)pDstResource.Handle, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ref ID3D12Resource pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				fixed (Rect32* ppSrcRect = &pSrcRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, pDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ComPtr<ID3D12Resource> pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (Rect32* ppSrcRect = &pSrcRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, pDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)pSrcResource.Handle, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, ref ID3D12Resource pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (Rect32* ppSrcRect = &pSrcRect)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> pDstResource, uint dstSubresource, uint dstX, uint dstY, ComPtr<ID3D12Resource> pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (Rect32* ppSrcRect = &pSrcRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)pDstResource.Handle, dstSubresource, dstX, dstY, (ID3D12Resource*)pSrcResource.Handle, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetViewInstanceMask(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint mask) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, void>)(handle->LpVtbl[65]))(handle, mask);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void WriteBufferImmediate(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint count, WritebufferimmediateParameter* pParams, WritebufferimmediateMode* pModes) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, WritebufferimmediateParameter*, WritebufferimmediateMode*, void>)(handle->LpVtbl[66]))(handle, count, pParams, pModes);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void WriteBufferImmediate(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint count, ref WritebufferimmediateParameter pParams, WritebufferimmediateMode* pModes) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (WritebufferimmediateParameter* ppParams = &pParams)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, WritebufferimmediateParameter*, WritebufferimmediateMode*, void>)(handle->LpVtbl[66]))(handle, count, (WritebufferimmediateParameter*)ppParams, pModes);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void WriteBufferImmediate(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint count, WritebufferimmediateParameter* pParams, ref WritebufferimmediateMode pModes) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (WritebufferimmediateMode* ppModes = &pModes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, WritebufferimmediateParameter*, WritebufferimmediateMode*, void>)(handle->LpVtbl[66]))(handle, count, pParams, (WritebufferimmediateMode*)ppModes);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void WriteBufferImmediate(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint count, ref WritebufferimmediateParameter pParams, ref WritebufferimmediateMode pModes) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (WritebufferimmediateParameter* ppParams = &pParams)
			{
				fixed (WritebufferimmediateMode* ppModes = &pModes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, WritebufferimmediateParameter*, WritebufferimmediateMode*, void>)(handle->LpVtbl[66]))(handle, count, (WritebufferimmediateParameter*)ppParams, (WritebufferimmediateMode*)ppModes);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetProtectedResourceSession(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12ProtectedResourceSession* pProtectedResourceSession) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12ProtectedResourceSession*, void>)(handle->LpVtbl[67]))(handle, pProtectedResourceSession);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetProtectedResourceSession(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12ProtectedResourceSession pProtectedResourceSession) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12ProtectedResourceSession*, void>)(handle->LpVtbl[67]))(handle, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetProtectedResourceSession(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12ProtectedResourceSession> pProtectedResourceSession) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12ProtectedResourceSession*, void>)(handle->LpVtbl[67]))(handle, (ID3D12ProtectedResourceSession*)pProtectedResourceSession.Handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void BeginRenderPass(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint numRenderTargets, RenderPassRenderTargetDesc* pRenderTargets, RenderPassDepthStencilDesc* pDepthStencil, RenderPassFlags flags) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, RenderPassRenderTargetDesc*, RenderPassDepthStencilDesc*, RenderPassFlags, void>)(handle->LpVtbl[68]))(handle, numRenderTargets, pRenderTargets, pDepthStencil, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void BeginRenderPass(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint numRenderTargets, ref RenderPassRenderTargetDesc pRenderTargets, RenderPassDepthStencilDesc* pDepthStencil, RenderPassFlags flags) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (RenderPassRenderTargetDesc* ppRenderTargets = &pRenderTargets)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, RenderPassRenderTargetDesc*, RenderPassDepthStencilDesc*, RenderPassFlags, void>)(handle->LpVtbl[68]))(handle, numRenderTargets, (RenderPassRenderTargetDesc*)ppRenderTargets, pDepthStencil, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void BeginRenderPass(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint numRenderTargets, RenderPassRenderTargetDesc* pRenderTargets, ref RenderPassDepthStencilDesc pDepthStencil, RenderPassFlags flags) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (RenderPassDepthStencilDesc* ppDepthStencil = &pDepthStencil)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, RenderPassRenderTargetDesc*, RenderPassDepthStencilDesc*, RenderPassFlags, void>)(handle->LpVtbl[68]))(handle, numRenderTargets, pRenderTargets, (RenderPassDepthStencilDesc*)ppDepthStencil, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void BeginRenderPass(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint numRenderTargets, ref RenderPassRenderTargetDesc pRenderTargets, ref RenderPassDepthStencilDesc pDepthStencil, RenderPassFlags flags) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (RenderPassRenderTargetDesc* ppRenderTargets = &pRenderTargets)
			{
				fixed (RenderPassDepthStencilDesc* ppDepthStencil = &pDepthStencil)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, RenderPassRenderTargetDesc*, RenderPassDepthStencilDesc*, RenderPassFlags, void>)(handle->LpVtbl[68]))(handle, numRenderTargets, (RenderPassRenderTargetDesc*)ppRenderTargets, (RenderPassDepthStencilDesc*)ppDepthStencil, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EndRenderPass(this ComPtr<ID3D12GraphicsCommandList7> comObj) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, void>)(handle->LpVtbl[69]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void InitializeMetaCommand(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12MetaCommand* pMetaCommand, void* pInitializationParametersData, nuint initializationParametersDataSizeInBytes) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12MetaCommand*, void*, nuint, void>)(handle->LpVtbl[70]))(handle, pMetaCommand, pInitializationParametersData, initializationParametersDataSizeInBytes);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void InitializeMetaCommand(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12MetaCommand pMetaCommand, void* pInitializationParametersData, nuint initializationParametersDataSizeInBytes) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12MetaCommand* ppMetaCommand = &pMetaCommand)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12MetaCommand*, void*, nuint, void>)(handle->LpVtbl[70]))(handle, (ID3D12MetaCommand*)ppMetaCommand, pInitializationParametersData, initializationParametersDataSizeInBytes);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void InitializeMetaCommand(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12MetaCommand> pMetaCommand, void* pInitializationParametersData, nuint initializationParametersDataSizeInBytes) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12MetaCommand*, void*, nuint, void>)(handle->LpVtbl[70]))(handle, (ID3D12MetaCommand*)pMetaCommand.Handle, pInitializationParametersData, initializationParametersDataSizeInBytes);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ExecuteMetaCommand(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12MetaCommand* pMetaCommand, void* pExecutionParametersData, nuint executionParametersDataSizeInBytes) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12MetaCommand*, void*, nuint, void>)(handle->LpVtbl[71]))(handle, pMetaCommand, pExecutionParametersData, executionParametersDataSizeInBytes);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ExecuteMetaCommand(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12MetaCommand pMetaCommand, void* pExecutionParametersData, nuint executionParametersDataSizeInBytes) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12MetaCommand* ppMetaCommand = &pMetaCommand)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12MetaCommand*, void*, nuint, void>)(handle->LpVtbl[71]))(handle, (ID3D12MetaCommand*)ppMetaCommand, pExecutionParametersData, executionParametersDataSizeInBytes);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ExecuteMetaCommand(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12MetaCommand> pMetaCommand, void* pExecutionParametersData, nuint executionParametersDataSizeInBytes) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12MetaCommand*, void*, nuint, void>)(handle->LpVtbl[71]))(handle, (ID3D12MetaCommand*)pMetaCommand.Handle, pExecutionParametersData, executionParametersDataSizeInBytes);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void BuildRaytracingAccelerationStructure(this ComPtr<ID3D12GraphicsCommandList7> comObj, BuildRaytracingAccelerationStructureDesc* pDesc, uint numPostbuildInfoDescs, RaytracingAccelerationStructurePostbuildInfoDesc* pPostbuildInfoDescs) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, BuildRaytracingAccelerationStructureDesc*, uint, RaytracingAccelerationStructurePostbuildInfoDesc*, void>)(handle->LpVtbl[72]))(handle, pDesc, numPostbuildInfoDescs, pPostbuildInfoDescs);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void BuildRaytracingAccelerationStructure(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref BuildRaytracingAccelerationStructureDesc pDesc, uint numPostbuildInfoDescs, RaytracingAccelerationStructurePostbuildInfoDesc* pPostbuildInfoDescs) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (BuildRaytracingAccelerationStructureDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, BuildRaytracingAccelerationStructureDesc*, uint, RaytracingAccelerationStructurePostbuildInfoDesc*, void>)(handle->LpVtbl[72]))(handle, (BuildRaytracingAccelerationStructureDesc*)ppDesc, numPostbuildInfoDescs, pPostbuildInfoDescs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void BuildRaytracingAccelerationStructure(this ComPtr<ID3D12GraphicsCommandList7> comObj, BuildRaytracingAccelerationStructureDesc* pDesc, uint numPostbuildInfoDescs, ref RaytracingAccelerationStructurePostbuildInfoDesc pPostbuildInfoDescs) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (RaytracingAccelerationStructurePostbuildInfoDesc* ppPostbuildInfoDescs = &pPostbuildInfoDescs)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, BuildRaytracingAccelerationStructureDesc*, uint, RaytracingAccelerationStructurePostbuildInfoDesc*, void>)(handle->LpVtbl[72]))(handle, pDesc, numPostbuildInfoDescs, (RaytracingAccelerationStructurePostbuildInfoDesc*)ppPostbuildInfoDescs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void BuildRaytracingAccelerationStructure(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref BuildRaytracingAccelerationStructureDesc pDesc, uint numPostbuildInfoDescs, ref RaytracingAccelerationStructurePostbuildInfoDesc pPostbuildInfoDescs) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (BuildRaytracingAccelerationStructureDesc* ppDesc = &pDesc)
			{
				fixed (RaytracingAccelerationStructurePostbuildInfoDesc* ppPostbuildInfoDescs = &pPostbuildInfoDescs)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, BuildRaytracingAccelerationStructureDesc*, uint, RaytracingAccelerationStructurePostbuildInfoDesc*, void>)(handle->LpVtbl[72]))(handle, (BuildRaytracingAccelerationStructureDesc*)ppDesc, numPostbuildInfoDescs, (RaytracingAccelerationStructurePostbuildInfoDesc*)ppPostbuildInfoDescs);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EmitRaytracingAccelerationStructurePostbuildInfo(this ComPtr<ID3D12GraphicsCommandList7> comObj, RaytracingAccelerationStructurePostbuildInfoDesc* pDesc, uint numSourceAccelerationStructures, ulong* pSourceAccelerationStructureData) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, RaytracingAccelerationStructurePostbuildInfoDesc*, uint, ulong*, void>)(handle->LpVtbl[73]))(handle, pDesc, numSourceAccelerationStructures, pSourceAccelerationStructureData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EmitRaytracingAccelerationStructurePostbuildInfo(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref RaytracingAccelerationStructurePostbuildInfoDesc pDesc, uint numSourceAccelerationStructures, ulong* pSourceAccelerationStructureData) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (RaytracingAccelerationStructurePostbuildInfoDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, RaytracingAccelerationStructurePostbuildInfoDesc*, uint, ulong*, void>)(handle->LpVtbl[73]))(handle, (RaytracingAccelerationStructurePostbuildInfoDesc*)ppDesc, numSourceAccelerationStructures, pSourceAccelerationStructureData);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EmitRaytracingAccelerationStructurePostbuildInfo(this ComPtr<ID3D12GraphicsCommandList7> comObj, RaytracingAccelerationStructurePostbuildInfoDesc* pDesc, uint numSourceAccelerationStructures, ref ulong pSourceAccelerationStructureData) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ulong* ppSourceAccelerationStructureData = &pSourceAccelerationStructureData)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, RaytracingAccelerationStructurePostbuildInfoDesc*, uint, ulong*, void>)(handle->LpVtbl[73]))(handle, pDesc, numSourceAccelerationStructures, (ulong*)ppSourceAccelerationStructureData);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EmitRaytracingAccelerationStructurePostbuildInfo(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref RaytracingAccelerationStructurePostbuildInfoDesc pDesc, uint numSourceAccelerationStructures, ref ulong pSourceAccelerationStructureData) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (RaytracingAccelerationStructurePostbuildInfoDesc* ppDesc = &pDesc)
			{
				fixed (ulong* ppSourceAccelerationStructureData = &pSourceAccelerationStructureData)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, RaytracingAccelerationStructurePostbuildInfoDesc*, uint, ulong*, void>)(handle->LpVtbl[73]))(handle, (RaytracingAccelerationStructurePostbuildInfoDesc*)ppDesc, numSourceAccelerationStructures, (ulong*)ppSourceAccelerationStructureData);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CopyRaytracingAccelerationStructure(this ComPtr<ID3D12GraphicsCommandList7> comObj, ulong destAccelerationStructureData, ulong sourceAccelerationStructureData, RaytracingAccelerationStructureCopyMode mode) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ulong, ulong, RaytracingAccelerationStructureCopyMode, void>)(handle->LpVtbl[74]))(handle, destAccelerationStructureData, sourceAccelerationStructureData, mode);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetPipelineState1(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12StateObject* pStateObject) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12StateObject*, void>)(handle->LpVtbl[75]))(handle, pStateObject);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetPipelineState1(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12StateObject pStateObject) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12StateObject* ppStateObject = &pStateObject)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12StateObject*, void>)(handle->LpVtbl[75]))(handle, (ID3D12StateObject*)ppStateObject);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DispatchRays(this ComPtr<ID3D12GraphicsCommandList7> comObj, DispatchRaysDesc* pDesc) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, DispatchRaysDesc*, void>)(handle->LpVtbl[76]))(handle, pDesc);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DispatchRays(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref DispatchRaysDesc pDesc) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (DispatchRaysDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, DispatchRaysDesc*, void>)(handle->LpVtbl[76]))(handle, (DispatchRaysDesc*)ppDesc);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RSSetShadingRate(this ComPtr<ID3D12GraphicsCommandList7> comObj, ShadingRate baseShadingRate, ShadingRateCombiner* combiners) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ShadingRate, ShadingRateCombiner*, void>)(handle->LpVtbl[77]))(handle, baseShadingRate, combiners);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RSSetShadingRate(this ComPtr<ID3D12GraphicsCommandList7> comObj, ShadingRate baseShadingRate, ref ShadingRateCombiner combiners) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ShadingRateCombiner* pcombiners = &combiners)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ShadingRate, ShadingRateCombiner*, void>)(handle->LpVtbl[77]))(handle, baseShadingRate, (ShadingRateCombiner*)pcombiners);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RSSetShadingRateImage(this ComPtr<ID3D12GraphicsCommandList7> comObj, ID3D12Resource* shadingRateImage) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, void>)(handle->LpVtbl[78]))(handle, shadingRateImage);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RSSetShadingRateImage(this ComPtr<ID3D12GraphicsCommandList7> comObj, ref ID3D12Resource shadingRateImage) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (ID3D12Resource* pshadingRateImage = &shadingRateImage)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, void>)(handle->LpVtbl[78]))(handle, (ID3D12Resource*)pshadingRateImage);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RSSetShadingRateImage(this ComPtr<ID3D12GraphicsCommandList7> comObj, ComPtr<ID3D12Resource> shadingRateImage) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, ID3D12Resource*, void>)(handle->LpVtbl[78]))(handle, (ID3D12Resource*)shadingRateImage.Handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DispatchMesh(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint threadGroupCountX, uint threadGroupCountY, uint threadGroupCountZ) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, uint, uint, void>)(handle->LpVtbl[79]))(handle, threadGroupCountX, threadGroupCountY, threadGroupCountZ);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Barrier(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint numBarrierGroups, BarrierGroup* pBarrierGroups) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, BarrierGroup*, void>)(handle->LpVtbl[80]))(handle, numBarrierGroups, pBarrierGroups);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Barrier(this ComPtr<ID3D12GraphicsCommandList7> comObj, uint numBarrierGroups, ref BarrierGroup pBarrierGroups) 
		{
			ID3D12GraphicsCommandList7* handle = comObj.Handle;
			fixed (BarrierGroup* ppBarrierGroups = &pBarrierGroups)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, BarrierGroup*, void>)(handle->LpVtbl[80]))(handle, numBarrierGroups, (BarrierGroup*)ppBarrierGroups);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12Debug* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12Debug* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12Debug> comObj) 
		{
			ID3D12Debug* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12Debug> comObj) 
		{
			ID3D12Debug* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EnableDebugLayer(this ComPtr<ID3D12Debug> comObj) 
		{
			ID3D12Debug* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug*, void>)(handle->LpVtbl[3]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug1> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12Debug1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug1> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12Debug1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug1> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug1* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug1> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12Debug1> comObj) 
		{
			ID3D12Debug1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug1*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12Debug1> comObj) 
		{
			ID3D12Debug1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug1*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EnableDebugLayer(this ComPtr<ID3D12Debug1> comObj) 
		{
			ID3D12Debug1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug1*, void>)(handle->LpVtbl[3]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEnableGPUBasedValidation(this ComPtr<ID3D12Debug1> comObj, int enable) 
		{
			ID3D12Debug1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug1*, int, void>)(handle->LpVtbl[4]))(handle, enable);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEnableSynchronizedCommandQueueValidation(this ComPtr<ID3D12Debug1> comObj, int enable) 
		{
			ID3D12Debug1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug1*, int, void>)(handle->LpVtbl[5]))(handle, enable);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug2> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12Debug2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug2*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug2> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12Debug2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug2*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug2> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug2* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug2*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug2> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug2*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12Debug2> comObj) 
		{
			ID3D12Debug2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug2*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12Debug2> comObj) 
		{
			ID3D12Debug2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug2*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetGPUBasedValidationFlags(this ComPtr<ID3D12Debug2> comObj, GpuBasedValidationFlags flags) 
		{
			ID3D12Debug2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug2*, GpuBasedValidationFlags, void>)(handle->LpVtbl[3]))(handle, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug3> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12Debug3* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug3*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug3> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12Debug3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug3*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug3> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug3* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug3*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug3> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug3*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12Debug3> comObj) 
		{
			ID3D12Debug3* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug3*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12Debug3> comObj) 
		{
			ID3D12Debug3* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug3*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EnableDebugLayer(this ComPtr<ID3D12Debug3> comObj) 
		{
			ID3D12Debug3* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug3*, void>)(handle->LpVtbl[3]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEnableGPUBasedValidation(this ComPtr<ID3D12Debug3> comObj, int enable) 
		{
			ID3D12Debug3* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug3*, int, void>)(handle->LpVtbl[4]))(handle, enable);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEnableSynchronizedCommandQueueValidation(this ComPtr<ID3D12Debug3> comObj, int enable) 
		{
			ID3D12Debug3* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug3*, int, void>)(handle->LpVtbl[5]))(handle, enable);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetGPUBasedValidationFlags(this ComPtr<ID3D12Debug3> comObj, GpuBasedValidationFlags flags) 
		{
			ID3D12Debug3* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug3*, GpuBasedValidationFlags, void>)(handle->LpVtbl[6]))(handle, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug4> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12Debug4* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug4*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug4> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12Debug4* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug4*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug4> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug4* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug4*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug4> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug4* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug4*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12Debug4> comObj) 
		{
			ID3D12Debug4* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug4*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12Debug4> comObj) 
		{
			ID3D12Debug4* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug4*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EnableDebugLayer(this ComPtr<ID3D12Debug4> comObj) 
		{
			ID3D12Debug4* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug4*, void>)(handle->LpVtbl[3]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEnableGPUBasedValidation(this ComPtr<ID3D12Debug4> comObj, int enable) 
		{
			ID3D12Debug4* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug4*, int, void>)(handle->LpVtbl[4]))(handle, enable);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEnableSynchronizedCommandQueueValidation(this ComPtr<ID3D12Debug4> comObj, int enable) 
		{
			ID3D12Debug4* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug4*, int, void>)(handle->LpVtbl[5]))(handle, enable);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetGPUBasedValidationFlags(this ComPtr<ID3D12Debug4> comObj, GpuBasedValidationFlags flags) 
		{
			ID3D12Debug4* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug4*, GpuBasedValidationFlags, void>)(handle->LpVtbl[6]))(handle, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DisableDebugLayer(this ComPtr<ID3D12Debug4> comObj) 
		{
			ID3D12Debug4* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug4*, void>)(handle->LpVtbl[7]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug5> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12Debug5* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug5*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug5> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12Debug5* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug5*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug5> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug5* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug5*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug5> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug5* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug5*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12Debug5> comObj) 
		{
			ID3D12Debug5* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug5*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12Debug5> comObj) 
		{
			ID3D12Debug5* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug5*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EnableDebugLayer(this ComPtr<ID3D12Debug5> comObj) 
		{
			ID3D12Debug5* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug5*, void>)(handle->LpVtbl[3]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEnableGPUBasedValidation(this ComPtr<ID3D12Debug5> comObj, int enable) 
		{
			ID3D12Debug5* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug5*, int, void>)(handle->LpVtbl[4]))(handle, enable);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEnableSynchronizedCommandQueueValidation(this ComPtr<ID3D12Debug5> comObj, int enable) 
		{
			ID3D12Debug5* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug5*, int, void>)(handle->LpVtbl[5]))(handle, enable);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetGPUBasedValidationFlags(this ComPtr<ID3D12Debug5> comObj, GpuBasedValidationFlags flags) 
		{
			ID3D12Debug5* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug5*, GpuBasedValidationFlags, void>)(handle->LpVtbl[6]))(handle, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DisableDebugLayer(this ComPtr<ID3D12Debug5> comObj) 
		{
			ID3D12Debug5* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug5*, void>)(handle->LpVtbl[7]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEnableAutoName(this ComPtr<ID3D12Debug5> comObj, int enable) 
		{
			ID3D12Debug5* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug5*, int, void>)(handle->LpVtbl[8]))(handle, enable);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug6> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12Debug6* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug6*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12Debug6> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12Debug6* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug6*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug6> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug6* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug6*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12Debug6> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Debug6* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug6*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12Debug6> comObj) 
		{
			ID3D12Debug6* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug6*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12Debug6> comObj) 
		{
			ID3D12Debug6* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Debug6*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EnableDebugLayer(this ComPtr<ID3D12Debug6> comObj) 
		{
			ID3D12Debug6* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug6*, void>)(handle->LpVtbl[3]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEnableGPUBasedValidation(this ComPtr<ID3D12Debug6> comObj, int enable) 
		{
			ID3D12Debug6* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug6*, int, void>)(handle->LpVtbl[4]))(handle, enable);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEnableSynchronizedCommandQueueValidation(this ComPtr<ID3D12Debug6> comObj, int enable) 
		{
			ID3D12Debug6* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug6*, int, void>)(handle->LpVtbl[5]))(handle, enable);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetGPUBasedValidationFlags(this ComPtr<ID3D12Debug6> comObj, GpuBasedValidationFlags flags) 
		{
			ID3D12Debug6* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug6*, GpuBasedValidationFlags, void>)(handle->LpVtbl[6]))(handle, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DisableDebugLayer(this ComPtr<ID3D12Debug6> comObj) 
		{
			ID3D12Debug6* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug6*, void>)(handle->LpVtbl[7]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEnableAutoName(this ComPtr<ID3D12Debug6> comObj, int enable) 
		{
			ID3D12Debug6* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug6*, int, void>)(handle->LpVtbl[8]))(handle, enable);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetForceLegacyBarrierValidation(this ComPtr<ID3D12Debug6> comObj, int enable) 
		{
			ID3D12Debug6* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Debug6*, int, void>)(handle->LpVtbl[9]))(handle, enable);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugDevice1> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12DebugDevice1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugDevice1> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12DebugDevice1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugDevice1> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugDevice1* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugDevice1> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugDevice1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12DebugDevice1> comObj) 
		{
			ID3D12DebugDevice1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12DebugDevice1> comObj) 
		{
			ID3D12DebugDevice1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetDebugParameter(this ComPtr<ID3D12DebugDevice1> comObj, DebugDeviceParameterType type, void* pData, uint dataSize) 
		{
			ID3D12DebugDevice1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, DebugDeviceParameterType, void*, uint, int>)(handle->LpVtbl[3]))(handle, type, pData, dataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugParameter(this ComPtr<ID3D12DebugDevice1> comObj, DebugDeviceParameterType type, void* pData, uint dataSize) 
		{
			ID3D12DebugDevice1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, DebugDeviceParameterType, void*, uint, int>)(handle->LpVtbl[4]))(handle, type, pData, dataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugParameter<T>(this ComPtr<ID3D12DebugDevice1> comObj, DebugDeviceParameterType type, ComPtr<T> pData, uint dataSize) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugDevice1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, DebugDeviceParameterType, void*, uint, int>)(handle->LpVtbl[4]))(handle, type, (void*)pData.Handle, dataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ReportLiveDeviceObjects(this ComPtr<ID3D12DebugDevice1> comObj, RldoFlags flags) 
		{
			ID3D12DebugDevice1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, RldoFlags, int>)(handle->LpVtbl[5]))(handle, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugDevice> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12DebugDevice* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugDevice> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12DebugDevice* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugDevice> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugDevice* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugDevice> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugDevice* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12DebugDevice> comObj) 
		{
			ID3D12DebugDevice* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12DebugDevice> comObj) 
		{
			ID3D12DebugDevice* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetFeatureMask(this ComPtr<ID3D12DebugDevice> comObj, DebugFeature mask) 
		{
			ID3D12DebugDevice* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, DebugFeature, int>)(handle->LpVtbl[3]))(handle, mask);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static DebugFeature GetFeatureMask(this ComPtr<ID3D12DebugDevice> comObj) 
		{
			ID3D12DebugDevice* handle = comObj.Handle;
			DebugFeature ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, DebugFeature>)(handle->LpVtbl[4]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ReportLiveDeviceObjects(this ComPtr<ID3D12DebugDevice> comObj, RldoFlags flags) 
		{
			ID3D12DebugDevice* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, RldoFlags, int>)(handle->LpVtbl[5]))(handle, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugDevice2> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12DebugDevice2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugDevice2> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12DebugDevice2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugDevice2> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugDevice2* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugDevice2> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugDevice2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12DebugDevice2> comObj) 
		{
			ID3D12DebugDevice2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12DebugDevice2> comObj) 
		{
			ID3D12DebugDevice2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetFeatureMask(this ComPtr<ID3D12DebugDevice2> comObj, DebugFeature mask) 
		{
			ID3D12DebugDevice2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, DebugFeature, int>)(handle->LpVtbl[3]))(handle, mask);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static DebugFeature GetFeatureMask(this ComPtr<ID3D12DebugDevice2> comObj) 
		{
			ID3D12DebugDevice2* handle = comObj.Handle;
			DebugFeature ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, DebugFeature>)(handle->LpVtbl[4]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ReportLiveDeviceObjects(this ComPtr<ID3D12DebugDevice2> comObj, RldoFlags flags) 
		{
			ID3D12DebugDevice2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, RldoFlags, int>)(handle->LpVtbl[5]))(handle, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetDebugParameter(this ComPtr<ID3D12DebugDevice2> comObj, DebugDeviceParameterType type, void* pData, uint dataSize) 
		{
			ID3D12DebugDevice2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, DebugDeviceParameterType, void*, uint, int>)(handle->LpVtbl[6]))(handle, type, pData, dataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugParameter(this ComPtr<ID3D12DebugDevice2> comObj, DebugDeviceParameterType type, void* pData, uint dataSize) 
		{
			ID3D12DebugDevice2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, DebugDeviceParameterType, void*, uint, int>)(handle->LpVtbl[7]))(handle, type, pData, dataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugParameter<T>(this ComPtr<ID3D12DebugDevice2> comObj, DebugDeviceParameterType type, ComPtr<T> pData, uint dataSize) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugDevice2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, DebugDeviceParameterType, void*, uint, int>)(handle->LpVtbl[7]))(handle, type, (void*)pData.Handle, dataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugCommandQueue> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12DebugCommandQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandQueue*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugCommandQueue> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12DebugCommandQueue* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandQueue*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugCommandQueue> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugCommandQueue* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandQueue*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugCommandQueue> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugCommandQueue* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandQueue*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12DebugCommandQueue> comObj) 
		{
			ID3D12DebugCommandQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandQueue*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12DebugCommandQueue> comObj) 
		{
			ID3D12DebugCommandQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandQueue*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AssertResourceState(this ComPtr<ID3D12DebugCommandQueue> comObj, ID3D12Resource* pResource, uint subresource, uint state) 
		{
			ID3D12DebugCommandQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandQueue*, ID3D12Resource*, uint, uint, int>)(handle->LpVtbl[3]))(handle, pResource, subresource, state);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AssertResourceState(this ComPtr<ID3D12DebugCommandQueue> comObj, ref ID3D12Resource pResource, uint subresource, uint state) 
		{
			ID3D12DebugCommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandQueue*, ID3D12Resource*, uint, uint, int>)(handle->LpVtbl[3]))(handle, (ID3D12Resource*)ppResource, subresource, state);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AssertResourceState(this ComPtr<ID3D12DebugCommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint subresource, uint state) 
		{
			ID3D12DebugCommandQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandQueue*, ID3D12Resource*, uint, uint, int>)(handle->LpVtbl[3]))(handle, (ID3D12Resource*)pResource.Handle, subresource, state);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugCommandList1> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12DebugCommandList1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugCommandList1> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12DebugCommandList1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugCommandList1> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugCommandList1* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugCommandList1> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugCommandList1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12DebugCommandList1> comObj) 
		{
			ID3D12DebugCommandList1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12DebugCommandList1> comObj) 
		{
			ID3D12DebugCommandList1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AssertResourceState(this ComPtr<ID3D12DebugCommandList1> comObj, ID3D12Resource* pResource, uint subresource, uint state) 
		{
			ID3D12DebugCommandList1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, ID3D12Resource*, uint, uint, int>)(handle->LpVtbl[3]))(handle, pResource, subresource, state);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AssertResourceState(this ComPtr<ID3D12DebugCommandList1> comObj, ref ID3D12Resource pResource, uint subresource, uint state) 
		{
			ID3D12DebugCommandList1* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, ID3D12Resource*, uint, uint, int>)(handle->LpVtbl[3]))(handle, (ID3D12Resource*)ppResource, subresource, state);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AssertResourceState(this ComPtr<ID3D12DebugCommandList1> comObj, ComPtr<ID3D12Resource> pResource, uint subresource, uint state) 
		{
			ID3D12DebugCommandList1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, ID3D12Resource*, uint, uint, int>)(handle->LpVtbl[3]))(handle, (ID3D12Resource*)pResource.Handle, subresource, state);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetDebugParameter(this ComPtr<ID3D12DebugCommandList1> comObj, DebugCommandListParameterType type, void* pData, uint dataSize) 
		{
			ID3D12DebugCommandList1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, DebugCommandListParameterType, void*, uint, int>)(handle->LpVtbl[4]))(handle, type, pData, dataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugParameter(this ComPtr<ID3D12DebugCommandList1> comObj, DebugCommandListParameterType type, void* pData, uint dataSize) 
		{
			ID3D12DebugCommandList1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, DebugCommandListParameterType, void*, uint, int>)(handle->LpVtbl[5]))(handle, type, pData, dataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugParameter<T>(this ComPtr<ID3D12DebugCommandList1> comObj, DebugCommandListParameterType type, ComPtr<T> pData, uint dataSize) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugCommandList1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, DebugCommandListParameterType, void*, uint, int>)(handle->LpVtbl[5]))(handle, type, (void*)pData.Handle, dataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugCommandList> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12DebugCommandList* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugCommandList> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12DebugCommandList* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugCommandList> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugCommandList* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugCommandList> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugCommandList* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12DebugCommandList> comObj) 
		{
			ID3D12DebugCommandList* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12DebugCommandList> comObj) 
		{
			ID3D12DebugCommandList* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AssertResourceState(this ComPtr<ID3D12DebugCommandList> comObj, ID3D12Resource* pResource, uint subresource, uint state) 
		{
			ID3D12DebugCommandList* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, ID3D12Resource*, uint, uint, int>)(handle->LpVtbl[3]))(handle, pResource, subresource, state);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AssertResourceState(this ComPtr<ID3D12DebugCommandList> comObj, ref ID3D12Resource pResource, uint subresource, uint state) 
		{
			ID3D12DebugCommandList* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, ID3D12Resource*, uint, uint, int>)(handle->LpVtbl[3]))(handle, (ID3D12Resource*)ppResource, subresource, state);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AssertResourceState(this ComPtr<ID3D12DebugCommandList> comObj, ComPtr<ID3D12Resource> pResource, uint subresource, uint state) 
		{
			ID3D12DebugCommandList* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, ID3D12Resource*, uint, uint, int>)(handle->LpVtbl[3]))(handle, (ID3D12Resource*)pResource.Handle, subresource, state);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetFeatureMask(this ComPtr<ID3D12DebugCommandList> comObj, DebugFeature mask) 
		{
			ID3D12DebugCommandList* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, DebugFeature, int>)(handle->LpVtbl[4]))(handle, mask);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static DebugFeature GetFeatureMask(this ComPtr<ID3D12DebugCommandList> comObj) 
		{
			ID3D12DebugCommandList* handle = comObj.Handle;
			DebugFeature ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, DebugFeature>)(handle->LpVtbl[5]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugCommandList2> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12DebugCommandList2> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugCommandList2> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12DebugCommandList2> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12DebugCommandList2> comObj) 
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12DebugCommandList2> comObj) 
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AssertResourceState(this ComPtr<ID3D12DebugCommandList2> comObj, ID3D12Resource* pResource, uint subresource, uint state) 
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, ID3D12Resource*, uint, uint, int>)(handle->LpVtbl[3]))(handle, pResource, subresource, state);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AssertResourceState(this ComPtr<ID3D12DebugCommandList2> comObj, ref ID3D12Resource pResource, uint subresource, uint state) 
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, ID3D12Resource*, uint, uint, int>)(handle->LpVtbl[3]))(handle, (ID3D12Resource*)ppResource, subresource, state);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AssertResourceState(this ComPtr<ID3D12DebugCommandList2> comObj, ComPtr<ID3D12Resource> pResource, uint subresource, uint state) 
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, ID3D12Resource*, uint, uint, int>)(handle->LpVtbl[3]))(handle, (ID3D12Resource*)pResource.Handle, subresource, state);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetFeatureMask(this ComPtr<ID3D12DebugCommandList2> comObj, DebugFeature mask) 
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, DebugFeature, int>)(handle->LpVtbl[4]))(handle, mask);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static DebugFeature GetFeatureMask(this ComPtr<ID3D12DebugCommandList2> comObj) 
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			DebugFeature ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, DebugFeature>)(handle->LpVtbl[5]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetDebugParameter(this ComPtr<ID3D12DebugCommandList2> comObj, DebugCommandListParameterType type, void* pData, uint dataSize) 
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, DebugCommandListParameterType, void*, uint, int>)(handle->LpVtbl[6]))(handle, type, pData, dataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugParameter(this ComPtr<ID3D12DebugCommandList2> comObj, DebugCommandListParameterType type, void* pData, uint dataSize) 
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, DebugCommandListParameterType, void*, uint, int>)(handle->LpVtbl[7]))(handle, type, pData, dataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDebugParameter<T>(this ComPtr<ID3D12DebugCommandList2> comObj, DebugCommandListParameterType type, ComPtr<T> pData, uint dataSize) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DebugCommandList2* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, DebugCommandListParameterType, void*, uint, int>)(handle->LpVtbl[7]))(handle, type, (void*)pData.Handle, dataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12SharingContract> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12SharingContract> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12SharingContract> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12SharingContract* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12SharingContract> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12SharingContract* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12SharingContract> comObj) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12SharingContract> comObj) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Present(this ComPtr<ID3D12SharingContract> comObj, ID3D12Resource* pResource, uint subresource, nint window) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, ID3D12Resource*, uint, nint, void>)(handle->LpVtbl[3]))(handle, pResource, subresource, window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Present(this ComPtr<ID3D12SharingContract> comObj, ref ID3D12Resource pResource, uint subresource, nint window) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, ID3D12Resource*, uint, nint, void>)(handle->LpVtbl[3]))(handle, (ID3D12Resource*)ppResource, subresource, window);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Present(this ComPtr<ID3D12SharingContract> comObj, ComPtr<ID3D12Resource> pResource, uint subresource, nint window) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, ID3D12Resource*, uint, nint, void>)(handle->LpVtbl[3]))(handle, (ID3D12Resource*)pResource.Handle, subresource, window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SharedFenceSignal(this ComPtr<ID3D12SharingContract> comObj, ID3D12Fence* pFence, ulong fenceValue) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, ID3D12Fence*, ulong, void>)(handle->LpVtbl[4]))(handle, pFence, fenceValue);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SharedFenceSignal(this ComPtr<ID3D12SharingContract> comObj, ref ID3D12Fence pFence, ulong fenceValue) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			fixed (ID3D12Fence* ppFence = &pFence)
			{
				((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, ID3D12Fence*, ulong, void>)(handle->LpVtbl[4]))(handle, (ID3D12Fence*)ppFence, fenceValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SharedFenceSignal(this ComPtr<ID3D12SharingContract> comObj, ComPtr<ID3D12Fence> pFence, ulong fenceValue) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, ID3D12Fence*, ulong, void>)(handle->LpVtbl[4]))(handle, (ID3D12Fence*)pFence.Handle, fenceValue);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void BeginCapturableWork(this ComPtr<ID3D12SharingContract> comObj, Guid* guid) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void>)(handle->LpVtbl[5]))(handle, guid);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void BeginCapturableWork(this ComPtr<ID3D12SharingContract> comObj, ref Guid guid) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void>)(handle->LpVtbl[5]))(handle, (Guid*)pguid);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EndCapturableWork(this ComPtr<ID3D12SharingContract> comObj, Guid* guid) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void>)(handle->LpVtbl[6]))(handle, guid);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EndCapturableWork(this ComPtr<ID3D12SharingContract> comObj, ref Guid guid) 
		{
			ID3D12SharingContract* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void>)(handle->LpVtbl[6]))(handle, (Guid*)pguid);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12InfoQueue> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12InfoQueue> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12InfoQueue> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12InfoQueue> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetMessageCountLimit(this ComPtr<ID3D12InfoQueue> comObj, ulong messageCountLimit) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, int>)(handle->LpVtbl[3]))(handle, messageCountLimit);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClearStoredMessages(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(handle->LpVtbl[4]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetMessageA(this ComPtr<ID3D12InfoQueue> comObj, ulong messageIndex, Message* pMessage, nuint* pMessageByteLength) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, Message*, nuint*, int>)(handle->LpVtbl[5]))(handle, messageIndex, pMessage, pMessageByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetMessageA(this ComPtr<ID3D12InfoQueue> comObj, ulong messageIndex, ref Message pMessage, nuint* pMessageByteLength) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (Message* ppMessage = &pMessage)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, Message*, nuint*, int>)(handle->LpVtbl[5]))(handle, messageIndex, (Message*)ppMessage, pMessageByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetMessageA(this ComPtr<ID3D12InfoQueue> comObj, ulong messageIndex, Message* pMessage, ref nuint pMessageByteLength) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (nuint* ppMessageByteLength = &pMessageByteLength)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, Message*, nuint*, int>)(handle->LpVtbl[5]))(handle, messageIndex, pMessage, (nuint*)ppMessageByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetMessageA(this ComPtr<ID3D12InfoQueue> comObj, ulong messageIndex, ref Message pMessage, ref nuint pMessageByteLength) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (Message* ppMessage = &pMessage)
			{
				fixed (nuint* ppMessageByteLength = &pMessageByteLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, Message*, nuint*, int>)(handle->LpVtbl[5]))(handle, messageIndex, (Message*)ppMessage, (nuint*)ppMessageByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumMessagesAllowedByStorageFilter(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(handle->LpVtbl[6]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumMessagesDeniedByStorageFilter(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(handle->LpVtbl[7]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumStoredMessages(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(handle->LpVtbl[8]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumStoredMessagesAllowedByRetrievalFilter(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(handle->LpVtbl[9]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumMessagesDiscardedByMessageCountLimit(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(handle->LpVtbl[10]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetMessageCountLimit(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(handle->LpVtbl[11]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddStorageFilterEntries(this ComPtr<ID3D12InfoQueue> comObj, InfoQueueFilter* pFilter) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, int>)(handle->LpVtbl[12]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddStorageFilterEntries(this ComPtr<ID3D12InfoQueue> comObj, ref InfoQueueFilter pFilter) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, int>)(handle->LpVtbl[12]))(handle, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetStorageFilter(this ComPtr<ID3D12InfoQueue> comObj, InfoQueueFilter* pFilter, nuint* pFilterByteLength) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[13]))(handle, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetStorageFilter(this ComPtr<ID3D12InfoQueue> comObj, ref InfoQueueFilter pFilter, nuint* pFilterByteLength) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[13]))(handle, (InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetStorageFilter(this ComPtr<ID3D12InfoQueue> comObj, InfoQueueFilter* pFilter, ref nuint pFilterByteLength) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[13]))(handle, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetStorageFilter(this ComPtr<ID3D12InfoQueue> comObj, ref InfoQueueFilter pFilter, ref nuint pFilterByteLength) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[13]))(handle, (InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClearStorageFilter(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(handle->LpVtbl[14]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushEmptyStorageFilter(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, int>)(handle->LpVtbl[15]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushCopyOfStorageFilter(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, int>)(handle->LpVtbl[16]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushStorageFilter(this ComPtr<ID3D12InfoQueue> comObj, InfoQueueFilter* pFilter) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, int>)(handle->LpVtbl[17]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushStorageFilter(this ComPtr<ID3D12InfoQueue> comObj, ref InfoQueueFilter pFilter) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, int>)(handle->LpVtbl[17]))(handle, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PopStorageFilter(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(handle->LpVtbl[18]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetStorageFilterStackSize(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, uint>)(handle->LpVtbl[19]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddRetrievalFilterEntries(this ComPtr<ID3D12InfoQueue> comObj, InfoQueueFilter* pFilter) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, int>)(handle->LpVtbl[20]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddRetrievalFilterEntries(this ComPtr<ID3D12InfoQueue> comObj, ref InfoQueueFilter pFilter) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, int>)(handle->LpVtbl[20]))(handle, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetRetrievalFilter(this ComPtr<ID3D12InfoQueue> comObj, InfoQueueFilter* pFilter, nuint* pFilterByteLength) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[21]))(handle, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetRetrievalFilter(this ComPtr<ID3D12InfoQueue> comObj, ref InfoQueueFilter pFilter, nuint* pFilterByteLength) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[21]))(handle, (InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetRetrievalFilter(this ComPtr<ID3D12InfoQueue> comObj, InfoQueueFilter* pFilter, ref nuint pFilterByteLength) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[21]))(handle, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetRetrievalFilter(this ComPtr<ID3D12InfoQueue> comObj, ref InfoQueueFilter pFilter, ref nuint pFilterByteLength) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[21]))(handle, (InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClearRetrievalFilter(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(handle->LpVtbl[22]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushEmptyRetrievalFilter(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, int>)(handle->LpVtbl[23]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushCopyOfRetrievalFilter(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, int>)(handle->LpVtbl[24]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushRetrievalFilter(this ComPtr<ID3D12InfoQueue> comObj, InfoQueueFilter* pFilter) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, int>)(handle->LpVtbl[25]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushRetrievalFilter(this ComPtr<ID3D12InfoQueue> comObj, ref InfoQueueFilter pFilter) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, int>)(handle->LpVtbl[25]))(handle, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PopRetrievalFilter(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(handle->LpVtbl[26]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetRetrievalFilterStackSize(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, uint>)(handle->LpVtbl[27]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddMessage(this ComPtr<ID3D12InfoQueue> comObj, MessageCategory category, MessageSeverity severity, MessageId id, byte* pDescription) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageCategory, MessageSeverity, MessageId, byte*, int>)(handle->LpVtbl[28]))(handle, category, severity, id, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddMessage(this ComPtr<ID3D12InfoQueue> comObj, MessageCategory category, MessageSeverity severity, MessageId id, ReadOnlySpan<byte> pDescription) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (byte* ppDescription = pDescription)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageCategory, MessageSeverity, MessageId, byte*, int>)(handle->LpVtbl[28]))(handle, category, severity, id, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddMessage(this ComPtr<ID3D12InfoQueue> comObj, MessageCategory category, MessageSeverity severity, MessageId id, string pDescription) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageCategory, MessageSeverity, MessageId, byte*, int>)(handle->LpVtbl[28]))(handle, category, severity, id, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddApplicationMessage(this ComPtr<ID3D12InfoQueue> comObj, MessageSeverity severity, byte* pDescription) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageSeverity, byte*, int>)(handle->LpVtbl[29]))(handle, severity, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddApplicationMessage(this ComPtr<ID3D12InfoQueue> comObj, MessageSeverity severity, ReadOnlySpan<byte> pDescription) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			fixed (byte* ppDescription = pDescription)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageSeverity, byte*, int>)(handle->LpVtbl[29]))(handle, severity, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddApplicationMessage(this ComPtr<ID3D12InfoQueue> comObj, MessageSeverity severity, string pDescription) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageSeverity, byte*, int>)(handle->LpVtbl[29]))(handle, severity, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetBreakOnCategory(this ComPtr<ID3D12InfoQueue> comObj, MessageCategory category, int bEnable) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageCategory, int, int>)(handle->LpVtbl[30]))(handle, category, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetBreakOnSeverity(this ComPtr<ID3D12InfoQueue> comObj, MessageSeverity severity, int bEnable) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageSeverity, int, int>)(handle->LpVtbl[31]))(handle, severity, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetBreakOnID(this ComPtr<ID3D12InfoQueue> comObj, MessageId id, int bEnable) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageId, int, int>)(handle->LpVtbl[32]))(handle, id, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetBreakOnCategory(this ComPtr<ID3D12InfoQueue> comObj, MessageCategory category) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageCategory, int>)(handle->LpVtbl[33]))(handle, category);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetBreakOnSeverity(this ComPtr<ID3D12InfoQueue> comObj, MessageSeverity severity) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageSeverity, int>)(handle->LpVtbl[34]))(handle, severity);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetBreakOnID(this ComPtr<ID3D12InfoQueue> comObj, MessageId id) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageId, int>)(handle->LpVtbl[35]))(handle, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetMuteDebugOutput(this ComPtr<ID3D12InfoQueue> comObj, int bMute) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, int, void>)(handle->LpVtbl[36]))(handle, bMute);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetMuteDebugOutput(this ComPtr<ID3D12InfoQueue> comObj) 
		{
			ID3D12InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, int>)(handle->LpVtbl[37]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12InfoQueue1> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12InfoQueue1> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12InfoQueue1> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12InfoQueue1> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetMessageCountLimit(this ComPtr<ID3D12InfoQueue1> comObj, ulong messageCountLimit) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong, int>)(handle->LpVtbl[3]))(handle, messageCountLimit);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClearStoredMessages(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(handle->LpVtbl[4]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetMessageA(this ComPtr<ID3D12InfoQueue1> comObj, ulong messageIndex, Message* pMessage, nuint* pMessageByteLength) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong, Message*, nuint*, int>)(handle->LpVtbl[5]))(handle, messageIndex, pMessage, pMessageByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetMessageA(this ComPtr<ID3D12InfoQueue1> comObj, ulong messageIndex, ref Message pMessage, nuint* pMessageByteLength) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (Message* ppMessage = &pMessage)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong, Message*, nuint*, int>)(handle->LpVtbl[5]))(handle, messageIndex, (Message*)ppMessage, pMessageByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetMessageA(this ComPtr<ID3D12InfoQueue1> comObj, ulong messageIndex, Message* pMessage, ref nuint pMessageByteLength) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (nuint* ppMessageByteLength = &pMessageByteLength)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong, Message*, nuint*, int>)(handle->LpVtbl[5]))(handle, messageIndex, pMessage, (nuint*)ppMessageByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetMessageA(this ComPtr<ID3D12InfoQueue1> comObj, ulong messageIndex, ref Message pMessage, ref nuint pMessageByteLength) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (Message* ppMessage = &pMessage)
			{
				fixed (nuint* ppMessageByteLength = &pMessageByteLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong, Message*, nuint*, int>)(handle->LpVtbl[5]))(handle, messageIndex, (Message*)ppMessage, (nuint*)ppMessageByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumMessagesAllowedByStorageFilter(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(handle->LpVtbl[6]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumMessagesDeniedByStorageFilter(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(handle->LpVtbl[7]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumStoredMessages(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(handle->LpVtbl[8]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumStoredMessagesAllowedByRetrievalFilter(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(handle->LpVtbl[9]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumMessagesDiscardedByMessageCountLimit(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(handle->LpVtbl[10]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetMessageCountLimit(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(handle->LpVtbl[11]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddStorageFilterEntries(this ComPtr<ID3D12InfoQueue1> comObj, InfoQueueFilter* pFilter) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, int>)(handle->LpVtbl[12]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddStorageFilterEntries(this ComPtr<ID3D12InfoQueue1> comObj, ref InfoQueueFilter pFilter) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, int>)(handle->LpVtbl[12]))(handle, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetStorageFilter(this ComPtr<ID3D12InfoQueue1> comObj, InfoQueueFilter* pFilter, nuint* pFilterByteLength) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[13]))(handle, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetStorageFilter(this ComPtr<ID3D12InfoQueue1> comObj, ref InfoQueueFilter pFilter, nuint* pFilterByteLength) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[13]))(handle, (InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetStorageFilter(this ComPtr<ID3D12InfoQueue1> comObj, InfoQueueFilter* pFilter, ref nuint pFilterByteLength) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[13]))(handle, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetStorageFilter(this ComPtr<ID3D12InfoQueue1> comObj, ref InfoQueueFilter pFilter, ref nuint pFilterByteLength) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[13]))(handle, (InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClearStorageFilter(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(handle->LpVtbl[14]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushEmptyStorageFilter(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, int>)(handle->LpVtbl[15]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushCopyOfStorageFilter(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, int>)(handle->LpVtbl[16]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushStorageFilter(this ComPtr<ID3D12InfoQueue1> comObj, InfoQueueFilter* pFilter) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, int>)(handle->LpVtbl[17]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushStorageFilter(this ComPtr<ID3D12InfoQueue1> comObj, ref InfoQueueFilter pFilter) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, int>)(handle->LpVtbl[17]))(handle, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PopStorageFilter(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(handle->LpVtbl[18]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetStorageFilterStackSize(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint>)(handle->LpVtbl[19]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddRetrievalFilterEntries(this ComPtr<ID3D12InfoQueue1> comObj, InfoQueueFilter* pFilter) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, int>)(handle->LpVtbl[20]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddRetrievalFilterEntries(this ComPtr<ID3D12InfoQueue1> comObj, ref InfoQueueFilter pFilter) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, int>)(handle->LpVtbl[20]))(handle, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetRetrievalFilter(this ComPtr<ID3D12InfoQueue1> comObj, InfoQueueFilter* pFilter, nuint* pFilterByteLength) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[21]))(handle, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetRetrievalFilter(this ComPtr<ID3D12InfoQueue1> comObj, ref InfoQueueFilter pFilter, nuint* pFilterByteLength) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[21]))(handle, (InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetRetrievalFilter(this ComPtr<ID3D12InfoQueue1> comObj, InfoQueueFilter* pFilter, ref nuint pFilterByteLength) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[21]))(handle, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetRetrievalFilter(this ComPtr<ID3D12InfoQueue1> comObj, ref InfoQueueFilter pFilter, ref nuint pFilterByteLength) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[21]))(handle, (InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClearRetrievalFilter(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(handle->LpVtbl[22]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushEmptyRetrievalFilter(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, int>)(handle->LpVtbl[23]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushCopyOfRetrievalFilter(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, int>)(handle->LpVtbl[24]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushRetrievalFilter(this ComPtr<ID3D12InfoQueue1> comObj, InfoQueueFilter* pFilter) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, int>)(handle->LpVtbl[25]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PushRetrievalFilter(this ComPtr<ID3D12InfoQueue1> comObj, ref InfoQueueFilter pFilter) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, int>)(handle->LpVtbl[25]))(handle, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PopRetrievalFilter(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(handle->LpVtbl[26]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetRetrievalFilterStackSize(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint>)(handle->LpVtbl[27]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddMessage(this ComPtr<ID3D12InfoQueue1> comObj, MessageCategory category, MessageSeverity severity, MessageId id, byte* pDescription) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageCategory, MessageSeverity, MessageId, byte*, int>)(handle->LpVtbl[28]))(handle, category, severity, id, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddMessage(this ComPtr<ID3D12InfoQueue1> comObj, MessageCategory category, MessageSeverity severity, MessageId id, ReadOnlySpan<byte> pDescription) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (byte* ppDescription = pDescription)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageCategory, MessageSeverity, MessageId, byte*, int>)(handle->LpVtbl[28]))(handle, category, severity, id, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddMessage(this ComPtr<ID3D12InfoQueue1> comObj, MessageCategory category, MessageSeverity severity, MessageId id, string pDescription) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageCategory, MessageSeverity, MessageId, byte*, int>)(handle->LpVtbl[28]))(handle, category, severity, id, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddApplicationMessage(this ComPtr<ID3D12InfoQueue1> comObj, MessageSeverity severity, byte* pDescription) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageSeverity, byte*, int>)(handle->LpVtbl[29]))(handle, severity, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddApplicationMessage(this ComPtr<ID3D12InfoQueue1> comObj, MessageSeverity severity, ReadOnlySpan<byte> pDescription) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (byte* ppDescription = pDescription)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageSeverity, byte*, int>)(handle->LpVtbl[29]))(handle, severity, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddApplicationMessage(this ComPtr<ID3D12InfoQueue1> comObj, MessageSeverity severity, string pDescription) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageSeverity, byte*, int>)(handle->LpVtbl[29]))(handle, severity, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetBreakOnCategory(this ComPtr<ID3D12InfoQueue1> comObj, MessageCategory category, int bEnable) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageCategory, int, int>)(handle->LpVtbl[30]))(handle, category, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetBreakOnSeverity(this ComPtr<ID3D12InfoQueue1> comObj, MessageSeverity severity, int bEnable) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageSeverity, int, int>)(handle->LpVtbl[31]))(handle, severity, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetBreakOnID(this ComPtr<ID3D12InfoQueue1> comObj, MessageId id, int bEnable) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageId, int, int>)(handle->LpVtbl[32]))(handle, id, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetBreakOnCategory(this ComPtr<ID3D12InfoQueue1> comObj, MessageCategory category) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageCategory, int>)(handle->LpVtbl[33]))(handle, category);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetBreakOnSeverity(this ComPtr<ID3D12InfoQueue1> comObj, MessageSeverity severity) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageSeverity, int>)(handle->LpVtbl[34]))(handle, severity);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetBreakOnID(this ComPtr<ID3D12InfoQueue1> comObj, MessageId id) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageId, int>)(handle->LpVtbl[35]))(handle, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetMuteDebugOutput(this ComPtr<ID3D12InfoQueue1> comObj, int bMute) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, int, void>)(handle->LpVtbl[36]))(handle, bMute);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetMuteDebugOutput(this ComPtr<ID3D12InfoQueue1> comObj) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, int>)(handle->LpVtbl[37]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int RegisterMessageCallback(this ComPtr<ID3D12InfoQueue1> comObj, MessageFunc callbackFunc, MessageCallbackFlags callbackFilterFlags, void* pContext, uint* pCallbackCookie) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageFunc, MessageCallbackFlags, void*, uint*, int>)(handle->LpVtbl[38]))(handle, callbackFunc, callbackFilterFlags, pContext, pCallbackCookie);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int RegisterMessageCallback<T>(this ComPtr<ID3D12InfoQueue1> comObj, MessageFunc callbackFunc, MessageCallbackFlags callbackFilterFlags, ComPtr<T> pContext, uint* pCallbackCookie) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageFunc, MessageCallbackFlags, void*, uint*, int>)(handle->LpVtbl[38]))(handle, callbackFunc, callbackFilterFlags, (void*)pContext.Handle, pCallbackCookie);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int RegisterMessageCallback(this ComPtr<ID3D12InfoQueue1> comObj, MessageFunc callbackFunc, MessageCallbackFlags callbackFilterFlags, void* pContext, ref uint pCallbackCookie) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (uint* ppCallbackCookie = &pCallbackCookie)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageFunc, MessageCallbackFlags, void*, uint*, int>)(handle->LpVtbl[38]))(handle, callbackFunc, callbackFilterFlags, pContext, (uint*)ppCallbackCookie);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int RegisterMessageCallback<T>(this ComPtr<ID3D12InfoQueue1> comObj, MessageFunc callbackFunc, MessageCallbackFlags callbackFilterFlags, ComPtr<T> pContext, ref uint pCallbackCookie) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			fixed (uint* ppCallbackCookie = &pCallbackCookie)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageFunc, MessageCallbackFlags, void*, uint*, int>)(handle->LpVtbl[38]))(handle, callbackFunc, callbackFilterFlags, (void*)pContext.Handle, (uint*)ppCallbackCookie);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int UnregisterMessageCallback(this ComPtr<ID3D12InfoQueue1> comObj, uint callbackCookie) 
		{
			ID3D12InfoQueue1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint, int>)(handle->LpVtbl[39]))(handle, callbackCookie);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12CompatibilityDevice> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D12CompatibilityDevice> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12CompatibilityDevice> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D12CompatibilityDevice> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12CompatibilityDevice> comObj) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12CompatibilityDevice> comObj) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ResourceDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ResourceDesc* ppDesc = &pDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, pDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ResourceDesc* ppDesc = &pDesc)
				{
					fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, ref D3D11ResourceFlags pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, ref D3D11ResourceFlags pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, ref D3D11ResourceFlags pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, ref D3D11ResourceFlags pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, ref D3D11ResourceFlags pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, pDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, ref D3D11ResourceFlags pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, ref D3D11ResourceFlags pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, ref D3D11ResourceFlags pFlags11, CompatibilitySharedFlags compatibilityFlags, ID3D12LifetimeTracker* pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ResourceDesc* ppDesc = &pDesc)
				{
					fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ref ID3D12LifetimeTracker pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ComPtr<ID3D12LifetimeTracker> pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)pLifetimeTracker.Handle, pOwningSwapchain, riid, ppResource);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ref ID3D12LifetimeTracker pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ComPtr<ID3D12LifetimeTracker> pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)pLifetimeTracker.Handle, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ref ID3D12LifetimeTracker pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ComPtr<ID3D12LifetimeTracker> pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ResourceDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)pLifetimeTracker.Handle, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ref ID3D12LifetimeTracker pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ResourceDesc* ppDesc = &pDesc)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ComPtr<ID3D12LifetimeTracker> pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ResourceDesc* ppDesc = &pDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)pLifetimeTracker.Handle, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ref ID3D12LifetimeTracker pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, pDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ComPtr<ID3D12LifetimeTracker> pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, pDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)pLifetimeTracker.Handle, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ref ID3D12LifetimeTracker pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ComPtr<ID3D12LifetimeTracker> pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)pLifetimeTracker.Handle, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ref ID3D12LifetimeTracker pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ComPtr<ID3D12LifetimeTracker> pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)pLifetimeTracker.Handle, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ref ID3D12LifetimeTracker pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ResourceDesc* ppDesc = &pDesc)
				{
					fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ref ClearValue pOptimizedClearValue, D3D11ResourceFlags* pFlags11, CompatibilitySharedFlags compatibilityFlags, ComPtr<ID3D12LifetimeTracker> pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ResourceDesc* ppDesc = &pDesc)
				{
					fixed (ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, (ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)pLifetimeTracker.Handle, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, ref D3D11ResourceFlags pFlags11, CompatibilitySharedFlags compatibilityFlags, ref ID3D12LifetimeTracker pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, ref D3D11ResourceFlags pFlags11, CompatibilitySharedFlags compatibilityFlags, ComPtr<ID3D12LifetimeTracker> pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)pLifetimeTracker.Handle, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, ref D3D11ResourceFlags pFlags11, CompatibilitySharedFlags compatibilityFlags, ref ID3D12LifetimeTracker pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, ref HeapProperties pHeapProperties, HeapFlags heapFlags, ResourceDesc* pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, ref D3D11ResourceFlags pFlags11, CompatibilitySharedFlags compatibilityFlags, ComPtr<ID3D12LifetimeTracker> pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)pLifetimeTracker.Handle, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateSharedResource(this ComPtr<ID3D12CompatibilityDevice> comObj, HeapProperties* pHeapProperties, HeapFlags heapFlags, ref ResourceDesc pDesc, ResourceStates initialResourceState, ClearValue* pOptimizedClearValue, ref D3D11ResourceFlags pFlags11, CompatibilitySharedFlags compatibilityFlags, ref ID3D12LifetimeTracker pLifetimeTracker, ID3D12SwapChainAssistant* pOwningSwapchain, Guid* riid, void** ppResource) 
		{
			ID3D12CompatibilityDevice* handle = comObj.Handle;
			fixed (ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, HeapProperties*, HeapFlags, ResourceDesc*, ResourceStates, ClearValue*, D3D11ResourceFlags*, CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, pHeapProperties, heapFlags, (ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}
	}
}
