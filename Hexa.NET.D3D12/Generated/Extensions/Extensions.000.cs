// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	public static unsafe partial class Extensions
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12Object> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12Object* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12Object> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12Object> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Object* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12Object> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12Object> comObj) 
		{
			ID3D12Object* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12Object> comObj) 
		{
			ID3D12Object* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Object> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12Object* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Object> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Object> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Object> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Object> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Object* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Object> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Object> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Object> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12Object> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12Object* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12Object> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Object> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D12Object* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Object> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Object> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Object> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12Object* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Object> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Object> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Object> comObj, char* name) 
		{
			ID3D12Object* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, char*, HResult>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Object> comObj, ReadOnlySpan<char> name) 
		{
			ID3D12Object* handle = comObj.Handle;
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, char*, HResult>)(handle->LpVtbl[6]))(handle, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Object> comObj, string name) 
		{
			ID3D12Object* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, char*, HResult>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12DeviceChild> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12DeviceChild> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12DeviceChild> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12DeviceChild> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12DeviceChild> comObj) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12DeviceChild> comObj) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12DeviceChild> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12DeviceChild> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12DeviceChild> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12DeviceChild> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12DeviceChild> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12DeviceChild> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12DeviceChild> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12DeviceChild> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12DeviceChild> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12DeviceChild> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12DeviceChild> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12DeviceChild> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12DeviceChild> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12DeviceChild> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12DeviceChild> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12DeviceChild> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12DeviceChild> comObj, char* name) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, char*, HResult>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12DeviceChild> comObj, ReadOnlySpan<char> name) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, char*, HResult>)(handle->LpVtbl[6]))(handle, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12DeviceChild> comObj, string name) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, char*, HResult>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12DeviceChild> comObj, Guid* riid, void** ppvDevice) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12DeviceChild> comObj, ref Guid riid, void** ppvDevice) 
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12DeviceChild> comObj, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			ppvDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12DeviceChild> comObj, ref Guid riid, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DeviceChild* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12RootSignature> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12RootSignature> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12RootSignature> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12RootSignature* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12RootSignature> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12RootSignature> comObj) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12RootSignature> comObj) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12RootSignature> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12RootSignature> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12RootSignature> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12RootSignature> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12RootSignature> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12RootSignature* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12RootSignature> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12RootSignature> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12RootSignature> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12RootSignature> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12RootSignature> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12RootSignature> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12RootSignature> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12RootSignature> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12RootSignature> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12RootSignature> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12RootSignature> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12RootSignature> comObj, char* name) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, char*, HResult>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12RootSignature> comObj, ReadOnlySpan<char> name) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, char*, HResult>)(handle->LpVtbl[6]))(handle, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12RootSignature> comObj, string name) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, char*, HResult>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12RootSignature> comObj, Guid* riid, void** ppvDevice) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12RootSignature> comObj, ref Guid riid, void** ppvDevice) 
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12RootSignature> comObj, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12RootSignature* handle = comObj.Handle;
			ppvDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12RootSignature> comObj, ref Guid riid, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12RootSignature* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12RootSignatureDeserializer> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12RootSignatureDeserializer* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignatureDeserializer*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12RootSignatureDeserializer> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12RootSignatureDeserializer* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignatureDeserializer*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12RootSignatureDeserializer> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12RootSignatureDeserializer* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignatureDeserializer*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12RootSignatureDeserializer> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12RootSignatureDeserializer* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignatureDeserializer*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12RootSignatureDeserializer> comObj) 
		{
			ID3D12RootSignatureDeserializer* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignatureDeserializer*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12RootSignatureDeserializer> comObj) 
		{
			ID3D12RootSignatureDeserializer* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignatureDeserializer*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static RootSignatureDesc* GetRootSignatureDesc(this ComPtr<ID3D12RootSignatureDeserializer> comObj) 
		{
			ID3D12RootSignatureDeserializer* handle = comObj.Handle;
			RootSignatureDesc* ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignatureDeserializer*, RootSignatureDesc*>)(handle->LpVtbl[3]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12VersionedRootSignatureDeserializer> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12VersionedRootSignatureDeserializer* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12VersionedRootSignatureDeserializer> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12VersionedRootSignatureDeserializer* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12VersionedRootSignatureDeserializer> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12VersionedRootSignatureDeserializer* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12VersionedRootSignatureDeserializer> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12VersionedRootSignatureDeserializer* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12VersionedRootSignatureDeserializer> comObj) 
		{
			ID3D12VersionedRootSignatureDeserializer* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12VersionedRootSignatureDeserializer> comObj) 
		{
			ID3D12VersionedRootSignatureDeserializer* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRootSignatureDescAtVersion(this ComPtr<ID3D12VersionedRootSignatureDeserializer> comObj, RootSignatureVersion convertToVersion, VersionedRootSignatureDesc** ppDesc) 
		{
			ID3D12VersionedRootSignatureDeserializer* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, RootSignatureVersion, VersionedRootSignatureDesc**, HResult>)(handle->LpVtbl[3]))(handle, convertToVersion, ppDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRootSignatureDescAtVersion(this ComPtr<ID3D12VersionedRootSignatureDeserializer> comObj, RootSignatureVersion convertToVersion, ref VersionedRootSignatureDesc* ppDesc) 
		{
			ID3D12VersionedRootSignatureDeserializer* handle = comObj.Handle;
			fixed (VersionedRootSignatureDesc** pppDesc = &ppDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, RootSignatureVersion, VersionedRootSignatureDesc**, HResult>)(handle->LpVtbl[3]))(handle, convertToVersion, (VersionedRootSignatureDesc**)pppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static VersionedRootSignatureDesc* GetUnconvertedRootSignatureDesc(this ComPtr<ID3D12VersionedRootSignatureDeserializer> comObj) 
		{
			ID3D12VersionedRootSignatureDeserializer* handle = comObj.Handle;
			VersionedRootSignatureDesc* ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, VersionedRootSignatureDesc*>)(handle->LpVtbl[4]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12Pageable> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12Pageable> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12Pageable> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Pageable* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12Pageable> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12Pageable> comObj) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12Pageable> comObj) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Pageable> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Pageable> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Pageable> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Pageable> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Pageable> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Pageable* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Pageable> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Pageable> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Pageable> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12Pageable> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12Pageable> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Pageable> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Pageable> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Pageable> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Pageable> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Pageable> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Pageable> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Pageable> comObj, char* name) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, char*, HResult>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Pageable> comObj, ReadOnlySpan<char> name) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, char*, HResult>)(handle->LpVtbl[6]))(handle, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Pageable> comObj, string name) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, char*, HResult>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12Pageable> comObj, Guid* riid, void** ppvDevice) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12Pageable> comObj, ref Guid riid, void** ppvDevice) 
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12Pageable> comObj, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Pageable* handle = comObj.Handle;
			ppvDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12Pageable> comObj, ref Guid riid, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Pageable* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12Heap> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12Heap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12Heap> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12Heap> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Heap* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12Heap> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12Heap> comObj) 
		{
			ID3D12Heap* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12Heap> comObj) 
		{
			ID3D12Heap* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Heap> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12Heap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Heap> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Heap> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Heap> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Heap> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Heap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Heap> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Heap> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Heap> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12Heap> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12Heap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12Heap> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Heap> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D12Heap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Heap> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Heap> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Heap> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12Heap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Heap> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Heap> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Heap> comObj, char* name) 
		{
			ID3D12Heap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, char*, HResult>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Heap> comObj, ReadOnlySpan<char> name) 
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, char*, HResult>)(handle->LpVtbl[6]))(handle, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Heap> comObj, string name) 
		{
			ID3D12Heap* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, char*, HResult>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12Heap> comObj, Guid* riid, void** ppvDevice) 
		{
			ID3D12Heap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12Heap> comObj, ref Guid riid, void** ppvDevice) 
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12Heap> comObj, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Heap* handle = comObj.Handle;
			ppvDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12Heap> comObj, ref Guid riid, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Heap* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HeapDesc GetDesc(this ComPtr<ID3D12Heap> comObj) 
		{
			ID3D12Heap* handle = comObj.Handle;
			HeapDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, HeapDesc>)(handle->LpVtbl[8]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12Resource> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12Resource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12Resource> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12Resource> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Resource* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12Resource> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12Resource> comObj) 
		{
			ID3D12Resource* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12Resource> comObj) 
		{
			ID3D12Resource* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Resource> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Resource> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Resource> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Resource> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Resource> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Resource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Resource> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Resource> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Resource> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12Resource> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12Resource> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Resource> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Resource> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Resource> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Resource> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Resource> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Resource> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Resource> comObj, char* name) 
		{
			ID3D12Resource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, char*, HResult>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Resource> comObj, ReadOnlySpan<char> name) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, char*, HResult>)(handle->LpVtbl[6]))(handle, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Resource> comObj, string name) 
		{
			ID3D12Resource* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, char*, HResult>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12Resource> comObj, Guid* riid, void** ppvDevice) 
		{
			ID3D12Resource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12Resource> comObj, ref Guid riid, void** ppvDevice) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12Resource> comObj, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Resource* handle = comObj.Handle;
			ppvDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12Resource> comObj, ref Guid riid, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Map(this ComPtr<ID3D12Resource> comObj, uint subresource, Range* pReadRange, void** ppData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, Range*, void**, HResult>)(handle->LpVtbl[8]))(handle, subresource, pReadRange, ppData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Map(this ComPtr<ID3D12Resource> comObj, uint subresource, ref Range pReadRange, void** ppData) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Range* ppReadRange = &pReadRange)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, Range*, void**, HResult>)(handle->LpVtbl[8]))(handle, subresource, (Range*)ppReadRange, ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Map<T>(this ComPtr<ID3D12Resource> comObj, uint subresource, Range* pReadRange, out ComPtr<T> ppData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Resource* handle = comObj.Handle;
			ppData = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, Range*, void**, HResult>)(handle->LpVtbl[8]))(handle, subresource, pReadRange, (void**)ppData.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Map<T>(this ComPtr<ID3D12Resource> comObj, uint subresource, ref Range pReadRange, out ComPtr<T> ppData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Range* ppReadRange = &pReadRange)
			{
				ppData = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, Range*, void**, HResult>)(handle->LpVtbl[8]))(handle, subresource, (Range*)ppReadRange, (void**)ppData.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Unmap(this ComPtr<ID3D12Resource> comObj, uint subresource, Range* pWrittenRange) 
		{
			ID3D12Resource* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, Range*, void>)(handle->LpVtbl[9]))(handle, subresource, pWrittenRange);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Unmap(this ComPtr<ID3D12Resource> comObj, uint subresource, ref Range pWrittenRange) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Range* ppWrittenRange = &pWrittenRange)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, Range*, void>)(handle->LpVtbl[9]))(handle, subresource, (Range*)ppWrittenRange);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ResourceDesc GetDesc(this ComPtr<ID3D12Resource> comObj) 
		{
			ID3D12Resource* handle = comObj.Handle;
			ResourceDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, ResourceDesc>)(handle->LpVtbl[10]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetGPUVirtualAddress(this ComPtr<ID3D12Resource> comObj) 
		{
			ID3D12Resource* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, ulong>)(handle->LpVtbl[11]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult WriteToSubresource(this ComPtr<ID3D12Resource> comObj, uint dstSubresource, Box* pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch) 
		{
			ID3D12Resource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, Box*, void*, uint, uint, HResult>)(handle->LpVtbl[12]))(handle, dstSubresource, pDstBox, pSrcData, srcRowPitch, srcDepthPitch);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult WriteToSubresource(this ComPtr<ID3D12Resource> comObj, uint dstSubresource, ref Box pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Box* ppDstBox = &pDstBox)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, Box*, void*, uint, uint, HResult>)(handle->LpVtbl[12]))(handle, dstSubresource, (Box*)ppDstBox, pSrcData, srcRowPitch, srcDepthPitch);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReadFromSubresource(this ComPtr<ID3D12Resource> comObj, void* pDstData, uint dstRowPitch, uint dstDepthPitch, uint srcSubresource, Box* pSrcBox) 
		{
			ID3D12Resource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, void*, uint, uint, uint, Box*, HResult>)(handle->LpVtbl[13]))(handle, pDstData, dstRowPitch, dstDepthPitch, srcSubresource, pSrcBox);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReadFromSubresource<T>(this ComPtr<ID3D12Resource> comObj, ComPtr<T> pDstData, uint dstRowPitch, uint dstDepthPitch, uint srcSubresource, Box* pSrcBox) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Resource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, void*, uint, uint, uint, Box*, HResult>)(handle->LpVtbl[13]))(handle, (void*)pDstData.Handle, dstRowPitch, dstDepthPitch, srcSubresource, pSrcBox);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReadFromSubresource(this ComPtr<ID3D12Resource> comObj, void* pDstData, uint dstRowPitch, uint dstDepthPitch, uint srcSubresource, ref Box pSrcBox) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Box* ppSrcBox = &pSrcBox)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, void*, uint, uint, uint, Box*, HResult>)(handle->LpVtbl[13]))(handle, pDstData, dstRowPitch, dstDepthPitch, srcSubresource, (Box*)ppSrcBox);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReadFromSubresource<T>(this ComPtr<ID3D12Resource> comObj, ComPtr<T> pDstData, uint dstRowPitch, uint dstDepthPitch, uint srcSubresource, ref Box pSrcBox) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (Box* ppSrcBox = &pSrcBox)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, void*, uint, uint, uint, Box*, HResult>)(handle->LpVtbl[13]))(handle, (void*)pDstData.Handle, dstRowPitch, dstDepthPitch, srcSubresource, (Box*)ppSrcBox);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetHeapProperties(this ComPtr<ID3D12Resource> comObj, HeapProperties* pHeapProperties, HeapFlags* pHeapFlags) 
		{
			ID3D12Resource* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, HeapProperties*, HeapFlags*, HResult>)(handle->LpVtbl[14]))(handle, pHeapProperties, pHeapFlags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetHeapProperties(this ComPtr<ID3D12Resource> comObj, ref HeapProperties pHeapProperties, HeapFlags* pHeapFlags) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, HeapProperties*, HeapFlags*, HResult>)(handle->LpVtbl[14]))(handle, (HeapProperties*)ppHeapProperties, pHeapFlags);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetHeapProperties(this ComPtr<ID3D12Resource> comObj, HeapProperties* pHeapProperties, ref HeapFlags pHeapFlags) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (HeapFlags* ppHeapFlags = &pHeapFlags)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, HeapProperties*, HeapFlags*, HResult>)(handle->LpVtbl[14]))(handle, pHeapProperties, (HeapFlags*)ppHeapFlags);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetHeapProperties(this ComPtr<ID3D12Resource> comObj, ref HeapProperties pHeapProperties, ref HeapFlags pHeapFlags) 
		{
			ID3D12Resource* handle = comObj.Handle;
			fixed (HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (HeapFlags* ppHeapFlags = &pHeapFlags)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, HeapProperties*, HeapFlags*, HResult>)(handle->LpVtbl[14]))(handle, (HeapProperties*)ppHeapProperties, (HeapFlags*)ppHeapFlags);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12CommandAllocator> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12CommandAllocator> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12CommandAllocator> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12CommandAllocator> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12CommandAllocator> comObj) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12CommandAllocator> comObj) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12CommandAllocator> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12CommandAllocator> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12CommandAllocator> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12CommandAllocator> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12CommandAllocator> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12CommandAllocator> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12CommandAllocator> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12CommandAllocator> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12CommandAllocator> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12CommandAllocator> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12CommandAllocator> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12CommandAllocator> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12CommandAllocator> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12CommandAllocator> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12CommandAllocator> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12CommandAllocator> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12CommandAllocator> comObj, char* name) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, char*, HResult>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12CommandAllocator> comObj, ReadOnlySpan<char> name) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, char*, HResult>)(handle->LpVtbl[6]))(handle, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12CommandAllocator> comObj, string name) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, char*, HResult>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12CommandAllocator> comObj, Guid* riid, void** ppvDevice) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12CommandAllocator> comObj, ref Guid riid, void** ppvDevice) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12CommandAllocator> comObj, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			ppvDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12CommandAllocator> comObj, ref Guid riid, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Reset(this ComPtr<ID3D12CommandAllocator> comObj) 
		{
			ID3D12CommandAllocator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, HResult>)(handle->LpVtbl[8]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12Fence> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12Fence* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12Fence> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12Fence> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12Fence> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12Fence> comObj) 
		{
			ID3D12Fence* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12Fence> comObj) 
		{
			ID3D12Fence* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Fence> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12Fence* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Fence> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Fence> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Fence> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Fence> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Fence> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Fence> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Fence> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12Fence> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12Fence* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12Fence> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Fence> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D12Fence* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Fence> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Fence> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Fence> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12Fence* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Fence> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Fence> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Fence> comObj, char* name) 
		{
			ID3D12Fence* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, char*, HResult>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Fence> comObj, ReadOnlySpan<char> name) 
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, char*, HResult>)(handle->LpVtbl[6]))(handle, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Fence> comObj, string name) 
		{
			ID3D12Fence* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, char*, HResult>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12Fence> comObj, Guid* riid, void** ppvDevice) 
		{
			ID3D12Fence* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12Fence> comObj, ref Guid riid, void** ppvDevice) 
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12Fence> comObj, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence* handle = comObj.Handle;
			ppvDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12Fence> comObj, ref Guid riid, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetCompletedValue(this ComPtr<ID3D12Fence> comObj) 
		{
			ID3D12Fence* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, ulong>)(handle->LpVtbl[8]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetEventOnCompletion(this ComPtr<ID3D12Fence> comObj, ulong value, nint hEvent) 
		{
			ID3D12Fence* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, ulong, nint, HResult>)(handle->LpVtbl[9]))(handle, value, hEvent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Signal(this ComPtr<ID3D12Fence> comObj, ulong value) 
		{
			ID3D12Fence* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, ulong, HResult>)(handle->LpVtbl[10]))(handle, value);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12Fence1> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12Fence1> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12Fence1> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence1* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12Fence1> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12Fence1> comObj) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12Fence1> comObj) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Fence1> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Fence1> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Fence1> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12Fence1> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Fence1> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Fence1> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Fence1> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12Fence1> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12Fence1> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12Fence1> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Fence1> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Fence1> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Fence1> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Fence1> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Fence1> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12Fence1> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Fence1> comObj, char* name) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, char*, HResult>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Fence1> comObj, ReadOnlySpan<char> name) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, char*, HResult>)(handle->LpVtbl[6]))(handle, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12Fence1> comObj, string name) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, char*, HResult>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12Fence1> comObj, Guid* riid, void** ppvDevice) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12Fence1> comObj, ref Guid riid, void** ppvDevice) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12Fence1> comObj, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence1* handle = comObj.Handle;
			ppvDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12Fence1> comObj, ref Guid riid, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12Fence1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetCompletedValue(this ComPtr<ID3D12Fence1> comObj) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, ulong>)(handle->LpVtbl[8]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetEventOnCompletion(this ComPtr<ID3D12Fence1> comObj, ulong value, nint hEvent) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, ulong, nint, HResult>)(handle->LpVtbl[9]))(handle, value, hEvent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Signal(this ComPtr<ID3D12Fence1> comObj, ulong value) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, ulong, HResult>)(handle->LpVtbl[10]))(handle, value);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static FenceFlags GetCreationFlags(this ComPtr<ID3D12Fence1> comObj) 
		{
			ID3D12Fence1* handle = comObj.Handle;
			FenceFlags ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, FenceFlags>)(handle->LpVtbl[11]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12PipelineState> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12PipelineState> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12PipelineState> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineState* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12PipelineState> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12PipelineState> comObj) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12PipelineState> comObj) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12PipelineState> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12PipelineState> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12PipelineState> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12PipelineState> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12PipelineState> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineState* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12PipelineState> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12PipelineState> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12PipelineState> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12PipelineState> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12PipelineState> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12PipelineState> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12PipelineState> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12PipelineState> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12PipelineState> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12PipelineState> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12PipelineState> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12PipelineState> comObj, char* name) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, char*, HResult>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12PipelineState> comObj, ReadOnlySpan<char> name) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, char*, HResult>)(handle->LpVtbl[6]))(handle, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12PipelineState> comObj, string name) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, char*, HResult>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12PipelineState> comObj, Guid* riid, void** ppvDevice) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12PipelineState> comObj, ref Guid riid, void** ppvDevice) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12PipelineState> comObj, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineState* handle = comObj.Handle;
			ppvDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12PipelineState> comObj, ref Guid riid, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetCachedBlob(this ComPtr<ID3D12PipelineState> comObj, ID3D10Blob** ppBlob) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, ID3D10Blob**, HResult>)(handle->LpVtbl[8]))(handle, ppBlob);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetCachedBlob(this ComPtr<ID3D12PipelineState> comObj, ref ID3D10Blob* ppBlob) 
		{
			ID3D12PipelineState* handle = comObj.Handle;
			fixed (ID3D10Blob** pppBlob = &ppBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, ID3D10Blob**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D10Blob**)pppBlob);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12DescriptorHeap> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12DescriptorHeap> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12DescriptorHeap> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12DescriptorHeap> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12DescriptorHeap> comObj) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12DescriptorHeap> comObj) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12DescriptorHeap> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12DescriptorHeap> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12DescriptorHeap> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12DescriptorHeap> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12DescriptorHeap> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12DescriptorHeap> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12DescriptorHeap> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12DescriptorHeap> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12DescriptorHeap> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12DescriptorHeap> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12DescriptorHeap> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12DescriptorHeap> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12DescriptorHeap> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12DescriptorHeap> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12DescriptorHeap> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12DescriptorHeap> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12DescriptorHeap> comObj, char* name) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, char*, HResult>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12DescriptorHeap> comObj, ReadOnlySpan<char> name) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, char*, HResult>)(handle->LpVtbl[6]))(handle, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12DescriptorHeap> comObj, string name) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, char*, HResult>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12DescriptorHeap> comObj, Guid* riid, void** ppvDevice) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12DescriptorHeap> comObj, ref Guid riid, void** ppvDevice) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12DescriptorHeap> comObj, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			ppvDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12DescriptorHeap> comObj, ref Guid riid, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static DescriptorHeapDesc GetDesc(this ComPtr<ID3D12DescriptorHeap> comObj) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			DescriptorHeapDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, DescriptorHeapDesc>)(handle->LpVtbl[8]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static CpuDescriptorHandle GetCPUDescriptorHandleForHeapStart(this ComPtr<ID3D12DescriptorHeap> comObj) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			CpuDescriptorHandle ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, CpuDescriptorHandle>)(handle->LpVtbl[9]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static GpuDescriptorHandle GetGPUDescriptorHandleForHeapStart(this ComPtr<ID3D12DescriptorHeap> comObj) 
		{
			ID3D12DescriptorHeap* handle = comObj.Handle;
			GpuDescriptorHandle ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, GpuDescriptorHandle>)(handle->LpVtbl[10]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12QueryHeap> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12QueryHeap> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12QueryHeap> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12QueryHeap> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12QueryHeap> comObj) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12QueryHeap> comObj) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12QueryHeap> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12QueryHeap> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12QueryHeap> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12QueryHeap> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12QueryHeap> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12QueryHeap> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12QueryHeap> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12QueryHeap> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12QueryHeap> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12QueryHeap> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12QueryHeap> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12QueryHeap> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12QueryHeap> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12QueryHeap> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12QueryHeap> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12QueryHeap> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12QueryHeap> comObj, char* name) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, char*, HResult>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12QueryHeap> comObj, ReadOnlySpan<char> name) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, char*, HResult>)(handle->LpVtbl[6]))(handle, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12QueryHeap> comObj, string name) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, char*, HResult>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12QueryHeap> comObj, Guid* riid, void** ppvDevice) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12QueryHeap> comObj, ref Guid riid, void** ppvDevice) 
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12QueryHeap> comObj, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			ppvDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12QueryHeap> comObj, ref Guid riid, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12QueryHeap* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12CommandSignature> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12CommandSignature* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandSignature*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12CommandSignature> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12CommandSignature* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandSignature*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12CommandSignature> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandSignature* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandSignature*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12CommandSignature> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandSignature* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandSignature*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12CommandSignature> comObj) 
		{
			ID3D12CommandSignature* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandSignature*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}
	}
}
