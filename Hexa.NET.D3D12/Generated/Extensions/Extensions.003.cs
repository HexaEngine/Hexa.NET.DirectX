// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	public static unsafe partial class Extensions
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
						{
							((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[60]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, pDependentSubresourceRanges);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource** ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, ppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
			{
				fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, pDstBuffer, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
						{
							((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AtomicCopyBufferUINT64(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstBuffer, ulong dstOffset, ComPtr<ID3D12Resource> pSrcBuffer, ulong srcOffset, uint dependencies, ComPtr<ID3D12Resource> ppDependentResources, ref SubresourceRangeUint64 pDependentSubresourceRanges) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, SubresourceRangeUint64*, void>)(handle->LpVtbl[61]))(handle, (ID3D12Resource*)pDstBuffer.Handle, dstOffset, (ID3D12Resource*)pSrcBuffer.Handle, srcOffset, dependencies, (ID3D12Resource**)ppDependentResources.Handle, (SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void OMSetDepthBounds(this ComPtr<ID3D12GraphicsCommandList2> comObj, float min, float max) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, float, float, void>)(handle->LpVtbl[62]))(handle, min, max);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetSamplePositions(this ComPtr<ID3D12GraphicsCommandList2> comObj, uint numSamplesPerPixel, uint numPixels, SamplePosition* pSamplePositions) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, uint, SamplePosition*, void>)(handle->LpVtbl[63]))(handle, numSamplesPerPixel, numPixels, pSamplePositions);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetSamplePositions(this ComPtr<ID3D12GraphicsCommandList2> comObj, uint numSamplesPerPixel, uint numPixels, ref SamplePosition pSamplePositions) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (SamplePosition* ppSamplePositions = &pSamplePositions)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, uint, SamplePosition*, void>)(handle->LpVtbl[63]))(handle, numSamplesPerPixel, numPixels, (SamplePosition*)ppSamplePositions);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, pDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, pSrcRect, format, resolveMode);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, pSrcRect, format, resolveMode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)pDstResource.Handle, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, pSrcRect, format, resolveMode);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ref ID3D12Resource pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, pDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, pSrcRect, format, resolveMode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ComPtr<ID3D12Resource> pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, pDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)pSrcResource.Handle, srcSubresource, pSrcRect, format, resolveMode);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, ref ID3D12Resource pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, pSrcRect, format, resolveMode);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstResource, uint dstSubresource, uint dstX, uint dstY, ComPtr<ID3D12Resource> pSrcResource, uint srcSubresource, Rect32* pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)pDstResource.Handle, dstSubresource, dstX, dstY, (ID3D12Resource*)pSrcResource.Handle, srcSubresource, pSrcRect, format, resolveMode);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (Rect32* ppSrcRect = &pSrcRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, pDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (Rect32* ppSrcRect = &pSrcRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (Rect32* ppSrcRect = &pSrcRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)pDstResource.Handle, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ref ID3D12Resource pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				fixed (Rect32* ppSrcRect = &pSrcRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, pDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ComPtr<ID3D12Resource> pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (Rect32* ppSrcRect = &pSrcRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, pDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)pSrcResource.Handle, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ref ID3D12Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, ref ID3D12Resource pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (Rect32* ppSrcRect = &pSrcRect)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResolveSubresourceRegion(this ComPtr<ID3D12GraphicsCommandList2> comObj, ComPtr<ID3D12Resource> pDstResource, uint dstSubresource, uint dstX, uint dstY, ComPtr<ID3D12Resource> pSrcResource, uint srcSubresource, ref Rect32 pSrcRect, Format format, ResolveMode resolveMode) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (Rect32* ppSrcRect = &pSrcRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, Format, ResolveMode, void>)(handle->LpVtbl[64]))(handle, (ID3D12Resource*)pDstResource.Handle, dstSubresource, dstX, dstY, (ID3D12Resource*)pSrcResource.Handle, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetViewInstanceMask(this ComPtr<ID3D12GraphicsCommandList2> comObj, uint mask) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, void>)(handle->LpVtbl[65]))(handle, mask);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void WriteBufferImmediate(this ComPtr<ID3D12GraphicsCommandList2> comObj, uint count, WritebufferimmediateParameter* pParams, WritebufferimmediateMode* pModes) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, WritebufferimmediateParameter*, WritebufferimmediateMode*, void>)(handle->LpVtbl[66]))(handle, count, pParams, pModes);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void WriteBufferImmediate(this ComPtr<ID3D12GraphicsCommandList2> comObj, uint count, ref WritebufferimmediateParameter pParams, WritebufferimmediateMode* pModes) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (WritebufferimmediateParameter* ppParams = &pParams)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, WritebufferimmediateParameter*, WritebufferimmediateMode*, void>)(handle->LpVtbl[66]))(handle, count, (WritebufferimmediateParameter*)ppParams, pModes);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void WriteBufferImmediate(this ComPtr<ID3D12GraphicsCommandList2> comObj, uint count, WritebufferimmediateParameter* pParams, ref WritebufferimmediateMode pModes) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (WritebufferimmediateMode* ppModes = &pModes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, WritebufferimmediateParameter*, WritebufferimmediateMode*, void>)(handle->LpVtbl[66]))(handle, count, pParams, (WritebufferimmediateMode*)ppModes);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void WriteBufferImmediate(this ComPtr<ID3D12GraphicsCommandList2> comObj, uint count, ref WritebufferimmediateParameter pParams, ref WritebufferimmediateMode pModes) 
		{
			ID3D12GraphicsCommandList2* handle = comObj.Handle;
			fixed (WritebufferimmediateParameter* ppParams = &pParams)
			{
				fixed (WritebufferimmediateMode* ppModes = &pModes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, WritebufferimmediateParameter*, WritebufferimmediateMode*, void>)(handle->LpVtbl[66]))(handle, count, (WritebufferimmediateParameter*)ppParams, (WritebufferimmediateMode*)ppModes);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12CommandQueue> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D12CommandQueue> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12CommandQueue> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D12CommandQueue> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D12CommandQueue> comObj) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D12CommandQueue> comObj) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12CommandQueue> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12CommandQueue> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12CommandQueue> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData(this ComPtr<ID3D12CommandQueue> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12CommandQueue> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12CommandQueue> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12CommandQueue> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPrivateData<T>(this ComPtr<ID3D12CommandQueue> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12CommandQueue> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D12CommandQueue> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint, void*, HResult>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12CommandQueue> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12CommandQueue> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12CommandQueue> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12CommandQueue> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12CommandQueue> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D12CommandQueue> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12CommandQueue> comObj, char* name) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, char*, HResult>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12CommandQueue> comObj, ReadOnlySpan<char> name) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (char* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, char*, HResult>)(handle->LpVtbl[6]))(handle, (char*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetName(this ComPtr<ID3D12CommandQueue> comObj, string name) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, char*, HResult>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12CommandQueue> comObj, Guid* riid, void** ppvDevice) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, riid, ppvDevice);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice(this ComPtr<ID3D12CommandQueue> comObj, ref Guid riid, void** ppvDevice) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12CommandQueue> comObj, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			ppvDevice = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvDevice.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDevice<T>(this ComPtr<ID3D12CommandQueue> comObj, ref Guid riid, out ComPtr<T> ppvDevice) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvDevice = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, HResult>)(handle->LpVtbl[7]))(handle, (Guid*)priid, (void**)ppvDevice.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ref ID3D12Resource pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)ppResource, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ComPtr<ID3D12Resource> pResource, uint numResourceRegions, ref TiledResourceCoordinate pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ComPtr<ID3D12Heap> pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, (ID3D12Resource*)pResource.Handle, numResourceRegions, (TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)pHeap.Handle, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTileMappings(this ComPtr<ID3D12CommandQueue> comObj, ID3D12Resource* pResource, uint numResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, ref TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, TileMappingFlags flags) 
		{
			ID3D12CommandQueue* handle = comObj.Handle;
			fixed (TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(handle->LpVtbl[8]))(handle, pResource, numResourceRegions, pResourceRegionStartCoordinates, (TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}
	}
}
