// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct BlendDesc1
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public Bool32 AlphaToCoverageEnable;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Bool32 IndependentBlendEnable;

		/// <summary>
		/// To be documented.
		/// </summary>
		public RenderTargetBlendDesc1 RenderTarget_0;
		public RenderTargetBlendDesc1 RenderTarget_1;
		public RenderTargetBlendDesc1 RenderTarget_2;
		public RenderTargetBlendDesc1 RenderTarget_3;
		public RenderTargetBlendDesc1 RenderTarget_4;
		public RenderTargetBlendDesc1 RenderTarget_5;
		public RenderTargetBlendDesc1 RenderTarget_6;
		public RenderTargetBlendDesc1 RenderTarget_7;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe BlendDesc1(Bool32 alphaToCoverageEnable = default, Bool32 independentBlendEnable = default, RenderTargetBlendDesc1* renderTarget = default)
		{
			AlphaToCoverageEnable = alphaToCoverageEnable;
			IndependentBlendEnable = independentBlendEnable;
			if (renderTarget != default(RenderTargetBlendDesc1*))
			{
				RenderTarget_0 = renderTarget[0];
				RenderTarget_1 = renderTarget[1];
				RenderTarget_2 = renderTarget[2];
				RenderTarget_3 = renderTarget[3];
				RenderTarget_4 = renderTarget[4];
				RenderTarget_5 = renderTarget[5];
				RenderTarget_6 = renderTarget[6];
				RenderTarget_7 = renderTarget[7];
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe BlendDesc1(Bool32 alphaToCoverageEnable = default, Bool32 independentBlendEnable = default, Span<RenderTargetBlendDesc1> renderTarget = default)
		{
			AlphaToCoverageEnable = alphaToCoverageEnable;
			IndependentBlendEnable = independentBlendEnable;
			if (renderTarget != default(Span<RenderTargetBlendDesc1>))
			{
				RenderTarget_0 = renderTarget[0];
				RenderTarget_1 = renderTarget[1];
				RenderTarget_2 = renderTarget[2];
				RenderTarget_3 = renderTarget[3];
				RenderTarget_4 = renderTarget[4];
				RenderTarget_5 = renderTarget[5];
				RenderTarget_6 = renderTarget[6];
				RenderTarget_7 = renderTarget[7];
			}
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<RenderTargetBlendDesc1> RenderTarget
		
		{
			get
			{
				fixed (RenderTargetBlendDesc1* p = &this.RenderTarget_0)
				{
					return new Span<RenderTargetBlendDesc1>(p, 8);
				}
			}
		}
	}

}
