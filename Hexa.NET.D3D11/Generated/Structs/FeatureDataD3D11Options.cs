// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	/// <summary>
	/// =============================================================================<br/>
	/// In the D3D11_FEATURE_DATA_D3D11_OPTIONS struct below, <br/>
	/// the following groupings of capabilities will always be set identically. <br/>
	/// That is, all the BOOLs in a grouping will be TRUE or FALSE together. <br/>
	/// Group: DiscardAPIsSeenByDriver, FlagsForUpdateAndCopySeenByDriver <br/>
	/// Group: ClearView, CopyWithOverlap, ConstantBufferPartialUpdate <br/>
	/// ConstantBufferOffsetting, MapNoOverwriteOnDynamicConstantBuffer <br/>
	/// Group: MapNoOverwriteOnDynamicBufferSRV, <br/>
	/// MultisampleRTVWithForcedSampleCountOne <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FeatureDataD3D11Options
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int OutputMergerLogicOp;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int UAVOnlyRenderingForcedSampleCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DiscardAPIsSeenByDriver;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FlagsForUpdateAndCopySeenByDriver;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ClearView;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int CopyWithOverlap;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ConstantBufferPartialUpdate;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ConstantBufferOffsetting;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int MapNoOverwriteOnDynamicConstantBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int MapNoOverwriteOnDynamicBufferSRV;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int MultisampleRTVWithForcedSampleCountOne;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int SAD4ShaderInstructions;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ExtendedDoublesShaderInstructions;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ExtendedResourceSharing;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe FeatureDataD3D11Options(int outputMergerLogicOp = default, int uavOnlyRenderingForcedSampleCount = default, int discardApIsSeenByDriver = default, int flagsForUpdateAndCopySeenByDriver = default, int clearView = default, int copyWithOverlap = default, int constantBufferPartialUpdate = default, int constantBufferOffsetting = default, int mapNoOverwriteOnDynamicConstantBuffer = default, int mapNoOverwriteOnDynamicBufferSrv = default, int multisampleRtvWithForcedSampleCountOne = default, int sad4ShaderInstructions = default, int extendedDoublesShaderInstructions = default, int extendedResourceSharing = default)
		{
			OutputMergerLogicOp = outputMergerLogicOp;
			UAVOnlyRenderingForcedSampleCount = uavOnlyRenderingForcedSampleCount;
			DiscardAPIsSeenByDriver = discardApIsSeenByDriver;
			FlagsForUpdateAndCopySeenByDriver = flagsForUpdateAndCopySeenByDriver;
			ClearView = clearView;
			CopyWithOverlap = copyWithOverlap;
			ConstantBufferPartialUpdate = constantBufferPartialUpdate;
			ConstantBufferOffsetting = constantBufferOffsetting;
			MapNoOverwriteOnDynamicConstantBuffer = mapNoOverwriteOnDynamicConstantBuffer;
			MapNoOverwriteOnDynamicBufferSRV = mapNoOverwriteOnDynamicBufferSrv;
			MultisampleRTVWithForcedSampleCountOne = multisampleRtvWithForcedSampleCountOne;
			SAD4ShaderInstructions = sad4ShaderInstructions;
			ExtendedDoublesShaderInstructions = extendedDoublesShaderInstructions;
			ExtendedResourceSharing = extendedResourceSharing;
		}


	}

}
