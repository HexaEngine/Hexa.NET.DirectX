// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	/// <summary>
	/// 8d536ca1-0cca-4956-a837-786963755584<br/>
	/// </summary>
	[Guid("8d536ca1-0cca-4956-a837-786963755584")]
	public partial struct ID3D11ShaderReflection : IComObject, IComObject<ID3D11ShaderReflection>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8d536ca1-0cca-4956-a837-786963755584");

		public unsafe ID3D11ShaderReflection (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int QueryInterface(Guid* riid, void** ppvObject) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int QueryInterface(ref Guid riid, void** ppvObject) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int QueryInterface<T>(out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int QueryInterface<T>(ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint AddRef() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint Release() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int QueryInterface(Guid* iid, ref void* ppv) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (void** pppv = &ppv)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(LpVtbl[3]))(ptr, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int QueryInterface(ref Guid iid, ref void* ppv) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(LpVtbl[3]))(ptr, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetDesc(ShaderDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, ShaderDesc*, int>)(LpVtbl[4]))(ptr, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetDesc(ref ShaderDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ShaderDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, ShaderDesc*, int>)(LpVtbl[4]))(ptr, (ShaderDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByIndex(uint index) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, ID3D11ShaderReflectionConstantBuffer*>)(LpVtbl[5]))(ptr, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(byte* name) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(LpVtbl[6]))(ptr, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(ReadOnlySpan<byte> name) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(LpVtbl[6]))(ptr, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(string name) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(LpVtbl[6]))(ptr, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetResourceBindingDesc(uint resourceIndex, ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, ShaderInputBindDesc*, int>)(LpVtbl[7]))(ptr, resourceIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetResourceBindingDesc(uint resourceIndex, ref ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ShaderInputBindDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, ShaderInputBindDesc*, int>)(LpVtbl[7]))(ptr, resourceIndex, (ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetInputParameterDesc(uint parameterIndex, SignatureParameterDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, SignatureParameterDesc*, int>)(LpVtbl[8]))(ptr, parameterIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetInputParameterDesc(uint parameterIndex, ref SignatureParameterDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SignatureParameterDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, SignatureParameterDesc*, int>)(LpVtbl[8]))(ptr, parameterIndex, (SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetOutputParameterDesc(uint parameterIndex, SignatureParameterDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, SignatureParameterDesc*, int>)(LpVtbl[9]))(ptr, parameterIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetOutputParameterDesc(uint parameterIndex, ref SignatureParameterDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SignatureParameterDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, SignatureParameterDesc*, int>)(LpVtbl[9]))(ptr, parameterIndex, (SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetPatchConstantParameterDesc(uint parameterIndex, SignatureParameterDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, SignatureParameterDesc*, int>)(LpVtbl[10]))(ptr, parameterIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetPatchConstantParameterDesc(uint parameterIndex, ref SignatureParameterDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SignatureParameterDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, SignatureParameterDesc*, int>)(LpVtbl[10]))(ptr, parameterIndex, (SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ID3D11ShaderReflectionVariable* GetVariableByName(byte* name) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionVariable*>)(LpVtbl[11]))(ptr, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ID3D11ShaderReflectionVariable* GetVariableByName(ReadOnlySpan<byte> name) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionVariable*>)(LpVtbl[11]))(ptr, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ID3D11ShaderReflectionVariable* GetVariableByName(string name) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionVariable*>)(LpVtbl[11]))(ptr, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetResourceBindingDescByName(byte* name, ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ShaderInputBindDesc*, int>)(LpVtbl[12]))(ptr, name, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetResourceBindingDescByName(ReadOnlySpan<byte> name, ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pname = name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ShaderInputBindDesc*, int>)(LpVtbl[12]))(ptr, (byte*)pname, pDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetResourceBindingDescByName(string name, ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ShaderInputBindDesc*, int>)(LpVtbl[12]))(ptr, pStr0, pDesc);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetResourceBindingDescByName(byte* name, ref ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ShaderInputBindDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ShaderInputBindDesc*, int>)(LpVtbl[12]))(ptr, name, (ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetResourceBindingDescByName(ReadOnlySpan<byte> name, ref ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pname = name)
			{
				fixed (ShaderInputBindDesc* ppDesc = &pDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ShaderInputBindDesc*, int>)(LpVtbl[12]))(ptr, (byte*)pname, (ShaderInputBindDesc*)ppDesc);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetResourceBindingDescByName(string name, ref ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ShaderInputBindDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ShaderInputBindDesc*, int>)(LpVtbl[12]))(ptr, pStr0, (ShaderInputBindDesc*)ppDesc);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetMovInstructionCount() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[13]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetMovcInstructionCount() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[14]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetConversionInstructionCount() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[15]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetBitwiseInstructionCount() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[16]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe Primitive GetGSInputPrimitive() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Primitive ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Primitive>)(LpVtbl[17]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int IsSampleFrequencyShader() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, int>)(LpVtbl[18]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetNumInterfaceSlots() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[19]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetMinFeatureLevel(FeatureLevel* pLevel) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, FeatureLevel*, int>)(LpVtbl[20]))(ptr, pLevel);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe int GetMinFeatureLevel(ref FeatureLevel pLevel) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (FeatureLevel* ppLevel = &pLevel)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, FeatureLevel*, int>)(LpVtbl[20]))(ptr, (FeatureLevel*)ppLevel);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetThreadGroupSize(uint* pSizeX, uint* pSizeY, uint* pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, pSizeX, pSizeY, pSizeZ);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetThreadGroupSize(ref uint pSizeX, uint* pSizeY, uint* pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, (uint*)ppSizeX, pSizeY, pSizeZ);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetThreadGroupSize(uint* pSizeX, ref uint pSizeY, uint* pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeY = &pSizeY)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, pSizeX, (uint*)ppSizeY, pSizeZ);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetThreadGroupSize(ref uint pSizeX, ref uint pSizeY, uint* pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeY = &pSizeY)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, (uint*)ppSizeX, (uint*)ppSizeY, pSizeZ);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetThreadGroupSize(uint* pSizeX, uint* pSizeY, ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeZ = &pSizeZ)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, pSizeX, pSizeY, (uint*)ppSizeZ);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetThreadGroupSize(ref uint pSizeX, uint* pSizeY, ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeZ = &pSizeZ)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, (uint*)ppSizeX, pSizeY, (uint*)ppSizeZ);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetThreadGroupSize(uint* pSizeX, ref uint pSizeY, ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeY = &pSizeY)
			{
				fixed (uint* ppSizeZ = &pSizeZ)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, pSizeX, (uint*)ppSizeY, (uint*)ppSizeZ);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetThreadGroupSize(ref uint pSizeX, ref uint pSizeY, ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeY = &pSizeY)
				{
					fixed (uint* ppSizeZ = &pSizeZ)
					{
						uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, (uint*)ppSizeX, (uint*)ppSizeY, (uint*)ppSizeZ);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe ulong GetRequiresFlags() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, ulong>)(LpVtbl[22]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11ShaderReflection value)
		{
			return Unsafe.As<ID3D11ShaderReflection, IUnknown>(ref value);
		}

	}

}
