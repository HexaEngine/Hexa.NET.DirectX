// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	/// <summary>
	/// {54133220-1CE8-43D3-8236-9855C5CEECFF}<br/>
	/// </summary>
	[Guid("54133220-1ce8-43d3-8236-9855c5ceecff")]
	public partial struct ID3D11FunctionLinkingGraph : IComObject, IComObject<ID3D11FunctionLinkingGraph>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("54133220-1ce8-43d3-8236-9855c5ceecff");

		public unsafe ID3D11FunctionLinkingGraph (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(Guid* riid, void** ppvObject) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, Guid*, void**, HResult>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(ref Guid riid, void** ppvObject) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface<T>(out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface<T>(ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint AddRef() 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint Release() 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(Guid* iid, ref void* ppv) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (void** pppv = &ppv)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(ref Guid iid, ref void* ppv) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateModuleInstance(ID3D11ModuleInstance** ppModuleInstance, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, HResult>)(LpVtbl[4]))(ptr, ppModuleInstance, ppErrorBuffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateModuleInstance(ref ID3D11ModuleInstance* ppModuleInstance, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance** pppModuleInstance = &ppModuleInstance)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, HResult>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance**)pppModuleInstance, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateModuleInstance(ref ComPtr<ID3D11ModuleInstance> ppModuleInstance, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ComPtr<ID3D11ModuleInstance>* pppModuleInstance = &ppModuleInstance)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, HResult>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance**)pppModuleInstance, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateModuleInstance(ID3D11ModuleInstance** ppModuleInstance, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, HResult>)(LpVtbl[4]))(ptr, ppModuleInstance, (ID3D10Blob**)pppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateModuleInstance(ref ID3D11ModuleInstance* ppModuleInstance, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance** pppModuleInstance = &ppModuleInstance)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, HResult>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance**)pppModuleInstance, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateModuleInstance(ref ComPtr<ID3D11ModuleInstance> ppModuleInstance, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ComPtr<ID3D11ModuleInstance>* pppModuleInstance = &ppModuleInstance)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, HResult>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance**)pppModuleInstance, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetInputSignature(ParameterDesc* pInputParameters, uint cInputParameters, ID3D11LinkingNode** ppInputNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[5]))(ptr, pInputParameters, cInputParameters, ppInputNode);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetInputSignature(ref ParameterDesc pInputParameters, uint cInputParameters, ID3D11LinkingNode** ppInputNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ParameterDesc* ppInputParameters = &pInputParameters)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[5]))(ptr, (ParameterDesc*)ppInputParameters, cInputParameters, ppInputNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetInputSignature(ParameterDesc* pInputParameters, uint cInputParameters, ref ID3D11LinkingNode* ppInputNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode** pppInputNode = &ppInputNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[5]))(ptr, pInputParameters, cInputParameters, (ID3D11LinkingNode**)pppInputNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetInputSignature(ParameterDesc* pInputParameters, uint cInputParameters, out ComPtr<ID3D11LinkingNode> ppInputNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppInputNode = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[5]))(ptr, pInputParameters, cInputParameters, (ID3D11LinkingNode**)ppInputNode.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetInputSignature(ref ParameterDesc pInputParameters, uint cInputParameters, ref ID3D11LinkingNode* ppInputNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ParameterDesc* ppInputParameters = &pInputParameters)
			{
				fixed (ID3D11LinkingNode** pppInputNode = &ppInputNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[5]))(ptr, (ParameterDesc*)ppInputParameters, cInputParameters, (ID3D11LinkingNode**)pppInputNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetInputSignature(ref ParameterDesc pInputParameters, uint cInputParameters, out ComPtr<ID3D11LinkingNode> ppInputNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ParameterDesc* ppInputParameters = &pInputParameters)
			{
				ppInputNode = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[5]))(ptr, (ParameterDesc*)ppInputParameters, cInputParameters, (ID3D11LinkingNode**)ppInputNode.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetOutputSignature(ParameterDesc* pOutputParameters, uint cOutputParameters, ID3D11LinkingNode** ppOutputNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[6]))(ptr, pOutputParameters, cOutputParameters, ppOutputNode);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetOutputSignature(ref ParameterDesc pOutputParameters, uint cOutputParameters, ID3D11LinkingNode** ppOutputNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ParameterDesc* ppOutputParameters = &pOutputParameters)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[6]))(ptr, (ParameterDesc*)ppOutputParameters, cOutputParameters, ppOutputNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetOutputSignature(ParameterDesc* pOutputParameters, uint cOutputParameters, ref ID3D11LinkingNode* ppOutputNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode** pppOutputNode = &ppOutputNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[6]))(ptr, pOutputParameters, cOutputParameters, (ID3D11LinkingNode**)pppOutputNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetOutputSignature(ParameterDesc* pOutputParameters, uint cOutputParameters, out ComPtr<ID3D11LinkingNode> ppOutputNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppOutputNode = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[6]))(ptr, pOutputParameters, cOutputParameters, (ID3D11LinkingNode**)ppOutputNode.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetOutputSignature(ref ParameterDesc pOutputParameters, uint cOutputParameters, ref ID3D11LinkingNode* ppOutputNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ParameterDesc* ppOutputParameters = &pOutputParameters)
			{
				fixed (ID3D11LinkingNode** pppOutputNode = &ppOutputNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[6]))(ptr, (ParameterDesc*)ppOutputParameters, cOutputParameters, (ID3D11LinkingNode**)pppOutputNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetOutputSignature(ref ParameterDesc pOutputParameters, uint cOutputParameters, out ComPtr<ID3D11LinkingNode> ppOutputNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ParameterDesc* ppOutputParameters = &pOutputParameters)
			{
				ppOutputNode = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[6]))(ptr, (ParameterDesc*)ppOutputParameters, cOutputParameters, (ID3D11LinkingNode**)ppOutputNode.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, ppCallNode);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(ReadOnlySpan<byte> pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, (byte*)ppModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, ppCallNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(string pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pStr0, pModuleWithFunctionPrototype, pFunctionName, ppCallNode);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, ppCallNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ComPtr<ID3D11Module> pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, (ID3D11Module*)pModuleWithFunctionPrototype.Handle, pFunctionName, ppCallNode);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(ReadOnlySpan<byte> pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, (byte*)ppModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, ppCallNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(string pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pStr0, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, ppCallNode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppFunctionName = pFunctionName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, pModuleWithFunctionPrototype, (byte*)ppFunctionName, ppCallNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, string pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pFunctionName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pFunctionName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pFunctionName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pStr0, ppCallNode);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(ReadOnlySpan<byte> pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (byte* ppFunctionName = pFunctionName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, (byte*)ppModuleInstanceNamespace, pModuleWithFunctionPrototype, (byte*)ppFunctionName, ppCallNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(string pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, string pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pFunctionName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pFunctionName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pFunctionName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pStr0, pModuleWithFunctionPrototype, pStr1, ppCallNode);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				fixed (byte* ppFunctionName = pFunctionName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, (byte*)ppFunctionName, ppCallNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, string pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pFunctionName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pFunctionName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pFunctionName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pStr0, ppCallNode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(ReadOnlySpan<byte> pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
				{
					fixed (byte* ppFunctionName = pFunctionName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, (byte*)ppModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, (byte*)ppFunctionName, ppCallNode);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(string pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, string pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pFunctionName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pFunctionName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pFunctionName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pStr0, (ID3D11Module*)ppModuleWithFunctionPrototype, pStr1, ppCallNode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, out ComPtr<ID3D11LinkingNode> ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppCallNode = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)ppCallNode.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(ReadOnlySpan<byte> pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, (byte*)ppModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(string pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pStr0, pModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ComPtr<ID3D11Module> pModuleWithFunctionPrototype, byte* pFunctionName, out ComPtr<ID3D11LinkingNode> ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppCallNode = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, (ID3D11Module*)pModuleWithFunctionPrototype.Handle, pFunctionName, (ID3D11LinkingNode**)ppCallNode.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(ReadOnlySpan<byte> pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
				{
					fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, (byte*)ppModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(string pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pStr0, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppFunctionName = pFunctionName)
			{
				fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, pModuleWithFunctionPrototype, (byte*)ppFunctionName, (ID3D11LinkingNode**)pppCallNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, string pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pFunctionName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pFunctionName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pFunctionName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pStr0, (ID3D11LinkingNode**)pppCallNode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(ReadOnlySpan<byte> pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (byte* ppFunctionName = pFunctionName)
				{
					fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, (byte*)ppModuleInstanceNamespace, pModuleWithFunctionPrototype, (byte*)ppFunctionName, (ID3D11LinkingNode**)pppCallNode);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(string pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, string pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pFunctionName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pFunctionName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pFunctionName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pStr0, pModuleWithFunctionPrototype, pStr1, (ID3D11LinkingNode**)pppCallNode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				fixed (byte* ppFunctionName = pFunctionName)
				{
					fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, (byte*)ppFunctionName, (ID3D11LinkingNode**)pppCallNode);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, string pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pFunctionName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pFunctionName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pFunctionName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pStr0, (ID3D11LinkingNode**)pppCallNode);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(ReadOnlySpan<byte> pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
				{
					fixed (byte* ppFunctionName = pFunctionName)
					{
						fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, (byte*)ppModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, (byte*)ppFunctionName, (ID3D11LinkingNode**)pppCallNode);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CallFunction(string pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, string pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pFunctionName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pFunctionName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pFunctionName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[7]))(ptr, pStr0, (ID3D11Module*)ppModuleWithFunctionPrototype, pStr1, (ID3D11LinkingNode**)pppCallNode);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValue(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ID3D11LinkingNode* pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, HResult>)(LpVtbl[8]))(ptr, pSrcNode, srcParameterIndex, pDstNode, dstParameterIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValue(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ID3D11LinkingNode* pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, HResult>)(LpVtbl[8]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pDstNode, dstParameterIndex);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValue(ComPtr<ID3D11LinkingNode> pSrcNode, int srcParameterIndex, ID3D11LinkingNode* pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, HResult>)(LpVtbl[8]))(ptr, (ID3D11LinkingNode*)pSrcNode.Handle, srcParameterIndex, pDstNode, dstParameterIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValue(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ref ID3D11LinkingNode pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, HResult>)(LpVtbl[8]))(ptr, pSrcNode, srcParameterIndex, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValue(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ComPtr<ID3D11LinkingNode> pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, HResult>)(LpVtbl[8]))(ptr, pSrcNode, srcParameterIndex, (ID3D11LinkingNode*)pDstNode.Handle, dstParameterIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValue(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ref ID3D11LinkingNode pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, HResult>)(LpVtbl[8]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValue(ComPtr<ID3D11LinkingNode> pSrcNode, int srcParameterIndex, ComPtr<ID3D11LinkingNode> pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, HResult>)(LpVtbl[8]))(ptr, (ID3D11LinkingNode*)pSrcNode.Handle, srcParameterIndex, (ID3D11LinkingNode*)pDstNode.Handle, dstParameterIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, pDstSwizzle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, pDstSwizzle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ComPtr<ID3D11LinkingNode> pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)pSrcNode.Handle, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, pDstSwizzle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppSrcSwizzle = pSrcSwizzle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, pDstNode, dstParameterIndex, pDstSwizzle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, string pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSrcSwizzle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, pStr0, pDstNode, dstParameterIndex, pDstSwizzle);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (byte* ppSrcSwizzle = pSrcSwizzle)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, pDstNode, dstParameterIndex, pDstSwizzle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, string pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pSrcSwizzle != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pStr0, pDstNode, dstParameterIndex, pDstSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ComPtr<ID3D11LinkingNode> pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)pDstNode.Handle, dstParameterIndex, pDstSwizzle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ComPtr<ID3D11LinkingNode> pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ComPtr<ID3D11LinkingNode> pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)pSrcNode.Handle, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)pDstNode.Handle, dstParameterIndex, pDstSwizzle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppSrcSwizzle = pSrcSwizzle)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, string pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSrcSwizzle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, pStr0, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (byte* ppSrcSwizzle = pSrcSwizzle)
				{
					fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, string pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pSrcSwizzle != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pStr0, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppDstSwizzle = pDstSwizzle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDstSwizzle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDstSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDstSwizzle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (byte* ppDstSwizzle = pDstSwizzle)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pDstSwizzle != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pDstSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pDstSwizzle, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppSrcSwizzle = pSrcSwizzle)
			{
				fixed (byte* ppDstSwizzle = pDstSwizzle)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, pDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, string pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSrcSwizzle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pDstSwizzle != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pDstSwizzle);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pDstSwizzle, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, pStr0, pDstNode, dstParameterIndex, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (byte* ppSrcSwizzle = pSrcSwizzle)
				{
					fixed (byte* ppDstSwizzle = pDstSwizzle)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, pDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, string pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pSrcSwizzle != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pDstSwizzle != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pDstSwizzle);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pDstSwizzle, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pStr0, pDstNode, dstParameterIndex, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				fixed (byte* ppDstSwizzle = pDstSwizzle)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pDstSwizzle != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pDstSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pDstSwizzle, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					fixed (byte* ppDstSwizzle = pDstSwizzle)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (pDstSwizzle != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(pDstSwizzle);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(pDstSwizzle, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppSrcSwizzle = pSrcSwizzle)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					fixed (byte* ppDstSwizzle = pDstSwizzle)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, string pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSrcSwizzle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pDstSwizzle != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pDstSwizzle);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pDstSwizzle, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, pSrcNode, srcParameterIndex, pStr0, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (byte* ppSrcSwizzle = pSrcSwizzle)
				{
					fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
					{
						fixed (byte* ppDstSwizzle = pDstSwizzle)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, string pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pSrcSwizzle != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pDstSwizzle != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pDstSwizzle);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pDstSwizzle, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[9]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pStr0, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pStr1);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetLastError(ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D10Blob**, HResult>)(LpVtbl[10]))(ptr, ppErrorBuffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetLastError(ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D10Blob**, HResult>)(LpVtbl[10]))(ptr, (ID3D10Blob**)pppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GenerateHlsl(uint uFlags, ID3D10Blob** ppBuffer) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, uint, ID3D10Blob**, HResult>)(LpVtbl[11]))(ptr, uFlags, ppBuffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GenerateHlsl(uint uFlags, ref ID3D10Blob* ppBuffer) 
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppBuffer = &ppBuffer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, uint, ID3D10Blob**, HResult>)(LpVtbl[11]))(ptr, uFlags, (ID3D10Blob**)pppBuffer);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11FunctionLinkingGraph value)
		{
			return Unsafe.As<ID3D11FunctionLinkingGraph, IUnknown>(ref value);
		}

	}

}
