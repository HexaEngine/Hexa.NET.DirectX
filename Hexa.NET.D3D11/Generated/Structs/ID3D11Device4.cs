// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("8992ab71-02e6-4b8d-ba48-b056dcda42c4")]
	public partial struct ID3D11Device4 : IComObject, IComObject<ID3D11Device4>, IComObject<ID3D11Device3>, IComObject<ID3D11Device2>, IComObject<ID3D11Device1>, IComObject<ID3D11Device>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8992ab71-02e6-4b8d-ba48-b056dcda42c4");

		public unsafe ID3D11Device4 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(Guid* riid, void** ppvObject) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, void**, HResult>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface(ref Guid riid, void** ppvObject) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface<T>(out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult QueryInterface<T>(ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint AddRef() 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint Release() 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBuffer(BufferDesc* pDesc, SubresourceData* pInitialData, ID3D11Buffer** ppBuffer) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BufferDesc*, SubresourceData*, ID3D11Buffer**, HResult>)(LpVtbl[3]))(ptr, pDesc, pInitialData, ppBuffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBuffer(ref BufferDesc pDesc, SubresourceData* pInitialData, ID3D11Buffer** ppBuffer) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (BufferDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BufferDesc*, SubresourceData*, ID3D11Buffer**, HResult>)(LpVtbl[3]))(ptr, (BufferDesc*)ppDesc, pInitialData, ppBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBuffer(BufferDesc* pDesc, ref SubresourceData pInitialData, ID3D11Buffer** ppBuffer) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BufferDesc*, SubresourceData*, ID3D11Buffer**, HResult>)(LpVtbl[3]))(ptr, pDesc, (SubresourceData*)ppInitialData, ppBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBuffer(ref BufferDesc pDesc, ref SubresourceData pInitialData, ID3D11Buffer** ppBuffer) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (BufferDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BufferDesc*, SubresourceData*, ID3D11Buffer**, HResult>)(LpVtbl[3]))(ptr, (BufferDesc*)ppDesc, (SubresourceData*)ppInitialData, ppBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBuffer(BufferDesc* pDesc, SubresourceData* pInitialData, ref ID3D11Buffer* ppBuffer) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppBuffer = &ppBuffer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BufferDesc*, SubresourceData*, ID3D11Buffer**, HResult>)(LpVtbl[3]))(ptr, pDesc, pInitialData, (ID3D11Buffer**)pppBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBuffer(BufferDesc* pDesc, SubresourceData* pInitialData, out ComPtr<ID3D11Buffer> ppBuffer) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppBuffer = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BufferDesc*, SubresourceData*, ID3D11Buffer**, HResult>)(LpVtbl[3]))(ptr, pDesc, pInitialData, (ID3D11Buffer**)ppBuffer.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBuffer(ref BufferDesc pDesc, SubresourceData* pInitialData, ref ID3D11Buffer* ppBuffer) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (BufferDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11Buffer** pppBuffer = &ppBuffer)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BufferDesc*, SubresourceData*, ID3D11Buffer**, HResult>)(LpVtbl[3]))(ptr, (BufferDesc*)ppDesc, pInitialData, (ID3D11Buffer**)pppBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBuffer(ref BufferDesc pDesc, SubresourceData* pInitialData, out ComPtr<ID3D11Buffer> ppBuffer) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (BufferDesc* ppDesc = &pDesc)
			{
				ppBuffer = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BufferDesc*, SubresourceData*, ID3D11Buffer**, HResult>)(LpVtbl[3]))(ptr, (BufferDesc*)ppDesc, pInitialData, (ID3D11Buffer**)ppBuffer.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBuffer(BufferDesc* pDesc, ref SubresourceData pInitialData, ref ID3D11Buffer* ppBuffer) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				fixed (ID3D11Buffer** pppBuffer = &ppBuffer)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BufferDesc*, SubresourceData*, ID3D11Buffer**, HResult>)(LpVtbl[3]))(ptr, pDesc, (SubresourceData*)ppInitialData, (ID3D11Buffer**)pppBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBuffer(BufferDesc* pDesc, ref SubresourceData pInitialData, out ComPtr<ID3D11Buffer> ppBuffer) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				ppBuffer = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BufferDesc*, SubresourceData*, ID3D11Buffer**, HResult>)(LpVtbl[3]))(ptr, pDesc, (SubresourceData*)ppInitialData, (ID3D11Buffer**)ppBuffer.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBuffer(ref BufferDesc pDesc, ref SubresourceData pInitialData, ref ID3D11Buffer* ppBuffer) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (BufferDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					fixed (ID3D11Buffer** pppBuffer = &ppBuffer)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BufferDesc*, SubresourceData*, ID3D11Buffer**, HResult>)(LpVtbl[3]))(ptr, (BufferDesc*)ppDesc, (SubresourceData*)ppInitialData, (ID3D11Buffer**)pppBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBuffer(ref BufferDesc pDesc, ref SubresourceData pInitialData, out ComPtr<ID3D11Buffer> ppBuffer) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (BufferDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					ppBuffer = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BufferDesc*, SubresourceData*, ID3D11Buffer**, HResult>)(LpVtbl[3]))(ptr, (BufferDesc*)ppDesc, (SubresourceData*)ppInitialData, (ID3D11Buffer**)ppBuffer.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture1D(Texture1DDesc* pDesc, SubresourceData* pInitialData, ID3D11Texture1D** ppTexture1D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[4]))(ptr, pDesc, pInitialData, ppTexture1D);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture1D(ref Texture1DDesc pDesc, SubresourceData* pInitialData, ID3D11Texture1D** ppTexture1D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture1DDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[4]))(ptr, (Texture1DDesc*)ppDesc, pInitialData, ppTexture1D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture1D(Texture1DDesc* pDesc, ref SubresourceData pInitialData, ID3D11Texture1D** ppTexture1D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[4]))(ptr, pDesc, (SubresourceData*)ppInitialData, ppTexture1D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture1D(ref Texture1DDesc pDesc, ref SubresourceData pInitialData, ID3D11Texture1D** ppTexture1D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture1DDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[4]))(ptr, (Texture1DDesc*)ppDesc, (SubresourceData*)ppInitialData, ppTexture1D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture1D(Texture1DDesc* pDesc, SubresourceData* pInitialData, ref ID3D11Texture1D* ppTexture1D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture1D** pppTexture1D = &ppTexture1D)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[4]))(ptr, pDesc, pInitialData, (ID3D11Texture1D**)pppTexture1D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture1D(Texture1DDesc* pDesc, SubresourceData* pInitialData, out ComPtr<ID3D11Texture1D> ppTexture1D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppTexture1D = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[4]))(ptr, pDesc, pInitialData, (ID3D11Texture1D**)ppTexture1D.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture1D(ref Texture1DDesc pDesc, SubresourceData* pInitialData, ref ID3D11Texture1D* ppTexture1D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture1DDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11Texture1D** pppTexture1D = &ppTexture1D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[4]))(ptr, (Texture1DDesc*)ppDesc, pInitialData, (ID3D11Texture1D**)pppTexture1D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture1D(ref Texture1DDesc pDesc, SubresourceData* pInitialData, out ComPtr<ID3D11Texture1D> ppTexture1D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture1DDesc* ppDesc = &pDesc)
			{
				ppTexture1D = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[4]))(ptr, (Texture1DDesc*)ppDesc, pInitialData, (ID3D11Texture1D**)ppTexture1D.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture1D(Texture1DDesc* pDesc, ref SubresourceData pInitialData, ref ID3D11Texture1D* ppTexture1D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				fixed (ID3D11Texture1D** pppTexture1D = &ppTexture1D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[4]))(ptr, pDesc, (SubresourceData*)ppInitialData, (ID3D11Texture1D**)pppTexture1D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture1D(Texture1DDesc* pDesc, ref SubresourceData pInitialData, out ComPtr<ID3D11Texture1D> ppTexture1D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				ppTexture1D = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[4]))(ptr, pDesc, (SubresourceData*)ppInitialData, (ID3D11Texture1D**)ppTexture1D.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture1D(ref Texture1DDesc pDesc, ref SubresourceData pInitialData, ref ID3D11Texture1D* ppTexture1D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture1DDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					fixed (ID3D11Texture1D** pppTexture1D = &ppTexture1D)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[4]))(ptr, (Texture1DDesc*)ppDesc, (SubresourceData*)ppInitialData, (ID3D11Texture1D**)pppTexture1D);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture1D(ref Texture1DDesc pDesc, ref SubresourceData pInitialData, out ComPtr<ID3D11Texture1D> ppTexture1D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture1DDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					ppTexture1D = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[4]))(ptr, (Texture1DDesc*)ppDesc, (SubresourceData*)ppInitialData, (ID3D11Texture1D**)ppTexture1D.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D(Texture2DDesc* pDesc, SubresourceData* pInitialData, ID3D11Texture2D** ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[5]))(ptr, pDesc, pInitialData, ppTexture2D);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D(ref Texture2DDesc pDesc, SubresourceData* pInitialData, ID3D11Texture2D** ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture2DDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[5]))(ptr, (Texture2DDesc*)ppDesc, pInitialData, ppTexture2D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D(Texture2DDesc* pDesc, ref SubresourceData pInitialData, ID3D11Texture2D** ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[5]))(ptr, pDesc, (SubresourceData*)ppInitialData, ppTexture2D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D(ref Texture2DDesc pDesc, ref SubresourceData pInitialData, ID3D11Texture2D** ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture2DDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[5]))(ptr, (Texture2DDesc*)ppDesc, (SubresourceData*)ppInitialData, ppTexture2D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D(Texture2DDesc* pDesc, SubresourceData* pInitialData, ref ID3D11Texture2D* ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture2D** pppTexture2D = &ppTexture2D)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[5]))(ptr, pDesc, pInitialData, (ID3D11Texture2D**)pppTexture2D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D(Texture2DDesc* pDesc, SubresourceData* pInitialData, out ComPtr<ID3D11Texture2D> ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppTexture2D = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[5]))(ptr, pDesc, pInitialData, (ID3D11Texture2D**)ppTexture2D.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D(ref Texture2DDesc pDesc, SubresourceData* pInitialData, ref ID3D11Texture2D* ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture2DDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11Texture2D** pppTexture2D = &ppTexture2D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[5]))(ptr, (Texture2DDesc*)ppDesc, pInitialData, (ID3D11Texture2D**)pppTexture2D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D(ref Texture2DDesc pDesc, SubresourceData* pInitialData, out ComPtr<ID3D11Texture2D> ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture2DDesc* ppDesc = &pDesc)
			{
				ppTexture2D = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[5]))(ptr, (Texture2DDesc*)ppDesc, pInitialData, (ID3D11Texture2D**)ppTexture2D.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D(Texture2DDesc* pDesc, ref SubresourceData pInitialData, ref ID3D11Texture2D* ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				fixed (ID3D11Texture2D** pppTexture2D = &ppTexture2D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[5]))(ptr, pDesc, (SubresourceData*)ppInitialData, (ID3D11Texture2D**)pppTexture2D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D(Texture2DDesc* pDesc, ref SubresourceData pInitialData, out ComPtr<ID3D11Texture2D> ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				ppTexture2D = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[5]))(ptr, pDesc, (SubresourceData*)ppInitialData, (ID3D11Texture2D**)ppTexture2D.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D(ref Texture2DDesc pDesc, ref SubresourceData pInitialData, ref ID3D11Texture2D* ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture2DDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					fixed (ID3D11Texture2D** pppTexture2D = &ppTexture2D)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[5]))(ptr, (Texture2DDesc*)ppDesc, (SubresourceData*)ppInitialData, (ID3D11Texture2D**)pppTexture2D);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D(ref Texture2DDesc pDesc, ref SubresourceData pInitialData, out ComPtr<ID3D11Texture2D> ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture2DDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					ppTexture2D = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[5]))(ptr, (Texture2DDesc*)ppDesc, (SubresourceData*)ppInitialData, (ID3D11Texture2D**)ppTexture2D.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D(Texture3DDesc* pDesc, SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[6]))(ptr, pDesc, pInitialData, ppTexture3D);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D(ref Texture3DDesc pDesc, SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture3DDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[6]))(ptr, (Texture3DDesc*)ppDesc, pInitialData, ppTexture3D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D(Texture3DDesc* pDesc, ref SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[6]))(ptr, pDesc, (SubresourceData*)ppInitialData, ppTexture3D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D(ref Texture3DDesc pDesc, ref SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture3DDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[6]))(ptr, (Texture3DDesc*)ppDesc, (SubresourceData*)ppInitialData, ppTexture3D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D(Texture3DDesc* pDesc, SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture3D** pppTexture3D = &ppTexture3D)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[6]))(ptr, pDesc, pInitialData, (ID3D11Texture3D**)pppTexture3D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D(Texture3DDesc* pDesc, SubresourceData* pInitialData, out ComPtr<ID3D11Texture3D> ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppTexture3D = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[6]))(ptr, pDesc, pInitialData, (ID3D11Texture3D**)ppTexture3D.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D(ref Texture3DDesc pDesc, SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture3DDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11Texture3D** pppTexture3D = &ppTexture3D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[6]))(ptr, (Texture3DDesc*)ppDesc, pInitialData, (ID3D11Texture3D**)pppTexture3D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D(ref Texture3DDesc pDesc, SubresourceData* pInitialData, out ComPtr<ID3D11Texture3D> ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture3DDesc* ppDesc = &pDesc)
			{
				ppTexture3D = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[6]))(ptr, (Texture3DDesc*)ppDesc, pInitialData, (ID3D11Texture3D**)ppTexture3D.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D(Texture3DDesc* pDesc, ref SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				fixed (ID3D11Texture3D** pppTexture3D = &ppTexture3D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[6]))(ptr, pDesc, (SubresourceData*)ppInitialData, (ID3D11Texture3D**)pppTexture3D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D(Texture3DDesc* pDesc, ref SubresourceData pInitialData, out ComPtr<ID3D11Texture3D> ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				ppTexture3D = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[6]))(ptr, pDesc, (SubresourceData*)ppInitialData, (ID3D11Texture3D**)ppTexture3D.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D(ref Texture3DDesc pDesc, ref SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture3DDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					fixed (ID3D11Texture3D** pppTexture3D = &ppTexture3D)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[6]))(ptr, (Texture3DDesc*)ppDesc, (SubresourceData*)ppInitialData, (ID3D11Texture3D**)pppTexture3D);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D(ref Texture3DDesc pDesc, ref SubresourceData pInitialData, out ComPtr<ID3D11Texture3D> ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture3DDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					ppTexture3D = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[6]))(ptr, (Texture3DDesc*)ppDesc, (SubresourceData*)ppInitialData, (ID3D11Texture3D**)ppTexture3D.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ID3D11Resource* pResource, ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, pResource, pDesc, ppSRView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ref ID3D11Resource pResource, ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, pDesc, ppSRView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ComPtr<ID3D11Resource> pResource, ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc, ppSRView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ID3D11Resource* pResource, ref ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, pResource, (ShaderResourceViewDesc*)ppDesc, ppSRView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ref ID3D11Resource pResource, ref ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, (ShaderResourceViewDesc*)ppDesc, ppSRView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ComPtr<ID3D11Resource> pResource, ref ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)pResource.Handle, (ShaderResourceViewDesc*)ppDesc, ppSRView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ID3D11Resource* pResource, ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppSRView = &ppSRView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, pResource, pDesc, (ID3D11ShaderResourceView**)pppSRView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ID3D11Resource* pResource, ShaderResourceViewDesc* pDesc, out ComPtr<ID3D11ShaderResourceView> ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppSRView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, pResource, pDesc, (ID3D11ShaderResourceView**)ppSRView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ref ID3D11Resource pResource, ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11ShaderResourceView** pppSRView = &ppSRView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, pDesc, (ID3D11ShaderResourceView**)pppSRView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ComPtr<ID3D11Resource> pResource, ShaderResourceViewDesc* pDesc, out ComPtr<ID3D11ShaderResourceView> ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppSRView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc, (ID3D11ShaderResourceView**)ppSRView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ID3D11Resource* pResource, ref ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11ShaderResourceView** pppSRView = &ppSRView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, pResource, (ShaderResourceViewDesc*)ppDesc, (ID3D11ShaderResourceView**)pppSRView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ID3D11Resource* pResource, ref ShaderResourceViewDesc pDesc, out ComPtr<ID3D11ShaderResourceView> ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				ppSRView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, pResource, (ShaderResourceViewDesc*)ppDesc, (ID3D11ShaderResourceView**)ppSRView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ref ID3D11Resource pResource, ref ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11ShaderResourceView** pppSRView = &ppSRView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, (ShaderResourceViewDesc*)ppDesc, (ID3D11ShaderResourceView**)pppSRView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView(ComPtr<ID3D11Resource> pResource, ref ShaderResourceViewDesc pDesc, out ComPtr<ID3D11ShaderResourceView> ppSRView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				ppSRView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)pResource.Handle, (ShaderResourceViewDesc*)ppDesc, (ID3D11ShaderResourceView**)ppSRView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ID3D11Resource* pResource, UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, pResource, pDesc, ppUAView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ref ID3D11Resource pResource, UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, pDesc, ppUAView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ComPtr<ID3D11Resource> pResource, UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc, ppUAView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ID3D11Resource* pResource, ref UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, pResource, (UnorderedAccessViewDesc*)ppDesc, ppUAView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ref ID3D11Resource pResource, ref UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, (UnorderedAccessViewDesc*)ppDesc, ppUAView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ComPtr<ID3D11Resource> pResource, ref UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, (ID3D11Resource*)pResource.Handle, (UnorderedAccessViewDesc*)ppDesc, ppUAView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ID3D11Resource* pResource, UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView** pppUAView = &ppUAView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, pResource, pDesc, (ID3D11UnorderedAccessView**)pppUAView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ID3D11Resource* pResource, UnorderedAccessViewDesc* pDesc, out ComPtr<ID3D11UnorderedAccessView> ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppUAView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, pResource, pDesc, (ID3D11UnorderedAccessView**)ppUAView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ref ID3D11Resource pResource, UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11UnorderedAccessView** pppUAView = &ppUAView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, pDesc, (ID3D11UnorderedAccessView**)pppUAView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ComPtr<ID3D11Resource> pResource, UnorderedAccessViewDesc* pDesc, out ComPtr<ID3D11UnorderedAccessView> ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppUAView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc, (ID3D11UnorderedAccessView**)ppUAView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ID3D11Resource* pResource, ref UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11UnorderedAccessView** pppUAView = &ppUAView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, pResource, (UnorderedAccessViewDesc*)ppDesc, (ID3D11UnorderedAccessView**)pppUAView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ID3D11Resource* pResource, ref UnorderedAccessViewDesc pDesc, out ComPtr<ID3D11UnorderedAccessView> ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				ppUAView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, pResource, (UnorderedAccessViewDesc*)ppDesc, (ID3D11UnorderedAccessView**)ppUAView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ref ID3D11Resource pResource, ref UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11UnorderedAccessView** pppUAView = &ppUAView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, (UnorderedAccessViewDesc*)ppDesc, (ID3D11UnorderedAccessView**)pppUAView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView(ComPtr<ID3D11Resource> pResource, ref UnorderedAccessViewDesc pDesc, out ComPtr<ID3D11UnorderedAccessView> ppUAView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				ppUAView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[8]))(ptr, (ID3D11Resource*)pResource.Handle, (UnorderedAccessViewDesc*)ppDesc, (ID3D11UnorderedAccessView**)ppUAView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ID3D11Resource* pResource, RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, pResource, pDesc, ppRTView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ref ID3D11Resource pResource, RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, pDesc, ppRTView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ComPtr<ID3D11Resource> pResource, RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc, ppRTView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ID3D11Resource* pResource, ref RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RenderTargetViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, pResource, (RenderTargetViewDesc*)ppDesc, ppRTView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ref ID3D11Resource pResource, ref RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (RenderTargetViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, (RenderTargetViewDesc*)ppDesc, ppRTView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ComPtr<ID3D11Resource> pResource, ref RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RenderTargetViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, (ID3D11Resource*)pResource.Handle, (RenderTargetViewDesc*)ppDesc, ppRTView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ID3D11Resource* pResource, RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRTView = &ppRTView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, pResource, pDesc, (ID3D11RenderTargetView**)pppRTView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ID3D11Resource* pResource, RenderTargetViewDesc* pDesc, out ComPtr<ID3D11RenderTargetView> ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppRTView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, pResource, pDesc, (ID3D11RenderTargetView**)ppRTView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ref ID3D11Resource pResource, RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11RenderTargetView** pppRTView = &ppRTView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, pDesc, (ID3D11RenderTargetView**)pppRTView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ComPtr<ID3D11Resource> pResource, RenderTargetViewDesc* pDesc, out ComPtr<ID3D11RenderTargetView> ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppRTView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc, (ID3D11RenderTargetView**)ppRTView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ID3D11Resource* pResource, ref RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RenderTargetViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11RenderTargetView** pppRTView = &ppRTView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, pResource, (RenderTargetViewDesc*)ppDesc, (ID3D11RenderTargetView**)pppRTView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ID3D11Resource* pResource, ref RenderTargetViewDesc pDesc, out ComPtr<ID3D11RenderTargetView> ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RenderTargetViewDesc* ppDesc = &pDesc)
			{
				ppRTView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, pResource, (RenderTargetViewDesc*)ppDesc, (ID3D11RenderTargetView**)ppRTView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ref ID3D11Resource pResource, ref RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (RenderTargetViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11RenderTargetView** pppRTView = &ppRTView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, (RenderTargetViewDesc*)ppDesc, (ID3D11RenderTargetView**)pppRTView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView(ComPtr<ID3D11Resource> pResource, ref RenderTargetViewDesc pDesc, out ComPtr<ID3D11RenderTargetView> ppRTView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RenderTargetViewDesc* ppDesc = &pDesc)
			{
				ppRTView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[9]))(ptr, (ID3D11Resource*)pResource.Handle, (RenderTargetViewDesc*)ppDesc, (ID3D11RenderTargetView**)ppRTView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ID3D11Resource* pResource, DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, pResource, pDesc, ppDepthStencilView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ref ID3D11Resource pResource, DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, (ID3D11Resource*)ppResource, pDesc, ppDepthStencilView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ComPtr<ID3D11Resource> pResource, DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc, ppDepthStencilView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ID3D11Resource* pResource, ref DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DepthStencilViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, pResource, (DepthStencilViewDesc*)ppDesc, ppDepthStencilView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ref ID3D11Resource pResource, ref DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (DepthStencilViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, (ID3D11Resource*)ppResource, (DepthStencilViewDesc*)ppDesc, ppDepthStencilView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ComPtr<ID3D11Resource> pResource, ref DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DepthStencilViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, (ID3D11Resource*)pResource.Handle, (DepthStencilViewDesc*)ppDesc, ppDepthStencilView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ID3D11Resource* pResource, DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, pResource, pDesc, (ID3D11DepthStencilView**)pppDepthStencilView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ID3D11Resource* pResource, DepthStencilViewDesc* pDesc, out ComPtr<ID3D11DepthStencilView> ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppDepthStencilView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, pResource, pDesc, (ID3D11DepthStencilView**)ppDepthStencilView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ref ID3D11Resource pResource, DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, (ID3D11Resource*)ppResource, pDesc, (ID3D11DepthStencilView**)pppDepthStencilView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ComPtr<ID3D11Resource> pResource, DepthStencilViewDesc* pDesc, out ComPtr<ID3D11DepthStencilView> ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppDepthStencilView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc, (ID3D11DepthStencilView**)ppDepthStencilView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ID3D11Resource* pResource, ref DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DepthStencilViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, pResource, (DepthStencilViewDesc*)ppDesc, (ID3D11DepthStencilView**)pppDepthStencilView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ID3D11Resource* pResource, ref DepthStencilViewDesc pDesc, out ComPtr<ID3D11DepthStencilView> ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DepthStencilViewDesc* ppDesc = &pDesc)
			{
				ppDepthStencilView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, pResource, (DepthStencilViewDesc*)ppDesc, (ID3D11DepthStencilView**)ppDepthStencilView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ref ID3D11Resource pResource, ref DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (DepthStencilViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, (ID3D11Resource*)ppResource, (DepthStencilViewDesc*)ppDesc, (ID3D11DepthStencilView**)pppDepthStencilView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilView(ComPtr<ID3D11Resource> pResource, ref DepthStencilViewDesc pDesc, out ComPtr<ID3D11DepthStencilView> ppDepthStencilView) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DepthStencilViewDesc* ppDesc = &pDesc)
			{
				ppDepthStencilView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[10]))(ptr, (ID3D11Resource*)pResource.Handle, (DepthStencilViewDesc*)ppDesc, (ID3D11DepthStencilView**)ppDepthStencilView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateInputLayout(InputElementDesc* pInputElementDescs, uint numElements, void* pShaderBytecodeWithInputSignature, nuint bytecodeLength, ID3D11InputLayout** ppInputLayout) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, HResult>)(LpVtbl[11]))(ptr, pInputElementDescs, numElements, pShaderBytecodeWithInputSignature, bytecodeLength, ppInputLayout);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateInputLayout(ref InputElementDesc pInputElementDescs, uint numElements, void* pShaderBytecodeWithInputSignature, nuint bytecodeLength, ID3D11InputLayout** ppInputLayout) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InputElementDesc* ppInputElementDescs = &pInputElementDescs)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, HResult>)(LpVtbl[11]))(ptr, (InputElementDesc*)ppInputElementDescs, numElements, pShaderBytecodeWithInputSignature, bytecodeLength, ppInputLayout);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateInputLayout(InputElementDesc* pInputElementDescs, uint numElements, void* pShaderBytecodeWithInputSignature, nuint bytecodeLength, ref ID3D11InputLayout* ppInputLayout) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11InputLayout** pppInputLayout = &ppInputLayout)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, HResult>)(LpVtbl[11]))(ptr, pInputElementDescs, numElements, pShaderBytecodeWithInputSignature, bytecodeLength, (ID3D11InputLayout**)pppInputLayout);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateInputLayout(ref InputElementDesc pInputElementDescs, uint numElements, void* pShaderBytecodeWithInputSignature, nuint bytecodeLength, ref ID3D11InputLayout* ppInputLayout) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (InputElementDesc* ppInputElementDescs = &pInputElementDescs)
			{
				fixed (ID3D11InputLayout** pppInputLayout = &ppInputLayout)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, HResult>)(LpVtbl[11]))(ptr, (InputElementDesc*)ppInputElementDescs, numElements, pShaderBytecodeWithInputSignature, bytecodeLength, (ID3D11InputLayout**)pppInputLayout);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateVertexShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11VertexShader** ppVertexShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(LpVtbl[12]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, ppVertexShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateVertexShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader** ppVertexShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(LpVtbl[12]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppVertexShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateVertexShader(void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11VertexShader** ppVertexShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(LpVtbl[12]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppVertexShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateVertexShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11VertexShader* ppVertexShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VertexShader** pppVertexShader = &ppVertexShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(LpVtbl[12]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11VertexShader**)pppVertexShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateVertexShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11VertexShader* ppVertexShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11VertexShader** pppVertexShader = &ppVertexShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(LpVtbl[12]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11VertexShader**)pppVertexShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateVertexShader(void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11VertexShader* ppVertexShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VertexShader** pppVertexShader = &ppVertexShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(LpVtbl[12]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11VertexShader**)pppVertexShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[13]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, ppGeometryShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[13]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShader(void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[13]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppGeometryShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[13]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[13]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShader(void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[13]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11GeometryShader**)pppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, pClassLinkage, ppGeometryShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, pClassLinkage, ppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, pClassLinkage, ppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, pClassLinkage, ppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppGeometryShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11GeometryShader**)pppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
				{
					fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
				{
					fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
					{
						fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11GeometryShader**)pppGeometryShader);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreatePixelShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11PixelShader** ppPixelShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(LpVtbl[15]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, ppPixelShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreatePixelShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader** ppPixelShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(LpVtbl[15]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppPixelShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreatePixelShader(void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11PixelShader** ppPixelShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(LpVtbl[15]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppPixelShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreatePixelShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11PixelShader* ppPixelShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11PixelShader** pppPixelShader = &ppPixelShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(LpVtbl[15]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11PixelShader**)pppPixelShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreatePixelShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11PixelShader* ppPixelShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11PixelShader** pppPixelShader = &ppPixelShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(LpVtbl[15]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11PixelShader**)pppPixelShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreatePixelShader(void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11PixelShader* ppPixelShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11PixelShader** pppPixelShader = &ppPixelShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(LpVtbl[15]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11PixelShader**)pppPixelShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateHullShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11HullShader** ppHullShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(LpVtbl[16]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, ppHullShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateHullShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11HullShader** ppHullShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(LpVtbl[16]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppHullShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateHullShader(void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11HullShader** ppHullShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(LpVtbl[16]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppHullShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateHullShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11HullShader* ppHullShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11HullShader** pppHullShader = &ppHullShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(LpVtbl[16]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11HullShader**)pppHullShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateHullShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11HullShader* ppHullShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11HullShader** pppHullShader = &ppHullShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(LpVtbl[16]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11HullShader**)pppHullShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateHullShader(void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11HullShader* ppHullShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11HullShader** pppHullShader = &ppHullShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(LpVtbl[16]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11HullShader**)pppHullShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDomainShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11DomainShader** ppDomainShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(LpVtbl[17]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, ppDomainShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDomainShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader** ppDomainShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(LpVtbl[17]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppDomainShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDomainShader(void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11DomainShader** ppDomainShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(LpVtbl[17]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppDomainShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDomainShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11DomainShader* ppDomainShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DomainShader** pppDomainShader = &ppDomainShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(LpVtbl[17]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11DomainShader**)pppDomainShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDomainShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11DomainShader* ppDomainShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11DomainShader** pppDomainShader = &ppDomainShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(LpVtbl[17]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11DomainShader**)pppDomainShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDomainShader(void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11DomainShader* ppDomainShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DomainShader** pppDomainShader = &ppDomainShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(LpVtbl[17]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11DomainShader**)pppDomainShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateComputeShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11ComputeShader** ppComputeShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(LpVtbl[18]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, ppComputeShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateComputeShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader** ppComputeShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(LpVtbl[18]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppComputeShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateComputeShader(void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11ComputeShader** ppComputeShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(LpVtbl[18]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppComputeShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateComputeShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ComputeShader** pppComputeShader = &ppComputeShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(LpVtbl[18]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11ComputeShader**)pppComputeShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateComputeShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11ComputeShader** pppComputeShader = &ppComputeShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(LpVtbl[18]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11ComputeShader**)pppComputeShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateComputeShader(void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ComputeShader** pppComputeShader = &ppComputeShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(LpVtbl[18]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11ComputeShader**)pppComputeShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateClassLinkage(ID3D11ClassLinkage** ppLinkage) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11ClassLinkage**, HResult>)(LpVtbl[19]))(ptr, ppLinkage);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateClassLinkage(ref ID3D11ClassLinkage* ppLinkage) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage** pppLinkage = &ppLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11ClassLinkage**, HResult>)(LpVtbl[19]))(ptr, (ID3D11ClassLinkage**)pppLinkage);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateClassLinkage(out ComPtr<ID3D11ClassLinkage> ppLinkage) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppLinkage = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11ClassLinkage**, HResult>)(LpVtbl[19]))(ptr, (ID3D11ClassLinkage**)ppLinkage.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBlendState(BlendDesc* pBlendStateDesc, ID3D11BlendState** ppBlendState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BlendDesc*, ID3D11BlendState**, HResult>)(LpVtbl[20]))(ptr, pBlendStateDesc, ppBlendState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBlendState(ref BlendDesc pBlendStateDesc, ID3D11BlendState** ppBlendState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (BlendDesc* ppBlendStateDesc = &pBlendStateDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BlendDesc*, ID3D11BlendState**, HResult>)(LpVtbl[20]))(ptr, (BlendDesc*)ppBlendStateDesc, ppBlendState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBlendState(BlendDesc* pBlendStateDesc, ref ID3D11BlendState* ppBlendState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11BlendState** pppBlendState = &ppBlendState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BlendDesc*, ID3D11BlendState**, HResult>)(LpVtbl[20]))(ptr, pBlendStateDesc, (ID3D11BlendState**)pppBlendState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBlendState(BlendDesc* pBlendStateDesc, out ComPtr<ID3D11BlendState> ppBlendState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppBlendState = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BlendDesc*, ID3D11BlendState**, HResult>)(LpVtbl[20]))(ptr, pBlendStateDesc, (ID3D11BlendState**)ppBlendState.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBlendState(ref BlendDesc pBlendStateDesc, ref ID3D11BlendState* ppBlendState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (BlendDesc* ppBlendStateDesc = &pBlendStateDesc)
			{
				fixed (ID3D11BlendState** pppBlendState = &ppBlendState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BlendDesc*, ID3D11BlendState**, HResult>)(LpVtbl[20]))(ptr, (BlendDesc*)ppBlendStateDesc, (ID3D11BlendState**)pppBlendState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBlendState(ref BlendDesc pBlendStateDesc, out ComPtr<ID3D11BlendState> ppBlendState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (BlendDesc* ppBlendStateDesc = &pBlendStateDesc)
			{
				ppBlendState = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BlendDesc*, ID3D11BlendState**, HResult>)(LpVtbl[20]))(ptr, (BlendDesc*)ppBlendStateDesc, (ID3D11BlendState**)ppBlendState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilState(DepthStencilDesc* pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(LpVtbl[21]))(ptr, pDepthStencilDesc, ppDepthStencilState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilState(ref DepthStencilDesc pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DepthStencilDesc* ppDepthStencilDesc = &pDepthStencilDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(LpVtbl[21]))(ptr, (DepthStencilDesc*)ppDepthStencilDesc, ppDepthStencilState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilState(DepthStencilDesc* pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilState** pppDepthStencilState = &ppDepthStencilState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(LpVtbl[21]))(ptr, pDepthStencilDesc, (ID3D11DepthStencilState**)pppDepthStencilState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilState(DepthStencilDesc* pDepthStencilDesc, out ComPtr<ID3D11DepthStencilState> ppDepthStencilState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppDepthStencilState = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(LpVtbl[21]))(ptr, pDepthStencilDesc, (ID3D11DepthStencilState**)ppDepthStencilState.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilState(ref DepthStencilDesc pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DepthStencilDesc* ppDepthStencilDesc = &pDepthStencilDesc)
			{
				fixed (ID3D11DepthStencilState** pppDepthStencilState = &ppDepthStencilState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(LpVtbl[21]))(ptr, (DepthStencilDesc*)ppDepthStencilDesc, (ID3D11DepthStencilState**)pppDepthStencilState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDepthStencilState(ref DepthStencilDesc pDepthStencilDesc, out ComPtr<ID3D11DepthStencilState> ppDepthStencilState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DepthStencilDesc* ppDepthStencilDesc = &pDepthStencilDesc)
			{
				ppDepthStencilState = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(LpVtbl[21]))(ptr, (DepthStencilDesc*)ppDepthStencilDesc, (ID3D11DepthStencilState**)ppDepthStencilState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState(RasterizerDesc* pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc*, ID3D11RasterizerState**, HResult>)(LpVtbl[22]))(ptr, pRasterizerDesc, ppRasterizerState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState(ref RasterizerDesc pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RasterizerDesc* ppRasterizerDesc = &pRasterizerDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc*, ID3D11RasterizerState**, HResult>)(LpVtbl[22]))(ptr, (RasterizerDesc*)ppRasterizerDesc, ppRasterizerState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState(RasterizerDesc* pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RasterizerState** pppRasterizerState = &ppRasterizerState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc*, ID3D11RasterizerState**, HResult>)(LpVtbl[22]))(ptr, pRasterizerDesc, (ID3D11RasterizerState**)pppRasterizerState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState(RasterizerDesc* pRasterizerDesc, out ComPtr<ID3D11RasterizerState> ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppRasterizerState = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc*, ID3D11RasterizerState**, HResult>)(LpVtbl[22]))(ptr, pRasterizerDesc, (ID3D11RasterizerState**)ppRasterizerState.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState(ref RasterizerDesc pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RasterizerDesc* ppRasterizerDesc = &pRasterizerDesc)
			{
				fixed (ID3D11RasterizerState** pppRasterizerState = &ppRasterizerState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc*, ID3D11RasterizerState**, HResult>)(LpVtbl[22]))(ptr, (RasterizerDesc*)ppRasterizerDesc, (ID3D11RasterizerState**)pppRasterizerState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState(ref RasterizerDesc pRasterizerDesc, out ComPtr<ID3D11RasterizerState> ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RasterizerDesc* ppRasterizerDesc = &pRasterizerDesc)
			{
				ppRasterizerState = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc*, ID3D11RasterizerState**, HResult>)(LpVtbl[22]))(ptr, (RasterizerDesc*)ppRasterizerDesc, (ID3D11RasterizerState**)ppRasterizerState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateSamplerState(SamplerDesc* pSamplerDesc, ID3D11SamplerState** ppSamplerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, SamplerDesc*, ID3D11SamplerState**, HResult>)(LpVtbl[23]))(ptr, pSamplerDesc, ppSamplerState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateSamplerState(ref SamplerDesc pSamplerDesc, ID3D11SamplerState** ppSamplerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SamplerDesc* ppSamplerDesc = &pSamplerDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, SamplerDesc*, ID3D11SamplerState**, HResult>)(LpVtbl[23]))(ptr, (SamplerDesc*)ppSamplerDesc, ppSamplerState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateSamplerState(SamplerDesc* pSamplerDesc, ref ID3D11SamplerState* ppSamplerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplerState = &ppSamplerState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, SamplerDesc*, ID3D11SamplerState**, HResult>)(LpVtbl[23]))(ptr, pSamplerDesc, (ID3D11SamplerState**)pppSamplerState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateSamplerState(SamplerDesc* pSamplerDesc, out ComPtr<ID3D11SamplerState> ppSamplerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppSamplerState = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, SamplerDesc*, ID3D11SamplerState**, HResult>)(LpVtbl[23]))(ptr, pSamplerDesc, (ID3D11SamplerState**)ppSamplerState.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateSamplerState(ref SamplerDesc pSamplerDesc, ref ID3D11SamplerState* ppSamplerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SamplerDesc* ppSamplerDesc = &pSamplerDesc)
			{
				fixed (ID3D11SamplerState** pppSamplerState = &ppSamplerState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, SamplerDesc*, ID3D11SamplerState**, HResult>)(LpVtbl[23]))(ptr, (SamplerDesc*)ppSamplerDesc, (ID3D11SamplerState**)pppSamplerState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateSamplerState(ref SamplerDesc pSamplerDesc, out ComPtr<ID3D11SamplerState> ppSamplerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SamplerDesc* ppSamplerDesc = &pSamplerDesc)
			{
				ppSamplerState = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, SamplerDesc*, ID3D11SamplerState**, HResult>)(LpVtbl[23]))(ptr, (SamplerDesc*)ppSamplerDesc, (ID3D11SamplerState**)ppSamplerState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateQuery(QueryDesc* pQueryDesc, ID3D11Query** ppQuery) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc*, ID3D11Query**, HResult>)(LpVtbl[24]))(ptr, pQueryDesc, ppQuery);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateQuery(ref QueryDesc pQueryDesc, ID3D11Query** ppQuery) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (QueryDesc* ppQueryDesc = &pQueryDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc*, ID3D11Query**, HResult>)(LpVtbl[24]))(ptr, (QueryDesc*)ppQueryDesc, ppQuery);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateQuery(QueryDesc* pQueryDesc, ref ID3D11Query* ppQuery) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Query** pppQuery = &ppQuery)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc*, ID3D11Query**, HResult>)(LpVtbl[24]))(ptr, pQueryDesc, (ID3D11Query**)pppQuery);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateQuery(QueryDesc* pQueryDesc, out ComPtr<ID3D11Query> ppQuery) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppQuery = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc*, ID3D11Query**, HResult>)(LpVtbl[24]))(ptr, pQueryDesc, (ID3D11Query**)ppQuery.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateQuery(ref QueryDesc pQueryDesc, ref ID3D11Query* ppQuery) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (QueryDesc* ppQueryDesc = &pQueryDesc)
			{
				fixed (ID3D11Query** pppQuery = &ppQuery)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc*, ID3D11Query**, HResult>)(LpVtbl[24]))(ptr, (QueryDesc*)ppQueryDesc, (ID3D11Query**)pppQuery);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateQuery(ref QueryDesc pQueryDesc, out ComPtr<ID3D11Query> ppQuery) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (QueryDesc* ppQueryDesc = &pQueryDesc)
			{
				ppQuery = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc*, ID3D11Query**, HResult>)(LpVtbl[24]))(ptr, (QueryDesc*)ppQueryDesc, (ID3D11Query**)ppQuery.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreatePredicate(QueryDesc* pPredicateDesc, ID3D11Predicate** ppPredicate) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc*, ID3D11Predicate**, HResult>)(LpVtbl[25]))(ptr, pPredicateDesc, ppPredicate);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreatePredicate(ref QueryDesc pPredicateDesc, ID3D11Predicate** ppPredicate) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (QueryDesc* ppPredicateDesc = &pPredicateDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc*, ID3D11Predicate**, HResult>)(LpVtbl[25]))(ptr, (QueryDesc*)ppPredicateDesc, ppPredicate);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreatePredicate(QueryDesc* pPredicateDesc, ref ID3D11Predicate* ppPredicate) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Predicate** pppPredicate = &ppPredicate)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc*, ID3D11Predicate**, HResult>)(LpVtbl[25]))(ptr, pPredicateDesc, (ID3D11Predicate**)pppPredicate);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreatePredicate(ref QueryDesc pPredicateDesc, ref ID3D11Predicate* ppPredicate) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (QueryDesc* ppPredicateDesc = &pPredicateDesc)
			{
				fixed (ID3D11Predicate** pppPredicate = &ppPredicate)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc*, ID3D11Predicate**, HResult>)(LpVtbl[25]))(ptr, (QueryDesc*)ppPredicateDesc, (ID3D11Predicate**)pppPredicate);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateCounter(CounterDesc* pCounterDesc, ID3D11Counter** ppCounter) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, ID3D11Counter**, HResult>)(LpVtbl[26]))(ptr, pCounterDesc, ppCounter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateCounter(ref CounterDesc pCounterDesc, ID3D11Counter** ppCounter) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppCounterDesc = &pCounterDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, ID3D11Counter**, HResult>)(LpVtbl[26]))(ptr, (CounterDesc*)ppCounterDesc, ppCounter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateCounter(CounterDesc* pCounterDesc, ref ID3D11Counter* ppCounter) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Counter** pppCounter = &ppCounter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, ID3D11Counter**, HResult>)(LpVtbl[26]))(ptr, pCounterDesc, (ID3D11Counter**)pppCounter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateCounter(CounterDesc* pCounterDesc, out ComPtr<ID3D11Counter> ppCounter) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppCounter = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, ID3D11Counter**, HResult>)(LpVtbl[26]))(ptr, pCounterDesc, (ID3D11Counter**)ppCounter.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateCounter(ref CounterDesc pCounterDesc, ref ID3D11Counter* ppCounter) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppCounterDesc = &pCounterDesc)
			{
				fixed (ID3D11Counter** pppCounter = &ppCounter)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, ID3D11Counter**, HResult>)(LpVtbl[26]))(ptr, (CounterDesc*)ppCounterDesc, (ID3D11Counter**)pppCounter);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateCounter(ref CounterDesc pCounterDesc, out ComPtr<ID3D11Counter> ppCounter) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppCounterDesc = &pCounterDesc)
			{
				ppCounter = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, ID3D11Counter**, HResult>)(LpVtbl[26]))(ptr, (CounterDesc*)ppCounterDesc, (ID3D11Counter**)ppCounter.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeferredContext(uint contextFlags, ID3D11DeviceContext** ppDeferredContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, ID3D11DeviceContext**, HResult>)(LpVtbl[27]))(ptr, contextFlags, ppDeferredContext);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeferredContext(uint contextFlags, ref ID3D11DeviceContext* ppDeferredContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext** pppDeferredContext = &ppDeferredContext)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, ID3D11DeviceContext**, HResult>)(LpVtbl[27]))(ptr, contextFlags, (ID3D11DeviceContext**)pppDeferredContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeferredContext(uint contextFlags, out ComPtr<ID3D11DeviceContext> ppDeferredContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppDeferredContext = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, ID3D11DeviceContext**, HResult>)(LpVtbl[27]))(ptr, contextFlags, (ID3D11DeviceContext**)ppDeferredContext.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResource(nint hResource, Guid* returnedInterface, void** ppResource) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, nint, Guid*, void**, HResult>)(LpVtbl[28]))(ptr, hResource, returnedInterface, ppResource);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResource(nint hResource, ref Guid returnedInterface, void** ppResource) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, nint, Guid*, void**, HResult>)(LpVtbl[28]))(ptr, hResource, (Guid*)preturnedInterface, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResource<T>(nint hResource, out ComPtr<T> ppResource) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppResource = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, nint, Guid*, void**, HResult>)(LpVtbl[28]))(ptr, hResource, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppResource.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResource<T>(nint hResource, ref Guid returnedInterface, out ComPtr<T> ppResource) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				ppResource = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, nint, Guid*, void**, HResult>)(LpVtbl[28]))(ptr, hResource, (Guid*)preturnedInterface, (void**)ppResource.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckFormatSupport(Format format, uint* pFormatSupport) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Format, uint*, HResult>)(LpVtbl[29]))(ptr, format, pFormatSupport);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckFormatSupport(Format format, ref uint pFormatSupport) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFormatSupport = &pFormatSupport)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Format, uint*, HResult>)(LpVtbl[29]))(ptr, format, (uint*)ppFormatSupport);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckMultisampleQualityLevels(Format format, uint sampleCount, uint* pNumQualityLevels) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Format, uint, uint*, HResult>)(LpVtbl[30]))(ptr, format, sampleCount, pNumQualityLevels);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckMultisampleQualityLevels(Format format, uint sampleCount, ref uint pNumQualityLevels) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumQualityLevels = &pNumQualityLevels)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Format, uint, uint*, HResult>)(LpVtbl[30]))(ptr, format, sampleCount, (uint*)ppNumQualityLevels);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CheckCounterInfo(CounterInfo* pCounterInfo) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterInfo*, void>)(LpVtbl[31]))(ptr, pCounterInfo);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void CheckCounterInfo(ref CounterInfo pCounterInfo) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterInfo* ppCounterInfo = &pCounterInfo)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterInfo*, void>)(LpVtbl[31]))(ptr, (CounterInfo*)ppCounterInfo);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszUnits = szUnits)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szUnits != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszUnits = szUnits)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszUnits = szUnits)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszUnits = szUnits)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (byte* pszUnits = szUnits)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szUnits != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (byte* pszUnits = szUnits)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (byte* pszUnits = szUnits)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szUnits != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (byte* pszUnits = szUnits)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szUnits != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszUnits = szUnits)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szUnits != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szUnits != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szUnits != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (byte* pszUnits = szUnits)
								{
									fixed (uint* ppUnitsLength = &pUnitsLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szUnits != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszDescription = szDescription)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszDescription = szDescription)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszDescription = szDescription)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszDescription = szDescription)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (byte* pszDescription = szDescription)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szDescription != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szDescription);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (byte* pszDescription = szDescription)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szDescription != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszUnits = szUnits)
			{
				fixed (byte* pszDescription = szDescription)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szUnits != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szDescription != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szDescription);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szUnits != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (szDescription != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(szDescription);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (szDescription != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (szDescription != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (szDescription != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szUnits != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (szDescription != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (byte* pszUnits = szUnits)
								{
									fixed (byte* pszDescription = szDescription)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, pDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szUnits != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							byte* pStr2 = null;
							int pStrSize2 = 0;
							if (szDescription != null)
							{
								pStrSize2 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
								}
								else
								{
									byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
									pStr2 = pStrStack2;
								}
								int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
								pStr2[pStrOffset2] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, pDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				fixed (byte* pszDescription = szDescription)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szDescription != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szDescription != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szDescription != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szDescription != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								byte* pStr0 = null;
								int pStrSize0 = 0;
								if (szDescription != null)
								{
									pStrSize0 = Utils.GetByteCountUTF8(szDescription);
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
									}
									else
									{
										byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
										pStr0 = pStrStack0;
									}
									int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
									pStr0[pStrOffset0] = 0;
								}
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, pDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (byte* pszDescription = szDescription)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								byte* pStr1 = null;
								int pStrSize1 = 0;
								if (szDescription != null)
								{
									pStrSize1 = Utils.GetByteCountUTF8(szDescription);
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
									}
									else
									{
										byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
										pStr1 = pStrStack1;
									}
									int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
									pStr1[pStrOffset1] = 0;
								}
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszUnits = szUnits)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szUnits != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szUnits != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (szDescription != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (byte* pszDescription = szDescription)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr2 = null;
							int pStrSize2 = 0;
							if (szDescription != null)
							{
								pStrSize2 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
								}
								else
								{
									byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
									pStr2 = pStrStack2;
								}
								int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
								pStr2[pStrOffset2] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (byte* pszDescription = szDescription)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szUnits != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								byte* pStr1 = null;
								int pStrSize1 = 0;
								if (szDescription != null)
								{
									pStrSize1 = Utils.GetByteCountUTF8(szDescription);
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
									}
									else
									{
										byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
										pStr1 = pStrStack1;
									}
									int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
									pStr1[pStrOffset1] = 0;
								}
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, pDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (byte* pszDescription = szDescription)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr2 = null;
							int pStrSize2 = 0;
							if (szDescription != null)
							{
								pStrSize2 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
								}
								else
								{
									byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
									pStr2 = pStrStack2;
								}
								int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
								pStr2[pStrOffset2] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (byte* pszDescription = szDescription)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr2 = null;
							int pStrSize2 = 0;
							if (szDescription != null)
							{
								pStrSize2 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
								}
								else
								{
									byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
									pStr2 = pStrStack2;
								}
								int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
								pStr2[pStrOffset2] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (byte* pszDescription = szDescription)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr2 = null;
							int pStrSize2 = 0;
							if (szDescription != null)
							{
								pStrSize2 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
								}
								else
								{
									byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
									pStr2 = pStrStack2;
								}
								int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
								pStr2[pStrOffset2] = 0;
							}
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (byte* pszUnits = szUnits)
								{
									fixed (uint* ppUnitsLength = &pUnitsLength)
									{
										fixed (byte* pszDescription = szDescription)
										{
											HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, pDescriptionLength);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szUnits != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								byte* pStr2 = null;
								int pStrSize2 = 0;
								if (szDescription != null)
								{
									pStrSize2 = Utils.GetByteCountUTF8(szDescription);
									if (pStrSize2 >= Utils.MaxStackallocSize)
									{
										pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
									}
									else
									{
										byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
										pStr2 = pStrStack2;
									}
									int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
									pStr2[pStrOffset2] = 0;
								}
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, pDescriptionLength);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr2);
								}
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDescriptionLength = &pDescriptionLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppDescriptionLength = &pDescriptionLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszUnits = szUnits)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szUnits != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppDescriptionLength = &pDescriptionLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szUnits != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (uint* ppDescriptionLength = &pDescriptionLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szUnits != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (byte* pszUnits = szUnits)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szUnits != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszUnits = szUnits)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szUnits != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szUnits != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szUnits != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (byte* pszUnits = szUnits)
								{
									fixed (uint* ppUnitsLength = &pUnitsLength)
									{
										fixed (uint* ppDescriptionLength = &pDescriptionLength)
										{
											HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szUnits != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr1);
									}
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszDescription = szDescription)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppDescriptionLength = &pDescriptionLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszDescription = szDescription)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszDescription = szDescription)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszDescription = szDescription)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (byte* pszDescription = szDescription)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szDescription != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szDescription);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (uint* ppDescriptionLength = &pDescriptionLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (byte* pszDescription = szDescription)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szDescription != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszUnits = szUnits)
			{
				fixed (byte* pszDescription = szDescription)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szUnits != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szDescription != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szDescription);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (uint* ppDescriptionLength = &pDescriptionLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szUnits != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (szDescription != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(szDescription);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			fixed (uint* ppDescriptionLength = &pDescriptionLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (szDescription != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (szDescription != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (szDescription != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szUnits != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (szDescription != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (byte* pszUnits = szUnits)
								{
									fixed (byte* pszDescription = szDescription)
									{
										fixed (uint* ppDescriptionLength = &pDescriptionLength)
										{
											HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szUnits != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							byte* pStr2 = null;
							int pStrSize2 = 0;
							if (szDescription != null)
							{
								pStrSize2 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
								}
								else
								{
									byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
									pStr2 = pStrStack2;
								}
								int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
								pStr2[pStrOffset2] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, pUnitsLength, pStr2, (uint*)ppDescriptionLength);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr2);
								}
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				fixed (byte* pszDescription = szDescription)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szDescription != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szDescription != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szDescription != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szDescription != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								byte* pStr0 = null;
								int pStrSize0 = 0;
								if (szDescription != null)
								{
									pStrSize0 = Utils.GetByteCountUTF8(szDescription);
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
									}
									else
									{
										byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
										pStr0 = pStrStack0;
									}
									int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
									pStr0[pStrOffset0] = 0;
								}
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr0, (uint*)ppDescriptionLength);
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (byte* pszDescription = szDescription)
									{
										fixed (uint* ppDescriptionLength = &pDescriptionLength)
										{
											HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								byte* pStr1 = null;
								int pStrSize1 = 0;
								if (szDescription != null)
								{
									pStrSize1 = Utils.GetByteCountUTF8(szDescription);
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
									}
									else
									{
										byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
										pStr1 = pStrStack1;
									}
									int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
									pStr1[pStrOffset1] = 0;
								}
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr1);
									}
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszUnits = szUnits)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szUnits != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szUnits != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (szDescription != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (byte* pszDescription = szDescription)
									{
										fixed (uint* ppDescriptionLength = &pDescriptionLength)
										{
											HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr2 = null;
							int pStrSize2 = 0;
							if (szDescription != null)
							{
								pStrSize2 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
								}
								else
								{
									byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
									pStr2 = pStrStack2;
								}
								int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
								pStr2[pStrOffset2] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr2);
								}
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szDescription != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (byte* pszDescription = szDescription)
									{
										fixed (uint* ppDescriptionLength = &pDescriptionLength)
										{
											HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szUnits != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								byte* pStr1 = null;
								int pStrSize1 = 0;
								if (szDescription != null)
								{
									pStrSize1 = Utils.GetByteCountUTF8(szDescription);
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
									}
									else
									{
										byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
										pStr1 = pStrStack1;
									}
									int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
									pStr1[pStrOffset1] = 0;
								}
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, pStr1, (uint*)ppDescriptionLength);
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr1);
									}
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (szDescription != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (byte* pszDescription = szDescription)
									{
										fixed (uint* ppDescriptionLength = &pDescriptionLength)
										{
											HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr2 = null;
							int pStrSize2 = 0;
							if (szDescription != null)
							{
								pStrSize2 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
								}
								else
								{
									byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
									pStr2 = pStrStack2;
								}
								int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
								pStr2[pStrOffset2] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr2);
								}
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (byte* pszDescription = szDescription)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						byte* pStr2 = null;
						int pStrSize2 = 0;
						if (szDescription != null)
						{
							pStrSize2 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
							}
							else
							{
								byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
								pStr2 = pStrStack2;
							}
							int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
							pStr2[pStrOffset2] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (byte* pszDescription = szDescription)
									{
										fixed (uint* ppDescriptionLength = &pDescriptionLength)
										{
											HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr2 = null;
							int pStrSize2 = 0;
							if (szDescription != null)
							{
								pStrSize2 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
								}
								else
								{
									byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
									pStr2 = pStrStack2;
								}
								int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
								pStr2[pStrOffset2] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr2);
								}
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (byte* pszDescription = szDescription)
									{
										fixed (uint* ppDescriptionLength = &pDescriptionLength)
										{
											HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							byte* pStr2 = null;
							int pStrSize2 = 0;
							if (szDescription != null)
							{
								pStrSize2 = Utils.GetByteCountUTF8(szDescription);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
								}
								else
								{
									byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
									pStr2 = pStrStack2;
								}
								int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
								pStr2[pStrOffset2] = 0;
							}
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
								if (pStrSize2 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr2);
								}
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (byte* pszUnits = szUnits)
								{
									fixed (uint* ppUnitsLength = &pUnitsLength)
									{
										fixed (byte* pszDescription = szDescription)
										{
											fixed (uint* ppDescriptionLength = &pDescriptionLength)
											{
												HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
												return ret;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckCounter(ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szUnits != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								byte* pStr2 = null;
								int pStrSize2 = 0;
								if (szDescription != null)
								{
									pStrSize2 = Utils.GetByteCountUTF8(szDescription);
									if (pStrSize2 >= Utils.MaxStackallocSize)
									{
										pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
									}
									else
									{
										byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
										pStr2 = pStrStack2;
									}
									int pStrOffset2 = Utils.EncodeStringUTF8(szDescription, pStr2, pStrSize2);
									pStr2[pStrOffset2] = 0;
								}
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[32]))(ptr, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, pStr2, (uint*)ppDescriptionLength);
									if (pStrSize2 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr2);
									}
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr1);
									}
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckFeatureSupport(Feature feature, void* pFeatureSupportData, uint featureSupportDataSize) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Feature, void*, uint, HResult>)(LpVtbl[33]))(ptr, feature, pFeatureSupportData, featureSupportDataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckFeatureSupport<T>(Feature feature, ComPtr<T> pFeatureSupportData, uint featureSupportDataSize) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Feature, void*, uint, HResult>)(LpVtbl[33]))(ptr, feature, (void*)pFeatureSupportData.Handle, featureSupportDataSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, uint*, void*, HResult>)(LpVtbl[34]))(ptr, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData(ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, uint*, void*, HResult>)(LpVtbl[34]))(ptr, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData(Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, uint*, void*, HResult>)(LpVtbl[34]))(ptr, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData(ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, uint*, void*, HResult>)(LpVtbl[34]))(ptr, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData<T>(Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, uint*, void*, HResult>)(LpVtbl[34]))(ptr, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData<T>(ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, uint*, void*, HResult>)(LpVtbl[34]))(ptr, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData<T>(Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, uint*, void*, HResult>)(LpVtbl[34]))(ptr, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetPrivateData<T>(ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, uint*, void*, HResult>)(LpVtbl[34]))(ptr, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateData(Guid* guid, uint dataSize, void* pData) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, uint, void*, HResult>)(LpVtbl[35]))(ptr, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateData(ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, uint, void*, HResult>)(LpVtbl[35]))(ptr, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, IUnknown*, HResult>)(LpVtbl[36]))(ptr, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(ref Guid guid, IUnknown* pData) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, IUnknown*, HResult>)(LpVtbl[36]))(ptr, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(Guid* guid, ref IUnknown pData) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, IUnknown*, HResult>)(LpVtbl[36]))(ptr, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, IUnknown*, HResult>)(LpVtbl[36]))(ptr, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(ref Guid guid, ref IUnknown pData) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, IUnknown*, HResult>)(LpVtbl[36]))(ptr, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetPrivateDataInterface(ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Guid*, IUnknown*, HResult>)(LpVtbl[36]))(ptr, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe FeatureLevel GetFeatureLevel() 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			FeatureLevel ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, FeatureLevel>)(LpVtbl[37]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetCreationFlags() 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint>)(LpVtbl[38]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult GetDeviceRemovedReason() 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, HResult>)(LpVtbl[39]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetImmediateContext(ID3D11DeviceContext** ppImmediateContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11DeviceContext**, void>)(LpVtbl[40]))(ptr, ppImmediateContext);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetImmediateContext(ref ID3D11DeviceContext* ppImmediateContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11DeviceContext**, void>)(LpVtbl[40]))(ptr, (ID3D11DeviceContext**)pppImmediateContext);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetImmediateContext(out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppImmediateContext = default;
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11DeviceContext**, void>)(LpVtbl[40]))(ptr, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult SetExceptionMode(uint raiseFlags) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, HResult>)(LpVtbl[41]))(ptr, raiseFlags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe uint GetExceptionMode() 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint>)(LpVtbl[42]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetImmediateContext1(ID3D11DeviceContext1** ppImmediateContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11DeviceContext1**, void>)(LpVtbl[43]))(ptr, ppImmediateContext);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetImmediateContext1(ref ID3D11DeviceContext1* ppImmediateContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext1** pppImmediateContext = &ppImmediateContext)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11DeviceContext1**, void>)(LpVtbl[43]))(ptr, (ID3D11DeviceContext1**)pppImmediateContext);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetImmediateContext1(out ComPtr<ID3D11DeviceContext1> ppImmediateContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppImmediateContext = default;
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11DeviceContext1**, void>)(LpVtbl[43]))(ptr, (ID3D11DeviceContext1**)ppImmediateContext.GetAddressOf());
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeferredContext1(uint contextFlags, ID3D11DeviceContext1** ppDeferredContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, ID3D11DeviceContext1**, HResult>)(LpVtbl[44]))(ptr, contextFlags, ppDeferredContext);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeferredContext1(uint contextFlags, ref ID3D11DeviceContext1* ppDeferredContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext1** pppDeferredContext = &ppDeferredContext)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, ID3D11DeviceContext1**, HResult>)(LpVtbl[44]))(ptr, contextFlags, (ID3D11DeviceContext1**)pppDeferredContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeferredContext1(uint contextFlags, out ComPtr<ID3D11DeviceContext1> ppDeferredContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppDeferredContext = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, ID3D11DeviceContext1**, HResult>)(LpVtbl[44]))(ptr, contextFlags, (ID3D11DeviceContext1**)ppDeferredContext.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBlendState1(BlendDesc1* pBlendStateDesc, ID3D11BlendState1** ppBlendState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BlendDesc1*, ID3D11BlendState1**, HResult>)(LpVtbl[45]))(ptr, pBlendStateDesc, ppBlendState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBlendState1(ref BlendDesc1 pBlendStateDesc, ID3D11BlendState1** ppBlendState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (BlendDesc1* ppBlendStateDesc = &pBlendStateDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BlendDesc1*, ID3D11BlendState1**, HResult>)(LpVtbl[45]))(ptr, (BlendDesc1*)ppBlendStateDesc, ppBlendState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBlendState1(BlendDesc1* pBlendStateDesc, ref ID3D11BlendState1* ppBlendState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11BlendState1** pppBlendState = &ppBlendState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BlendDesc1*, ID3D11BlendState1**, HResult>)(LpVtbl[45]))(ptr, pBlendStateDesc, (ID3D11BlendState1**)pppBlendState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBlendState1(BlendDesc1* pBlendStateDesc, out ComPtr<ID3D11BlendState1> ppBlendState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppBlendState = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BlendDesc1*, ID3D11BlendState1**, HResult>)(LpVtbl[45]))(ptr, pBlendStateDesc, (ID3D11BlendState1**)ppBlendState.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBlendState1(ref BlendDesc1 pBlendStateDesc, ref ID3D11BlendState1* ppBlendState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (BlendDesc1* ppBlendStateDesc = &pBlendStateDesc)
			{
				fixed (ID3D11BlendState1** pppBlendState = &ppBlendState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BlendDesc1*, ID3D11BlendState1**, HResult>)(LpVtbl[45]))(ptr, (BlendDesc1*)ppBlendStateDesc, (ID3D11BlendState1**)pppBlendState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateBlendState1(ref BlendDesc1 pBlendStateDesc, out ComPtr<ID3D11BlendState1> ppBlendState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (BlendDesc1* ppBlendStateDesc = &pBlendStateDesc)
			{
				ppBlendState = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, BlendDesc1*, ID3D11BlendState1**, HResult>)(LpVtbl[45]))(ptr, (BlendDesc1*)ppBlendStateDesc, (ID3D11BlendState1**)ppBlendState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState1(RasterizerDesc1* pRasterizerDesc, ID3D11RasterizerState1** ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc1*, ID3D11RasterizerState1**, HResult>)(LpVtbl[46]))(ptr, pRasterizerDesc, ppRasterizerState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState1(ref RasterizerDesc1 pRasterizerDesc, ID3D11RasterizerState1** ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RasterizerDesc1* ppRasterizerDesc = &pRasterizerDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc1*, ID3D11RasterizerState1**, HResult>)(LpVtbl[46]))(ptr, (RasterizerDesc1*)ppRasterizerDesc, ppRasterizerState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState1(RasterizerDesc1* pRasterizerDesc, ref ID3D11RasterizerState1* ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RasterizerState1** pppRasterizerState = &ppRasterizerState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc1*, ID3D11RasterizerState1**, HResult>)(LpVtbl[46]))(ptr, pRasterizerDesc, (ID3D11RasterizerState1**)pppRasterizerState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState1(RasterizerDesc1* pRasterizerDesc, out ComPtr<ID3D11RasterizerState1> ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppRasterizerState = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc1*, ID3D11RasterizerState1**, HResult>)(LpVtbl[46]))(ptr, pRasterizerDesc, (ID3D11RasterizerState1**)ppRasterizerState.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState1(ref RasterizerDesc1 pRasterizerDesc, ref ID3D11RasterizerState1* ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RasterizerDesc1* ppRasterizerDesc = &pRasterizerDesc)
			{
				fixed (ID3D11RasterizerState1** pppRasterizerState = &ppRasterizerState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc1*, ID3D11RasterizerState1**, HResult>)(LpVtbl[46]))(ptr, (RasterizerDesc1*)ppRasterizerDesc, (ID3D11RasterizerState1**)pppRasterizerState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState1(ref RasterizerDesc1 pRasterizerDesc, out ComPtr<ID3D11RasterizerState1> ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RasterizerDesc1* ppRasterizerDesc = &pRasterizerDesc)
			{
				ppRasterizerState = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc1*, ID3D11RasterizerState1**, HResult>)(LpVtbl[46]))(ptr, (RasterizerDesc1*)ppRasterizerDesc, (ID3D11RasterizerState1**)ppRasterizerState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, Guid* emulatedInterface, FeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, pFeatureLevels, featureLevels, sdkVersion, emulatedInterface, pChosenFeatureLevel, ppContextState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, Guid* emulatedInterface, FeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, emulatedInterface, pChosenFeatureLevel, ppContextState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref Guid emulatedInterface, FeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pemulatedInterface = &emulatedInterface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, pFeatureLevels, featureLevels, sdkVersion, (Guid*)pemulatedInterface, pChosenFeatureLevel, ppContextState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref Guid emulatedInterface, FeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (Guid* pemulatedInterface = &emulatedInterface)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (Guid*)pemulatedInterface, pChosenFeatureLevel, ppContextState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, Guid* emulatedInterface, ref FeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (FeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, pFeatureLevels, featureLevels, sdkVersion, emulatedInterface, (FeatureLevel*)ppChosenFeatureLevel, ppContextState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, Guid* emulatedInterface, ref FeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (FeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, emulatedInterface, (FeatureLevel*)ppChosenFeatureLevel, ppContextState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref Guid emulatedInterface, ref FeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pemulatedInterface = &emulatedInterface)
			{
				fixed (FeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, pFeatureLevels, featureLevels, sdkVersion, (Guid*)pemulatedInterface, (FeatureLevel*)ppChosenFeatureLevel, ppContextState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref Guid emulatedInterface, ref FeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (Guid* pemulatedInterface = &emulatedInterface)
				{
					fixed (FeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (Guid*)pemulatedInterface, (FeatureLevel*)ppChosenFeatureLevel, ppContextState);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, Guid* emulatedInterface, FeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, pFeatureLevels, featureLevels, sdkVersion, emulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, Guid* emulatedInterface, FeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, emulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref Guid emulatedInterface, FeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pemulatedInterface = &emulatedInterface)
			{
				fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, pFeatureLevels, featureLevels, sdkVersion, (Guid*)pemulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref Guid emulatedInterface, FeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (Guid* pemulatedInterface = &emulatedInterface)
				{
					fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (Guid*)pemulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, Guid* emulatedInterface, ref FeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (FeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
			{
				fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, pFeatureLevels, featureLevels, sdkVersion, emulatedInterface, (FeatureLevel*)ppChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, Guid* emulatedInterface, ref FeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (FeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
				{
					fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, emulatedInterface, (FeatureLevel*)ppChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref Guid emulatedInterface, ref FeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pemulatedInterface = &emulatedInterface)
			{
				fixed (FeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
				{
					fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, pFeatureLevels, featureLevels, sdkVersion, (Guid*)pemulatedInterface, (FeatureLevel*)ppChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref Guid emulatedInterface, ref FeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (Guid* pemulatedInterface = &emulatedInterface)
				{
					fixed (FeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
					{
						fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, FeatureLevel*, uint, uint, Guid*, FeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[47]))(ptr, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (Guid*)pemulatedInterface, (FeatureLevel*)ppChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResource1(nint hResource, Guid* returnedInterface, void** ppResource) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, nint, Guid*, void**, HResult>)(LpVtbl[48]))(ptr, hResource, returnedInterface, ppResource);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResource1(nint hResource, ref Guid returnedInterface, void** ppResource) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, nint, Guid*, void**, HResult>)(LpVtbl[48]))(ptr, hResource, (Guid*)preturnedInterface, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResource1<T>(nint hResource, out ComPtr<T> ppResource) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppResource = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, nint, Guid*, void**, HResult>)(LpVtbl[48]))(ptr, hResource, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppResource.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResource1<T>(nint hResource, ref Guid returnedInterface, out ComPtr<T> ppResource) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				ppResource = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, nint, Guid*, void**, HResult>)(LpVtbl[48]))(ptr, hResource, (Guid*)preturnedInterface, (void**)ppResource.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResourceByName(char* lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, char*, uint, Guid*, void**, HResult>)(LpVtbl[49]))(ptr, lpName, dwDesiredAccess, returnedInterface, ppResource);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResourceByName(ReadOnlySpan<char> lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* plpName = lpName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, char*, uint, Guid*, void**, HResult>)(LpVtbl[49]))(ptr, (char*)plpName, dwDesiredAccess, returnedInterface, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResourceByName(string lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (lpName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(lpName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(lpName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, char*, uint, Guid*, void**, HResult>)(LpVtbl[49]))(ptr, pStr0, dwDesiredAccess, returnedInterface, ppResource);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResourceByName(char* lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, char*, uint, Guid*, void**, HResult>)(LpVtbl[49]))(ptr, lpName, dwDesiredAccess, (Guid*)preturnedInterface, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResourceByName(ReadOnlySpan<char> lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char* plpName = lpName)
			{
				fixed (Guid* preturnedInterface = &returnedInterface)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, char*, uint, Guid*, void**, HResult>)(LpVtbl[49]))(ptr, (char*)plpName, dwDesiredAccess, (Guid*)preturnedInterface, ppResource);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResourceByName(string lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (lpName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(lpName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(lpName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, char*, uint, Guid*, void**, HResult>)(LpVtbl[49]))(ptr, pStr0, dwDesiredAccess, (Guid*)preturnedInterface, ppResource);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResourceByName<T>(char* lpName, uint dwDesiredAccess, out ComPtr<T> ppResource) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppResource = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, char*, uint, Guid*, void**, HResult>)(LpVtbl[49]))(ptr, lpName, dwDesiredAccess, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppResource.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult OpenSharedResourceByName<T>(char* lpName, uint dwDesiredAccess, ref Guid returnedInterface, out ComPtr<T> ppResource) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				ppResource = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, char*, uint, Guid*, void**, HResult>)(LpVtbl[49]))(ptr, lpName, dwDesiredAccess, (Guid*)preturnedInterface, (void**)ppResource.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetImmediateContext2(ID3D11DeviceContext2** ppImmediateContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11DeviceContext2**, void>)(LpVtbl[50]))(ptr, ppImmediateContext);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetImmediateContext2(ref ID3D11DeviceContext2* ppImmediateContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext2** pppImmediateContext = &ppImmediateContext)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11DeviceContext2**, void>)(LpVtbl[50]))(ptr, (ID3D11DeviceContext2**)pppImmediateContext);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetImmediateContext2(out ComPtr<ID3D11DeviceContext2> ppImmediateContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppImmediateContext = default;
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11DeviceContext2**, void>)(LpVtbl[50]))(ptr, (ID3D11DeviceContext2**)ppImmediateContext.GetAddressOf());
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeferredContext2(uint contextFlags, ID3D11DeviceContext2** ppDeferredContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, ID3D11DeviceContext2**, HResult>)(LpVtbl[51]))(ptr, contextFlags, ppDeferredContext);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeferredContext2(uint contextFlags, ref ID3D11DeviceContext2* ppDeferredContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext2** pppDeferredContext = &ppDeferredContext)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, ID3D11DeviceContext2**, HResult>)(LpVtbl[51]))(ptr, contextFlags, (ID3D11DeviceContext2**)pppDeferredContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeferredContext2(uint contextFlags, out ComPtr<ID3D11DeviceContext2> ppDeferredContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppDeferredContext = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, ID3D11DeviceContext2**, HResult>)(LpVtbl[51]))(ptr, contextFlags, (ID3D11DeviceContext2**)ppDeferredContext.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
							{
								((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
			{
				fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
			{
				fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, pNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
							{
								fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
								{
									((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetResourceTiling(ComPtr<ID3D11Resource> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)pTiledResource.Handle, (uint*)ppNumTilesForEntireResource, (PackedMipDesc*)ppPackedMipDesc, (TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckMultisampleQualityLevels1(Format format, uint sampleCount, uint flags, uint* pNumQualityLevels) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Format, uint, uint, uint*, HResult>)(LpVtbl[53]))(ptr, format, sampleCount, flags, pNumQualityLevels);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CheckMultisampleQualityLevels1(Format format, uint sampleCount, uint flags, ref uint pNumQualityLevels) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumQualityLevels = &pNumQualityLevels)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Format, uint, uint, uint*, HResult>)(LpVtbl[53]))(ptr, format, sampleCount, flags, (uint*)ppNumQualityLevels);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D1(Texture2DDesc1* pDesc1, SubresourceData* pInitialData, ID3D11Texture2D1** ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[54]))(ptr, pDesc1, pInitialData, ppTexture2D);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D1(ref Texture2DDesc1 pDesc1, SubresourceData* pInitialData, ID3D11Texture2D1** ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture2DDesc1* ppDesc1 = &pDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[54]))(ptr, (Texture2DDesc1*)ppDesc1, pInitialData, ppTexture2D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D1(Texture2DDesc1* pDesc1, ref SubresourceData pInitialData, ID3D11Texture2D1** ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[54]))(ptr, pDesc1, (SubresourceData*)ppInitialData, ppTexture2D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D1(ref Texture2DDesc1 pDesc1, ref SubresourceData pInitialData, ID3D11Texture2D1** ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture2DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[54]))(ptr, (Texture2DDesc1*)ppDesc1, (SubresourceData*)ppInitialData, ppTexture2D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D1(Texture2DDesc1* pDesc1, SubresourceData* pInitialData, ref ID3D11Texture2D1* ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture2D1** pppTexture2D = &ppTexture2D)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[54]))(ptr, pDesc1, pInitialData, (ID3D11Texture2D1**)pppTexture2D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D1(Texture2DDesc1* pDesc1, SubresourceData* pInitialData, out ComPtr<ID3D11Texture2D1> ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppTexture2D = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[54]))(ptr, pDesc1, pInitialData, (ID3D11Texture2D1**)ppTexture2D.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D1(ref Texture2DDesc1 pDesc1, SubresourceData* pInitialData, ref ID3D11Texture2D1* ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture2DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (ID3D11Texture2D1** pppTexture2D = &ppTexture2D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[54]))(ptr, (Texture2DDesc1*)ppDesc1, pInitialData, (ID3D11Texture2D1**)pppTexture2D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D1(ref Texture2DDesc1 pDesc1, SubresourceData* pInitialData, out ComPtr<ID3D11Texture2D1> ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture2DDesc1* ppDesc1 = &pDesc1)
			{
				ppTexture2D = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[54]))(ptr, (Texture2DDesc1*)ppDesc1, pInitialData, (ID3D11Texture2D1**)ppTexture2D.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D1(Texture2DDesc1* pDesc1, ref SubresourceData pInitialData, ref ID3D11Texture2D1* ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				fixed (ID3D11Texture2D1** pppTexture2D = &ppTexture2D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[54]))(ptr, pDesc1, (SubresourceData*)ppInitialData, (ID3D11Texture2D1**)pppTexture2D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D1(Texture2DDesc1* pDesc1, ref SubresourceData pInitialData, out ComPtr<ID3D11Texture2D1> ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				ppTexture2D = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[54]))(ptr, pDesc1, (SubresourceData*)ppInitialData, (ID3D11Texture2D1**)ppTexture2D.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D1(ref Texture2DDesc1 pDesc1, ref SubresourceData pInitialData, ref ID3D11Texture2D1* ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture2DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					fixed (ID3D11Texture2D1** pppTexture2D = &ppTexture2D)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[54]))(ptr, (Texture2DDesc1*)ppDesc1, (SubresourceData*)ppInitialData, (ID3D11Texture2D1**)pppTexture2D);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture2D1(ref Texture2DDesc1 pDesc1, ref SubresourceData pInitialData, out ComPtr<ID3D11Texture2D1> ppTexture2D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture2DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					ppTexture2D = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[54]))(ptr, (Texture2DDesc1*)ppDesc1, (SubresourceData*)ppInitialData, (ID3D11Texture2D1**)ppTexture2D.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D1(Texture3DDesc1* pDesc1, SubresourceData* pInitialData, ID3D11Texture3D1** ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[55]))(ptr, pDesc1, pInitialData, ppTexture3D);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D1(ref Texture3DDesc1 pDesc1, SubresourceData* pInitialData, ID3D11Texture3D1** ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture3DDesc1* ppDesc1 = &pDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[55]))(ptr, (Texture3DDesc1*)ppDesc1, pInitialData, ppTexture3D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D1(Texture3DDesc1* pDesc1, ref SubresourceData pInitialData, ID3D11Texture3D1** ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[55]))(ptr, pDesc1, (SubresourceData*)ppInitialData, ppTexture3D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D1(ref Texture3DDesc1 pDesc1, ref SubresourceData pInitialData, ID3D11Texture3D1** ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture3DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[55]))(ptr, (Texture3DDesc1*)ppDesc1, (SubresourceData*)ppInitialData, ppTexture3D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D1(Texture3DDesc1* pDesc1, SubresourceData* pInitialData, ref ID3D11Texture3D1* ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture3D1** pppTexture3D = &ppTexture3D)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[55]))(ptr, pDesc1, pInitialData, (ID3D11Texture3D1**)pppTexture3D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D1(Texture3DDesc1* pDesc1, SubresourceData* pInitialData, out ComPtr<ID3D11Texture3D1> ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppTexture3D = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[55]))(ptr, pDesc1, pInitialData, (ID3D11Texture3D1**)ppTexture3D.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D1(ref Texture3DDesc1 pDesc1, SubresourceData* pInitialData, ref ID3D11Texture3D1* ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture3DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (ID3D11Texture3D1** pppTexture3D = &ppTexture3D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[55]))(ptr, (Texture3DDesc1*)ppDesc1, pInitialData, (ID3D11Texture3D1**)pppTexture3D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D1(ref Texture3DDesc1 pDesc1, SubresourceData* pInitialData, out ComPtr<ID3D11Texture3D1> ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture3DDesc1* ppDesc1 = &pDesc1)
			{
				ppTexture3D = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[55]))(ptr, (Texture3DDesc1*)ppDesc1, pInitialData, (ID3D11Texture3D1**)ppTexture3D.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D1(Texture3DDesc1* pDesc1, ref SubresourceData pInitialData, ref ID3D11Texture3D1* ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				fixed (ID3D11Texture3D1** pppTexture3D = &ppTexture3D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[55]))(ptr, pDesc1, (SubresourceData*)ppInitialData, (ID3D11Texture3D1**)pppTexture3D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D1(Texture3DDesc1* pDesc1, ref SubresourceData pInitialData, out ComPtr<ID3D11Texture3D1> ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				ppTexture3D = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[55]))(ptr, pDesc1, (SubresourceData*)ppInitialData, (ID3D11Texture3D1**)ppTexture3D.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D1(ref Texture3DDesc1 pDesc1, ref SubresourceData pInitialData, ref ID3D11Texture3D1* ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture3DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					fixed (ID3D11Texture3D1** pppTexture3D = &ppTexture3D)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[55]))(ptr, (Texture3DDesc1*)ppDesc1, (SubresourceData*)ppInitialData, (ID3D11Texture3D1**)pppTexture3D);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateTexture3D1(ref Texture3DDesc1 pDesc1, ref SubresourceData pInitialData, out ComPtr<ID3D11Texture3D1> ppTexture3D) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Texture3DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					ppTexture3D = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[55]))(ptr, (Texture3DDesc1*)ppDesc1, (SubresourceData*)ppInitialData, (ID3D11Texture3D1**)ppTexture3D.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState2(RasterizerDesc2* pRasterizerDesc, ID3D11RasterizerState2** ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc2*, ID3D11RasterizerState2**, HResult>)(LpVtbl[56]))(ptr, pRasterizerDesc, ppRasterizerState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState2(ref RasterizerDesc2 pRasterizerDesc, ID3D11RasterizerState2** ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RasterizerDesc2* ppRasterizerDesc = &pRasterizerDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc2*, ID3D11RasterizerState2**, HResult>)(LpVtbl[56]))(ptr, (RasterizerDesc2*)ppRasterizerDesc, ppRasterizerState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState2(RasterizerDesc2* pRasterizerDesc, ref ID3D11RasterizerState2* ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RasterizerState2** pppRasterizerState = &ppRasterizerState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc2*, ID3D11RasterizerState2**, HResult>)(LpVtbl[56]))(ptr, pRasterizerDesc, (ID3D11RasterizerState2**)pppRasterizerState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState2(RasterizerDesc2* pRasterizerDesc, out ComPtr<ID3D11RasterizerState2> ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppRasterizerState = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc2*, ID3D11RasterizerState2**, HResult>)(LpVtbl[56]))(ptr, pRasterizerDesc, (ID3D11RasterizerState2**)ppRasterizerState.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState2(ref RasterizerDesc2 pRasterizerDesc, ref ID3D11RasterizerState2* ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RasterizerDesc2* ppRasterizerDesc = &pRasterizerDesc)
			{
				fixed (ID3D11RasterizerState2** pppRasterizerState = &ppRasterizerState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc2*, ID3D11RasterizerState2**, HResult>)(LpVtbl[56]))(ptr, (RasterizerDesc2*)ppRasterizerDesc, (ID3D11RasterizerState2**)pppRasterizerState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRasterizerState2(ref RasterizerDesc2 pRasterizerDesc, out ComPtr<ID3D11RasterizerState2> ppRasterizerState) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RasterizerDesc2* ppRasterizerDesc = &pRasterizerDesc)
			{
				ppRasterizerState = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, RasterizerDesc2*, ID3D11RasterizerState2**, HResult>)(LpVtbl[56]))(ptr, (RasterizerDesc2*)ppRasterizerDesc, (ID3D11RasterizerState2**)ppRasterizerState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ID3D11Resource* pResource, ShaderResourceViewDesc1* pDesc1, ID3D11ShaderResourceView1** ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, pResource, pDesc1, ppSRView1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ref ID3D11Resource pResource, ShaderResourceViewDesc1* pDesc1, ID3D11ShaderResourceView1** ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, (ID3D11Resource*)ppResource, pDesc1, ppSRView1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ComPtr<ID3D11Resource> pResource, ShaderResourceViewDesc1* pDesc1, ID3D11ShaderResourceView1** ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc1, ppSRView1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ID3D11Resource* pResource, ref ShaderResourceViewDesc1 pDesc1, ID3D11ShaderResourceView1** ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ShaderResourceViewDesc1* ppDesc1 = &pDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, pResource, (ShaderResourceViewDesc1*)ppDesc1, ppSRView1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ref ID3D11Resource pResource, ref ShaderResourceViewDesc1 pDesc1, ID3D11ShaderResourceView1** ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ShaderResourceViewDesc1* ppDesc1 = &pDesc1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, (ID3D11Resource*)ppResource, (ShaderResourceViewDesc1*)ppDesc1, ppSRView1);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ComPtr<ID3D11Resource> pResource, ref ShaderResourceViewDesc1 pDesc1, ID3D11ShaderResourceView1** ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ShaderResourceViewDesc1* ppDesc1 = &pDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, (ID3D11Resource*)pResource.Handle, (ShaderResourceViewDesc1*)ppDesc1, ppSRView1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ID3D11Resource* pResource, ShaderResourceViewDesc1* pDesc1, ref ID3D11ShaderResourceView1* ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView1** pppSRView1 = &ppSRView1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, pResource, pDesc1, (ID3D11ShaderResourceView1**)pppSRView1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ID3D11Resource* pResource, ShaderResourceViewDesc1* pDesc1, out ComPtr<ID3D11ShaderResourceView1> ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppSRView1 = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, pResource, pDesc1, (ID3D11ShaderResourceView1**)ppSRView1.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ref ID3D11Resource pResource, ShaderResourceViewDesc1* pDesc1, ref ID3D11ShaderResourceView1* ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11ShaderResourceView1** pppSRView1 = &ppSRView1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, (ID3D11Resource*)ppResource, pDesc1, (ID3D11ShaderResourceView1**)pppSRView1);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ComPtr<ID3D11Resource> pResource, ShaderResourceViewDesc1* pDesc1, out ComPtr<ID3D11ShaderResourceView1> ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppSRView1 = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc1, (ID3D11ShaderResourceView1**)ppSRView1.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ID3D11Resource* pResource, ref ShaderResourceViewDesc1 pDesc1, ref ID3D11ShaderResourceView1* ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ShaderResourceViewDesc1* ppDesc1 = &pDesc1)
			{
				fixed (ID3D11ShaderResourceView1** pppSRView1 = &ppSRView1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, pResource, (ShaderResourceViewDesc1*)ppDesc1, (ID3D11ShaderResourceView1**)pppSRView1);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ID3D11Resource* pResource, ref ShaderResourceViewDesc1 pDesc1, out ComPtr<ID3D11ShaderResourceView1> ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ShaderResourceViewDesc1* ppDesc1 = &pDesc1)
			{
				ppSRView1 = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, pResource, (ShaderResourceViewDesc1*)ppDesc1, (ID3D11ShaderResourceView1**)ppSRView1.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ref ID3D11Resource pResource, ref ShaderResourceViewDesc1 pDesc1, ref ID3D11ShaderResourceView1* ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ShaderResourceViewDesc1* ppDesc1 = &pDesc1)
				{
					fixed (ID3D11ShaderResourceView1** pppSRView1 = &ppSRView1)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, (ID3D11Resource*)ppResource, (ShaderResourceViewDesc1*)ppDesc1, (ID3D11ShaderResourceView1**)pppSRView1);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateShaderResourceView1(ComPtr<ID3D11Resource> pResource, ref ShaderResourceViewDesc1 pDesc1, out ComPtr<ID3D11ShaderResourceView1> ppSRView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ShaderResourceViewDesc1* ppDesc1 = &pDesc1)
			{
				ppSRView1 = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[57]))(ptr, (ID3D11Resource*)pResource.Handle, (ShaderResourceViewDesc1*)ppDesc1, (ID3D11ShaderResourceView1**)ppSRView1.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ID3D11Resource* pResource, UnorderedAccessViewDesc1* pDesc1, ID3D11UnorderedAccessView1** ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, pResource, pDesc1, ppUAView1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ref ID3D11Resource pResource, UnorderedAccessViewDesc1* pDesc1, ID3D11UnorderedAccessView1** ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, (ID3D11Resource*)ppResource, pDesc1, ppUAView1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ComPtr<ID3D11Resource> pResource, UnorderedAccessViewDesc1* pDesc1, ID3D11UnorderedAccessView1** ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc1, ppUAView1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ID3D11Resource* pResource, ref UnorderedAccessViewDesc1 pDesc1, ID3D11UnorderedAccessView1** ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (UnorderedAccessViewDesc1* ppDesc1 = &pDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, pResource, (UnorderedAccessViewDesc1*)ppDesc1, ppUAView1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ref ID3D11Resource pResource, ref UnorderedAccessViewDesc1 pDesc1, ID3D11UnorderedAccessView1** ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (UnorderedAccessViewDesc1* ppDesc1 = &pDesc1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, (ID3D11Resource*)ppResource, (UnorderedAccessViewDesc1*)ppDesc1, ppUAView1);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ComPtr<ID3D11Resource> pResource, ref UnorderedAccessViewDesc1 pDesc1, ID3D11UnorderedAccessView1** ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (UnorderedAccessViewDesc1* ppDesc1 = &pDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, (ID3D11Resource*)pResource.Handle, (UnorderedAccessViewDesc1*)ppDesc1, ppUAView1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ID3D11Resource* pResource, UnorderedAccessViewDesc1* pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView1** pppUAView1 = &ppUAView1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, pResource, pDesc1, (ID3D11UnorderedAccessView1**)pppUAView1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ID3D11Resource* pResource, UnorderedAccessViewDesc1* pDesc1, out ComPtr<ID3D11UnorderedAccessView1> ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppUAView1 = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, pResource, pDesc1, (ID3D11UnorderedAccessView1**)ppUAView1.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ref ID3D11Resource pResource, UnorderedAccessViewDesc1* pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11UnorderedAccessView1** pppUAView1 = &ppUAView1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, (ID3D11Resource*)ppResource, pDesc1, (ID3D11UnorderedAccessView1**)pppUAView1);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ComPtr<ID3D11Resource> pResource, UnorderedAccessViewDesc1* pDesc1, out ComPtr<ID3D11UnorderedAccessView1> ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppUAView1 = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc1, (ID3D11UnorderedAccessView1**)ppUAView1.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ID3D11Resource* pResource, ref UnorderedAccessViewDesc1 pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (UnorderedAccessViewDesc1* ppDesc1 = &pDesc1)
			{
				fixed (ID3D11UnorderedAccessView1** pppUAView1 = &ppUAView1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, pResource, (UnorderedAccessViewDesc1*)ppDesc1, (ID3D11UnorderedAccessView1**)pppUAView1);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ID3D11Resource* pResource, ref UnorderedAccessViewDesc1 pDesc1, out ComPtr<ID3D11UnorderedAccessView1> ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (UnorderedAccessViewDesc1* ppDesc1 = &pDesc1)
			{
				ppUAView1 = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, pResource, (UnorderedAccessViewDesc1*)ppDesc1, (ID3D11UnorderedAccessView1**)ppUAView1.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ref ID3D11Resource pResource, ref UnorderedAccessViewDesc1 pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (UnorderedAccessViewDesc1* ppDesc1 = &pDesc1)
				{
					fixed (ID3D11UnorderedAccessView1** pppUAView1 = &ppUAView1)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, (ID3D11Resource*)ppResource, (UnorderedAccessViewDesc1*)ppDesc1, (ID3D11UnorderedAccessView1**)pppUAView1);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateUnorderedAccessView1(ComPtr<ID3D11Resource> pResource, ref UnorderedAccessViewDesc1 pDesc1, out ComPtr<ID3D11UnorderedAccessView1> ppUAView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (UnorderedAccessViewDesc1* ppDesc1 = &pDesc1)
			{
				ppUAView1 = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[58]))(ptr, (ID3D11Resource*)pResource.Handle, (UnorderedAccessViewDesc1*)ppDesc1, (ID3D11UnorderedAccessView1**)ppUAView1.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ID3D11Resource* pResource, RenderTargetViewDesc1* pDesc1, ID3D11RenderTargetView1** ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, pResource, pDesc1, ppRTView1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ref ID3D11Resource pResource, RenderTargetViewDesc1* pDesc1, ID3D11RenderTargetView1** ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, (ID3D11Resource*)ppResource, pDesc1, ppRTView1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ComPtr<ID3D11Resource> pResource, RenderTargetViewDesc1* pDesc1, ID3D11RenderTargetView1** ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc1, ppRTView1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ID3D11Resource* pResource, ref RenderTargetViewDesc1 pDesc1, ID3D11RenderTargetView1** ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RenderTargetViewDesc1* ppDesc1 = &pDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, pResource, (RenderTargetViewDesc1*)ppDesc1, ppRTView1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ref ID3D11Resource pResource, ref RenderTargetViewDesc1 pDesc1, ID3D11RenderTargetView1** ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (RenderTargetViewDesc1* ppDesc1 = &pDesc1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, (ID3D11Resource*)ppResource, (RenderTargetViewDesc1*)ppDesc1, ppRTView1);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ComPtr<ID3D11Resource> pResource, ref RenderTargetViewDesc1 pDesc1, ID3D11RenderTargetView1** ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RenderTargetViewDesc1* ppDesc1 = &pDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, (ID3D11Resource*)pResource.Handle, (RenderTargetViewDesc1*)ppDesc1, ppRTView1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ID3D11Resource* pResource, RenderTargetViewDesc1* pDesc1, ref ID3D11RenderTargetView1* ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView1** pppRTView1 = &ppRTView1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, pResource, pDesc1, (ID3D11RenderTargetView1**)pppRTView1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ID3D11Resource* pResource, RenderTargetViewDesc1* pDesc1, out ComPtr<ID3D11RenderTargetView1> ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppRTView1 = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, pResource, pDesc1, (ID3D11RenderTargetView1**)ppRTView1.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ref ID3D11Resource pResource, RenderTargetViewDesc1* pDesc1, ref ID3D11RenderTargetView1* ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11RenderTargetView1** pppRTView1 = &ppRTView1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, (ID3D11Resource*)ppResource, pDesc1, (ID3D11RenderTargetView1**)pppRTView1);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ComPtr<ID3D11Resource> pResource, RenderTargetViewDesc1* pDesc1, out ComPtr<ID3D11RenderTargetView1> ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppRTView1 = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc1, (ID3D11RenderTargetView1**)ppRTView1.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ID3D11Resource* pResource, ref RenderTargetViewDesc1 pDesc1, ref ID3D11RenderTargetView1* ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RenderTargetViewDesc1* ppDesc1 = &pDesc1)
			{
				fixed (ID3D11RenderTargetView1** pppRTView1 = &ppRTView1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, pResource, (RenderTargetViewDesc1*)ppDesc1, (ID3D11RenderTargetView1**)pppRTView1);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ID3D11Resource* pResource, ref RenderTargetViewDesc1 pDesc1, out ComPtr<ID3D11RenderTargetView1> ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RenderTargetViewDesc1* ppDesc1 = &pDesc1)
			{
				ppRTView1 = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, pResource, (RenderTargetViewDesc1*)ppDesc1, (ID3D11RenderTargetView1**)ppRTView1.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ref ID3D11Resource pResource, ref RenderTargetViewDesc1 pDesc1, ref ID3D11RenderTargetView1* ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (RenderTargetViewDesc1* ppDesc1 = &pDesc1)
				{
					fixed (ID3D11RenderTargetView1** pppRTView1 = &ppRTView1)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, (ID3D11Resource*)ppResource, (RenderTargetViewDesc1*)ppDesc1, (ID3D11RenderTargetView1**)pppRTView1);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateRenderTargetView1(ComPtr<ID3D11Resource> pResource, ref RenderTargetViewDesc1 pDesc1, out ComPtr<ID3D11RenderTargetView1> ppRTView1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (RenderTargetViewDesc1* ppDesc1 = &pDesc1)
			{
				ppRTView1 = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[59]))(ptr, (ID3D11Resource*)pResource.Handle, (RenderTargetViewDesc1*)ppDesc1, (ID3D11RenderTargetView1**)ppRTView1.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateQuery1(QueryDesc1* pQueryDesc1, ID3D11Query1** ppQuery1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc1*, ID3D11Query1**, HResult>)(LpVtbl[60]))(ptr, pQueryDesc1, ppQuery1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateQuery1(ref QueryDesc1 pQueryDesc1, ID3D11Query1** ppQuery1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (QueryDesc1* ppQueryDesc1 = &pQueryDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc1*, ID3D11Query1**, HResult>)(LpVtbl[60]))(ptr, (QueryDesc1*)ppQueryDesc1, ppQuery1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateQuery1(QueryDesc1* pQueryDesc1, ref ID3D11Query1* ppQuery1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Query1** pppQuery1 = &ppQuery1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc1*, ID3D11Query1**, HResult>)(LpVtbl[60]))(ptr, pQueryDesc1, (ID3D11Query1**)pppQuery1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateQuery1(QueryDesc1* pQueryDesc1, out ComPtr<ID3D11Query1> ppQuery1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppQuery1 = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc1*, ID3D11Query1**, HResult>)(LpVtbl[60]))(ptr, pQueryDesc1, (ID3D11Query1**)ppQuery1.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateQuery1(ref QueryDesc1 pQueryDesc1, ref ID3D11Query1* ppQuery1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (QueryDesc1* ppQueryDesc1 = &pQueryDesc1)
			{
				fixed (ID3D11Query1** pppQuery1 = &ppQuery1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc1*, ID3D11Query1**, HResult>)(LpVtbl[60]))(ptr, (QueryDesc1*)ppQueryDesc1, (ID3D11Query1**)pppQuery1);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateQuery1(ref QueryDesc1 pQueryDesc1, out ComPtr<ID3D11Query1> ppQuery1) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (QueryDesc1* ppQueryDesc1 = &pQueryDesc1)
			{
				ppQuery1 = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, QueryDesc1*, ID3D11Query1**, HResult>)(LpVtbl[60]))(ptr, (QueryDesc1*)ppQueryDesc1, (ID3D11Query1**)ppQuery1.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetImmediateContext3(ID3D11DeviceContext3** ppImmediateContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11DeviceContext3**, void>)(LpVtbl[61]))(ptr, ppImmediateContext);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetImmediateContext3(ref ID3D11DeviceContext3* ppImmediateContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext3** pppImmediateContext = &ppImmediateContext)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11DeviceContext3**, void>)(LpVtbl[61]))(ptr, (ID3D11DeviceContext3**)pppImmediateContext);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void GetImmediateContext3(out ComPtr<ID3D11DeviceContext3> ppImmediateContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppImmediateContext = default;
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11DeviceContext3**, void>)(LpVtbl[61]))(ptr, (ID3D11DeviceContext3**)ppImmediateContext.GetAddressOf());
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeferredContext3(uint contextFlags, ID3D11DeviceContext3** ppDeferredContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, ID3D11DeviceContext3**, HResult>)(LpVtbl[62]))(ptr, contextFlags, ppDeferredContext);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeferredContext3(uint contextFlags, ref ID3D11DeviceContext3* ppDeferredContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext3** pppDeferredContext = &ppDeferredContext)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, ID3D11DeviceContext3**, HResult>)(LpVtbl[62]))(ptr, contextFlags, (ID3D11DeviceContext3**)pppDeferredContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult CreateDeferredContext3(uint contextFlags, out ComPtr<ID3D11DeviceContext3> ppDeferredContext) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppDeferredContext = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, ID3D11DeviceContext3**, HResult>)(LpVtbl[62]))(ptr, contextFlags, (ID3D11DeviceContext3**)ppDeferredContext.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void WriteToSubresource(ID3D11Resource* pDstResource, uint dstSubresource, Box* pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)(LpVtbl[63]))(ptr, pDstResource, dstSubresource, pDstBox, pSrcData, srcRowPitch, srcDepthPitch);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void WriteToSubresource(ref ID3D11Resource pDstResource, uint dstSubresource, Box* pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)(LpVtbl[63]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, pDstBox, pSrcData, srcRowPitch, srcDepthPitch);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void WriteToSubresource(ComPtr<ID3D11Resource> pDstResource, uint dstSubresource, Box* pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)(LpVtbl[63]))(ptr, (ID3D11Resource*)pDstResource.Handle, dstSubresource, pDstBox, pSrcData, srcRowPitch, srcDepthPitch);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void WriteToSubresource(ID3D11Resource* pDstResource, uint dstSubresource, ref Box pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Box* ppDstBox = &pDstBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)(LpVtbl[63]))(ptr, pDstResource, dstSubresource, (Box*)ppDstBox, pSrcData, srcRowPitch, srcDepthPitch);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void WriteToSubresource(ref ID3D11Resource pDstResource, uint dstSubresource, ref Box pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				fixed (Box* ppDstBox = &pDstBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)(LpVtbl[63]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, (Box*)ppDstBox, pSrcData, srcRowPitch, srcDepthPitch);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void WriteToSubresource(ComPtr<ID3D11Resource> pDstResource, uint dstSubresource, ref Box pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Box* ppDstBox = &pDstBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)(LpVtbl[63]))(ptr, (ID3D11Resource*)pDstResource.Handle, dstSubresource, (Box*)ppDstBox, pSrcData, srcRowPitch, srcDepthPitch);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ReadFromSubresource(void* pDstData, uint dstRowPitch, uint dstDepthPitch, ID3D11Resource* pSrcResource, uint srcSubresource, Box* pSrcBox) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)(LpVtbl[64]))(ptr, pDstData, dstRowPitch, dstDepthPitch, pSrcResource, srcSubresource, pSrcBox);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ReadFromSubresource<T>(ComPtr<T> pDstData, uint dstRowPitch, uint dstDepthPitch, ID3D11Resource* pSrcResource, uint srcSubresource, Box* pSrcBox) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)(LpVtbl[64]))(ptr, (void*)pDstData.Handle, dstRowPitch, dstDepthPitch, pSrcResource, srcSubresource, pSrcBox);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ReadFromSubresource(void* pDstData, uint dstRowPitch, uint dstDepthPitch, ref ID3D11Resource pSrcResource, uint srcSubresource, Box* pSrcBox) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)(LpVtbl[64]))(ptr, pDstData, dstRowPitch, dstDepthPitch, (ID3D11Resource*)ppSrcResource, srcSubresource, pSrcBox);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ReadFromSubresource(void* pDstData, uint dstRowPitch, uint dstDepthPitch, ComPtr<ID3D11Resource> pSrcResource, uint srcSubresource, Box* pSrcBox) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)(LpVtbl[64]))(ptr, pDstData, dstRowPitch, dstDepthPitch, (ID3D11Resource*)pSrcResource.Handle, srcSubresource, pSrcBox);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ReadFromSubresource<T>(ComPtr<T> pDstData, uint dstRowPitch, uint dstDepthPitch, ComPtr<ID3D11Resource> pSrcResource, uint srcSubresource, Box* pSrcBox) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)(LpVtbl[64]))(ptr, (void*)pDstData.Handle, dstRowPitch, dstDepthPitch, (ID3D11Resource*)pSrcResource.Handle, srcSubresource, pSrcBox);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ReadFromSubresource(void* pDstData, uint dstRowPitch, uint dstDepthPitch, ID3D11Resource* pSrcResource, uint srcSubresource, ref Box pSrcBox) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Box* ppSrcBox = &pSrcBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)(LpVtbl[64]))(ptr, pDstData, dstRowPitch, dstDepthPitch, pSrcResource, srcSubresource, (Box*)ppSrcBox);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ReadFromSubresource<T>(ComPtr<T> pDstData, uint dstRowPitch, uint dstDepthPitch, ID3D11Resource* pSrcResource, uint srcSubresource, ref Box pSrcBox) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Box* ppSrcBox = &pSrcBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)(LpVtbl[64]))(ptr, (void*)pDstData.Handle, dstRowPitch, dstDepthPitch, pSrcResource, srcSubresource, (Box*)ppSrcBox);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ReadFromSubresource(void* pDstData, uint dstRowPitch, uint dstDepthPitch, ref ID3D11Resource pSrcResource, uint srcSubresource, ref Box pSrcBox) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
			{
				fixed (Box* ppSrcBox = &pSrcBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)(LpVtbl[64]))(ptr, pDstData, dstRowPitch, dstDepthPitch, (ID3D11Resource*)ppSrcResource, srcSubresource, (Box*)ppSrcBox);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ReadFromSubresource(void* pDstData, uint dstRowPitch, uint dstDepthPitch, ComPtr<ID3D11Resource> pSrcResource, uint srcSubresource, ref Box pSrcBox) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Box* ppSrcBox = &pSrcBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)(LpVtbl[64]))(ptr, pDstData, dstRowPitch, dstDepthPitch, (ID3D11Resource*)pSrcResource.Handle, srcSubresource, (Box*)ppSrcBox);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void ReadFromSubresource<T>(ComPtr<T> pDstData, uint dstRowPitch, uint dstDepthPitch, ComPtr<ID3D11Resource> pSrcResource, uint srcSubresource, ref Box pSrcBox) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Box* ppSrcBox = &pSrcBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device4*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)(LpVtbl[64]))(ptr, (void*)pDstData.Handle, dstRowPitch, dstDepthPitch, (ID3D11Resource*)pSrcResource.Handle, srcSubresource, (Box*)ppSrcBox);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult RegisterDeviceRemovedEvent(nint hEvent, uint* pdwCookie) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, nint, uint*, HResult>)(LpVtbl[65]))(ptr, hEvent, pdwCookie);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe HResult RegisterDeviceRemovedEvent(nint hEvent, ref uint pdwCookie) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, nint, uint*, HResult>)(LpVtbl[65]))(ptr, hEvent, (uint*)ppdwCookie);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public readonly unsafe void UnregisterDeviceRemoved(uint dwCookie) 
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, void>)(LpVtbl[66]))(ptr, dwCookie);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Device3 (ID3D11Device4 value)
		{
			return Unsafe.As<ID3D11Device4, ID3D11Device3>(ref value);
		}

		public unsafe static implicit operator ID3D11Device2 (ID3D11Device4 value)
		{
			return Unsafe.As<ID3D11Device4, ID3D11Device2>(ref value);
		}

		public unsafe static implicit operator ID3D11Device1 (ID3D11Device4 value)
		{
			return Unsafe.As<ID3D11Device4, ID3D11Device1>(ref value);
		}

		public unsafe static implicit operator ID3D11Device (ID3D11Device4 value)
		{
			return Unsafe.As<ID3D11Device4, ID3D11Device>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Device4 value)
		{
			return Unsafe.As<ID3D11Device4, IUnknown>(ref value);
		}

	}

}
