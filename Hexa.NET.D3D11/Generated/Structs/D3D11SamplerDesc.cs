// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_SAMPLER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11SamplerDesc
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Filter")]
		[NativeName(NativeNameType.Type, "D3D11_FILTER")]
		public D3D11Filter Filter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AddressU")]
		[NativeName(NativeNameType.Type, "D3D11_TEXTURE_ADDRESS_MODE")]
		public D3D11TextureAddressMode AddressU;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AddressV")]
		[NativeName(NativeNameType.Type, "D3D11_TEXTURE_ADDRESS_MODE")]
		public D3D11TextureAddressMode AddressV;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AddressW")]
		[NativeName(NativeNameType.Type, "D3D11_TEXTURE_ADDRESS_MODE")]
		public D3D11TextureAddressMode AddressW;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MipLODBias")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MipLODBias;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MaxAnisotropy")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxAnisotropy;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ComparisonFunc")]
		[NativeName(NativeNameType.Type, "D3D11_COMPARISON_FUNC")]
		public D3D11ComparisonFunc ComparisonFunc;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BorderColor")]
		[NativeName(NativeNameType.Type, "FLOAT[4]")]
		public float BorderColor_0;
		public float BorderColor_1;
		public float BorderColor_2;
		public float BorderColor_3;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MinLOD")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MinLOD;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MaxLOD")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MaxLOD;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe D3D11SamplerDesc(D3D11Filter filter = default, D3D11TextureAddressMode addressU = default, D3D11TextureAddressMode addressV = default, D3D11TextureAddressMode addressW = default, float mipLodBias = default, uint maxAnisotropy = default, D3D11ComparisonFunc comparisonFunc = default, float* borderColor = default, float minLod = default, float maxLod = default)
		{
			Filter = filter;
			AddressU = addressU;
			AddressV = addressV;
			AddressW = addressW;
			MipLODBias = mipLodBias;
			MaxAnisotropy = maxAnisotropy;
			ComparisonFunc = comparisonFunc;
			if (borderColor != default(float*))
			{
				BorderColor_0 = borderColor[0];
				BorderColor_1 = borderColor[1];
				BorderColor_2 = borderColor[2];
				BorderColor_3 = borderColor[3];
			}
			MinLOD = minLod;
			MaxLOD = maxLod;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe D3D11SamplerDesc(D3D11Filter filter = default, D3D11TextureAddressMode addressU = default, D3D11TextureAddressMode addressV = default, D3D11TextureAddressMode addressW = default, float mipLodBias = default, uint maxAnisotropy = default, D3D11ComparisonFunc comparisonFunc = default, Span<float> borderColor = default, float minLod = default, float maxLod = default)
		{
			Filter = filter;
			AddressU = addressU;
			AddressV = addressV;
			AddressW = addressW;
			MipLODBias = mipLodBias;
			MaxAnisotropy = maxAnisotropy;
			ComparisonFunc = comparisonFunc;
			if (borderColor != default(Span<float>))
			{
				BorderColor_0 = borderColor[0];
				BorderColor_1 = borderColor[1];
				BorderColor_2 = borderColor[2];
				BorderColor_3 = borderColor[3];
			}
			MinLOD = minLod;
			MaxLOD = maxLod;
		}


	}

}
