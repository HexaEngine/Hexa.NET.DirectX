// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ShaderInputBindDesc
	{
		/// <summary>
		/// Name of the resource<br/>
		/// </summary>
		public unsafe byte* Name;

		/// <summary>
		/// Type of resource (e.g. texture, cbuffer, etc.)<br/>
		/// </summary>
		public ShaderInputType Type;

		/// <summary>
		/// Starting bind point<br/>
		/// </summary>
		public uint BindPoint;

		/// <summary>
		/// Number of contiguous bind points (for arrays)<br/>
		/// </summary>
		public uint BindCount;

		/// <summary>
		/// Input binding flags<br/>
		/// </summary>
		public uint UFlags;

		/// <summary>
		/// Return type (if texture)<br/>
		/// </summary>
		public ResourceReturnType ReturnType;

		/// <summary>
		/// Dimension (if texture)<br/>
		/// </summary>
		public SrvDimension Dimension;

		/// <summary>
		/// Number of samples (0 if not MS texture)<br/>
		/// </summary>
		public uint NumSamples;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ShaderInputBindDesc(byte* name = default, ShaderInputType type = default, uint bindPoint = default, uint bindCount = default, uint uFlags = default, ResourceReturnType returnType = default, SrvDimension dimension = default, uint numSamples = default)
		{
			Name = name;
			Type = type;
			BindPoint = bindPoint;
			BindCount = bindCount;
			UFlags = uFlags;
			ReturnType = returnType;
			Dimension = dimension;
			NumSamples = numSamples;
		}


	}

}
