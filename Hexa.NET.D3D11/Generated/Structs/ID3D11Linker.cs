// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	/// <summary>
	/// {59A6CD0E-E10D-4C1F-88C0-63ABA1DAF30E}<br/>
	/// </summary>
	[Guid("59a6cd0e-e10d-4c1f-88c0-63aba1daf30e")]
	[NativeName(NativeNameType.StructOrClass, "ID3D11Linker")]
	public partial struct ID3D11Linker : IComObject, IComObject<ID3D11Linker>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("59a6cd0e-e10d-4c1f-88c0-63aba1daf30e");

		public unsafe ID3D11Linker (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint AddRef() 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint Release() 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (void** pppv = &ppv)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(LpVtbl[3]))(ptr, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(LpVtbl[3]))(ptr, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ComPtr<ID3D11ModuleInstance> pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)pEntry.Handle, pEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppEntryName = pEntryName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, (byte*)ppEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pStr0, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pStr0, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppTargetName = pTargetName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pEntryName, pStr0, uFlags, ppShaderBlob, ppErrorBuffer);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, pStr0, uFlags, ppShaderBlob, ppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pStr0, pStr1, uFlags, ppShaderBlob, ppErrorBuffer);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (byte* ppTargetName = pTargetName)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pStr0, pStr1, uFlags, ppShaderBlob, ppErrorBuffer);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ComPtr<ID3D11ModuleInstance> pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)pEntry.Handle, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, (byte*)ppEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pStr0, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pStr0, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppTargetName = pTargetName)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pEntryName, pStr0, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, pStr0, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pStr0, pStr1, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (byte* ppTargetName = pTargetName)
					{
						fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pStr0, pStr1, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ComPtr<ID3D11ModuleInstance> pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)pEntry.Handle, pEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, (byte*)ppEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pStr0, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pStr0, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppTargetName = pTargetName)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pEntryName, pStr0, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, pStr0, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pStr0, pStr1, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (byte* ppTargetName = pTargetName)
					{
						fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pStr0, pStr1, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ComPtr<ID3D11ModuleInstance> pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)pEntry.Handle, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, (byte*)ppEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pStr0, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pStr0, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppTargetName = pTargetName)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pEntryName, pStr0, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, pStr0, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, pEntry, pStr0, pStr1, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (byte* ppTargetName = pTargetName)
					{
						fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
						{
							fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int Link([NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppEntry, pStr0, pStr1, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "UseLibrary")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int UseLibrary([NativeName(NativeNameType.Param, "pLibraryMI")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pLibraryMI) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, int>)(LpVtbl[5]))(ptr, pLibraryMI);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "UseLibrary")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int UseLibrary([NativeName(NativeNameType.Param, "pLibraryMI")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pLibraryMI) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppLibraryMI = &pLibraryMI)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, int>)(LpVtbl[5]))(ptr, (ID3D11ModuleInstance*)ppLibraryMI);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "UseLibrary")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int UseLibrary([NativeName(NativeNameType.Param, "pLibraryMI")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ComPtr<ID3D11ModuleInstance> pLibraryMI) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, int>)(LpVtbl[5]))(ptr, (ID3D11ModuleInstance*)pLibraryMI.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddClipPlaneFromCBuffer")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int AddClipPlaneFromCBuffer([NativeName(NativeNameType.Param, "uCBufferSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uCBufferSlot, [NativeName(NativeNameType.Param, "uCBufferEntry")] [NativeName(NativeNameType.Type, "UINT")] uint uCBufferEntry) 
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, uint, uint, int>)(LpVtbl[6]))(ptr, uCBufferSlot, uCBufferEntry);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11Linker value)
		{
			return Unsafe.As<ID3D11Linker, IUnknown>(ref value);
		}

	}

}
