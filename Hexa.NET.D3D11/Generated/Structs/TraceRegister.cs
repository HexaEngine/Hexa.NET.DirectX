// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TraceRegister
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[StructLayout(LayoutKind.Explicit)]
		public partial struct TraceRegisterUnion
		{
			/// <summary>
			/// To be documented.
			/// </summary>
			[FieldOffset(0)]
			public ushort Index1D;

			/// <summary>
			/// To be documented.
			/// </summary>
			[FieldOffset(0)]
			public ushort Index2D_0;
			[FieldOffset(4)]
			public ushort Index2D_1;


			/// <summary>
			/// To be documented.
			/// </summary>
			public unsafe TraceRegisterUnion(ushort index1D = default, ushort* index2D = default)
			{
				Index1D = index1D;
				if (index2D != default(ushort*))
				{
					Index2D_0 = index2D[0];
					Index2D_1 = index2D[1];
				}
			}

			/// <summary>
			/// To be documented.
			/// </summary>
			public unsafe TraceRegisterUnion(ushort index1D = default, Span<ushort> index2D = default)
			{
				Index1D = index1D;
				if (index2D != default(Span<ushort>))
				{
					Index2D_0 = index2D[0];
					Index2D_1 = index2D[1];
				}
			}


		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public TraceRegisterType RegType;

		/// <summary>
		/// To be documented.
		/// </summary>
		public TraceRegisterUnion Union;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte OperandIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Flags;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe TraceRegister(TraceRegisterType regType = default, TraceRegisterUnion union = default, byte operandIndex = default, byte flags = default)
		{
			RegType = regType;
			Union = union;
			OperandIndex = operandIndex;
			Flags = flags;
		}


	}

}
