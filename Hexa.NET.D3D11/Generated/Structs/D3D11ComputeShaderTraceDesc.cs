// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_COMPUTE_SHADER_TRACE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ComputeShaderTraceDesc
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Invocation")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Invocation;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ThreadIDInGroup")]
		[NativeName(NativeNameType.Type, "UINT[3]")]
		public uint ThreadIDInGroup_0;
		public uint ThreadIDInGroup_1;
		public uint ThreadIDInGroup_2;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ThreadGroupID")]
		[NativeName(NativeNameType.Type, "UINT[3]")]
		public uint ThreadGroupID_0;
		public uint ThreadGroupID_1;
		public uint ThreadGroupID_2;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe D3D11ComputeShaderTraceDesc(ulong invocation = default, uint* threadIdInGroup = default, uint* threadGroupId = default)
		{
			Invocation = invocation;
			if (threadIdInGroup != default(uint*))
			{
				ThreadIDInGroup_0 = threadIdInGroup[0];
				ThreadIDInGroup_1 = threadIdInGroup[1];
				ThreadIDInGroup_2 = threadIdInGroup[2];
			}
			if (threadGroupId != default(uint*))
			{
				ThreadGroupID_0 = threadGroupId[0];
				ThreadGroupID_1 = threadGroupId[1];
				ThreadGroupID_2 = threadGroupId[2];
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe D3D11ComputeShaderTraceDesc(ulong invocation = default, Span<uint> threadIdInGroup = default, Span<uint> threadGroupId = default)
		{
			Invocation = invocation;
			if (threadIdInGroup != default(Span<uint>))
			{
				ThreadIDInGroup_0 = threadIdInGroup[0];
				ThreadIDInGroup_1 = threadIdInGroup[1];
				ThreadIDInGroup_2 = threadIdInGroup[2];
			}
			if (threadGroupId != default(Span<uint>))
			{
				ThreadGroupID_0 = threadGroupId[0];
				ThreadGroupID_1 = threadGroupId[1];
				ThreadGroupID_2 = threadGroupId[2];
			}
		}


	}

}
