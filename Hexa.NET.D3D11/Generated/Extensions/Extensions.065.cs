// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	public static unsafe partial class Extensions
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateTexture3D(this ComPtr<ID3D11Device5> comObj, Texture3DDesc* pDesc, SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(handle->LpVtbl[6]))(handle, pDesc, pInitialData, ppTexture3D);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateTexture3D(this ComPtr<ID3D11Device5> comObj, ref Texture3DDesc pDesc, SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (Texture3DDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(handle->LpVtbl[6]))(handle, (Texture3DDesc*)ppDesc, pInitialData, ppTexture3D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateTexture3D(this ComPtr<ID3D11Device5> comObj, Texture3DDesc* pDesc, ref SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(handle->LpVtbl[6]))(handle, pDesc, (SubresourceData*)ppInitialData, ppTexture3D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateTexture3D(this ComPtr<ID3D11Device5> comObj, ref Texture3DDesc pDesc, ref SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (Texture3DDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(handle->LpVtbl[6]))(handle, (Texture3DDesc*)ppDesc, (SubresourceData*)ppInitialData, ppTexture3D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateTexture3D(this ComPtr<ID3D11Device5> comObj, Texture3DDesc* pDesc, SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Texture3D** pppTexture3D = &ppTexture3D)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(handle->LpVtbl[6]))(handle, pDesc, pInitialData, (ID3D11Texture3D**)pppTexture3D);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateTexture3D(this ComPtr<ID3D11Device5> comObj, Texture3DDesc* pDesc, SubresourceData* pInitialData, out ComPtr<ID3D11Texture3D> ppTexture3D) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppTexture3D = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(handle->LpVtbl[6]))(handle, pDesc, pInitialData, (ID3D11Texture3D**)ppTexture3D.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateTexture3D(this ComPtr<ID3D11Device5> comObj, ref Texture3DDesc pDesc, SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (Texture3DDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11Texture3D** pppTexture3D = &ppTexture3D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(handle->LpVtbl[6]))(handle, (Texture3DDesc*)ppDesc, pInitialData, (ID3D11Texture3D**)pppTexture3D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateTexture3D(this ComPtr<ID3D11Device5> comObj, ref Texture3DDesc pDesc, SubresourceData* pInitialData, out ComPtr<ID3D11Texture3D> ppTexture3D) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (Texture3DDesc* ppDesc = &pDesc)
			{
				ppTexture3D = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(handle->LpVtbl[6]))(handle, (Texture3DDesc*)ppDesc, pInitialData, (ID3D11Texture3D**)ppTexture3D.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateTexture3D(this ComPtr<ID3D11Device5> comObj, Texture3DDesc* pDesc, ref SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				fixed (ID3D11Texture3D** pppTexture3D = &ppTexture3D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(handle->LpVtbl[6]))(handle, pDesc, (SubresourceData*)ppInitialData, (ID3D11Texture3D**)pppTexture3D);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateTexture3D(this ComPtr<ID3D11Device5> comObj, Texture3DDesc* pDesc, ref SubresourceData pInitialData, out ComPtr<ID3D11Texture3D> ppTexture3D) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SubresourceData* ppInitialData = &pInitialData)
			{
				ppTexture3D = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(handle->LpVtbl[6]))(handle, pDesc, (SubresourceData*)ppInitialData, (ID3D11Texture3D**)ppTexture3D.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateTexture3D(this ComPtr<ID3D11Device5> comObj, ref Texture3DDesc pDesc, ref SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (Texture3DDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					fixed (ID3D11Texture3D** pppTexture3D = &ppTexture3D)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(handle->LpVtbl[6]))(handle, (Texture3DDesc*)ppDesc, (SubresourceData*)ppInitialData, (ID3D11Texture3D**)pppTexture3D);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateTexture3D(this ComPtr<ID3D11Device5> comObj, ref Texture3DDesc pDesc, ref SubresourceData pInitialData, out ComPtr<ID3D11Texture3D> ppTexture3D) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (Texture3DDesc* ppDesc = &pDesc)
			{
				fixed (SubresourceData* ppInitialData = &pInitialData)
				{
					ppTexture3D = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, HResult>)(handle->LpVtbl[6]))(handle, (Texture3DDesc*)ppDesc, (SubresourceData*)ppInitialData, (ID3D11Texture3D**)ppTexture3D.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, pResource, pDesc, ppSRView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)ppResource, pDesc, ppSRView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)pResource.Handle, pDesc, ppSRView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ref ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, pResource, (ShaderResourceViewDesc*)ppDesc, ppSRView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, ref ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)ppResource, (ShaderResourceViewDesc*)ppDesc, ppSRView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, ref ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)pResource.Handle, (ShaderResourceViewDesc*)ppDesc, ppSRView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ShaderResourceView** pppSRView = &ppSRView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, pResource, pDesc, (ID3D11ShaderResourceView**)pppSRView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ShaderResourceViewDesc* pDesc, out ComPtr<ID3D11ShaderResourceView> ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppSRView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, pResource, pDesc, (ID3D11ShaderResourceView**)ppSRView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11ShaderResourceView** pppSRView = &ppSRView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)ppResource, pDesc, (ID3D11ShaderResourceView**)pppSRView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, ShaderResourceViewDesc* pDesc, out ComPtr<ID3D11ShaderResourceView> ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppSRView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)pResource.Handle, pDesc, (ID3D11ShaderResourceView**)ppSRView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ref ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11ShaderResourceView** pppSRView = &ppSRView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, pResource, (ShaderResourceViewDesc*)ppDesc, (ID3D11ShaderResourceView**)pppSRView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ref ShaderResourceViewDesc pDesc, out ComPtr<ID3D11ShaderResourceView> ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				ppSRView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, pResource, (ShaderResourceViewDesc*)ppDesc, (ID3D11ShaderResourceView**)ppSRView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, ref ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11ShaderResourceView** pppSRView = &ppSRView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)ppResource, (ShaderResourceViewDesc*)ppDesc, (ID3D11ShaderResourceView**)pppSRView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateShaderResourceView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, ref ShaderResourceViewDesc pDesc, out ComPtr<ID3D11ShaderResourceView> ppSRView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				ppSRView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)pResource.Handle, (ShaderResourceViewDesc*)ppDesc, (ID3D11ShaderResourceView**)ppSRView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, pDesc, ppUAView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)ppResource, pDesc, ppUAView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)pResource.Handle, pDesc, ppUAView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ref UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, (UnorderedAccessViewDesc*)ppDesc, ppUAView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, ref UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)ppResource, (UnorderedAccessViewDesc*)ppDesc, ppUAView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, ref UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)pResource.Handle, (UnorderedAccessViewDesc*)ppDesc, ppUAView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11UnorderedAccessView** pppUAView = &ppUAView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, pDesc, (ID3D11UnorderedAccessView**)pppUAView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, UnorderedAccessViewDesc* pDesc, out ComPtr<ID3D11UnorderedAccessView> ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppUAView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, pDesc, (ID3D11UnorderedAccessView**)ppUAView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11UnorderedAccessView** pppUAView = &ppUAView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)ppResource, pDesc, (ID3D11UnorderedAccessView**)pppUAView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, UnorderedAccessViewDesc* pDesc, out ComPtr<ID3D11UnorderedAccessView> ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppUAView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)pResource.Handle, pDesc, (ID3D11UnorderedAccessView**)ppUAView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ref UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11UnorderedAccessView** pppUAView = &ppUAView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, (UnorderedAccessViewDesc*)ppDesc, (ID3D11UnorderedAccessView**)pppUAView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ref UnorderedAccessViewDesc pDesc, out ComPtr<ID3D11UnorderedAccessView> ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				ppUAView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, (UnorderedAccessViewDesc*)ppDesc, (ID3D11UnorderedAccessView**)ppUAView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, ref UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11UnorderedAccessView** pppUAView = &ppUAView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)ppResource, (UnorderedAccessViewDesc*)ppDesc, (ID3D11UnorderedAccessView**)pppUAView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateUnorderedAccessView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, ref UnorderedAccessViewDesc pDesc, out ComPtr<ID3D11UnorderedAccessView> ppUAView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				ppUAView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)pResource.Handle, (UnorderedAccessViewDesc*)ppDesc, (ID3D11UnorderedAccessView**)ppUAView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, pDesc, ppRTView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)ppResource, pDesc, ppRTView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)pResource.Handle, pDesc, ppRTView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ref RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (RenderTargetViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, (RenderTargetViewDesc*)ppDesc, ppRTView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, ref RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (RenderTargetViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)ppResource, (RenderTargetViewDesc*)ppDesc, ppRTView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, ref RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (RenderTargetViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)pResource.Handle, (RenderTargetViewDesc*)ppDesc, ppRTView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11RenderTargetView** pppRTView = &ppRTView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, pDesc, (ID3D11RenderTargetView**)pppRTView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, RenderTargetViewDesc* pDesc, out ComPtr<ID3D11RenderTargetView> ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppRTView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, pDesc, (ID3D11RenderTargetView**)ppRTView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11RenderTargetView** pppRTView = &ppRTView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)ppResource, pDesc, (ID3D11RenderTargetView**)pppRTView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, RenderTargetViewDesc* pDesc, out ComPtr<ID3D11RenderTargetView> ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppRTView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)pResource.Handle, pDesc, (ID3D11RenderTargetView**)ppRTView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ref RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (RenderTargetViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11RenderTargetView** pppRTView = &ppRTView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, (RenderTargetViewDesc*)ppDesc, (ID3D11RenderTargetView**)pppRTView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ref RenderTargetViewDesc pDesc, out ComPtr<ID3D11RenderTargetView> ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (RenderTargetViewDesc* ppDesc = &pDesc)
			{
				ppRTView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, (RenderTargetViewDesc*)ppDesc, (ID3D11RenderTargetView**)ppRTView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, ref RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (RenderTargetViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11RenderTargetView** pppRTView = &ppRTView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)ppResource, (RenderTargetViewDesc*)ppDesc, (ID3D11RenderTargetView**)pppRTView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRenderTargetView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, ref RenderTargetViewDesc pDesc, out ComPtr<ID3D11RenderTargetView> ppRTView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (RenderTargetViewDesc* ppDesc = &pDesc)
			{
				ppRTView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)pResource.Handle, (RenderTargetViewDesc*)ppDesc, (ID3D11RenderTargetView**)ppRTView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, pResource, pDesc, ppDepthStencilView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, (ID3D11Resource*)ppResource, pDesc, ppDepthStencilView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, (ID3D11Resource*)pResource.Handle, pDesc, ppDepthStencilView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ref DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (DepthStencilViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, pResource, (DepthStencilViewDesc*)ppDesc, ppDepthStencilView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, ref DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (DepthStencilViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, (ID3D11Resource*)ppResource, (DepthStencilViewDesc*)ppDesc, ppDepthStencilView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, ref DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (DepthStencilViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, (ID3D11Resource*)pResource.Handle, (DepthStencilViewDesc*)ppDesc, ppDepthStencilView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, pResource, pDesc, (ID3D11DepthStencilView**)pppDepthStencilView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, DepthStencilViewDesc* pDesc, out ComPtr<ID3D11DepthStencilView> ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppDepthStencilView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, pResource, pDesc, (ID3D11DepthStencilView**)ppDepthStencilView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, (ID3D11Resource*)ppResource, pDesc, (ID3D11DepthStencilView**)pppDepthStencilView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, DepthStencilViewDesc* pDesc, out ComPtr<ID3D11DepthStencilView> ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppDepthStencilView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, (ID3D11Resource*)pResource.Handle, pDesc, (ID3D11DepthStencilView**)ppDepthStencilView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ref DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (DepthStencilViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, pResource, (DepthStencilViewDesc*)ppDesc, (ID3D11DepthStencilView**)pppDepthStencilView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ID3D11Resource* pResource, ref DepthStencilViewDesc pDesc, out ComPtr<ID3D11DepthStencilView> ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (DepthStencilViewDesc* ppDesc = &pDesc)
			{
				ppDepthStencilView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, pResource, (DepthStencilViewDesc*)ppDesc, (ID3D11DepthStencilView**)ppDepthStencilView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ref ID3D11Resource pResource, ref DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (DepthStencilViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, (ID3D11Resource*)ppResource, (DepthStencilViewDesc*)ppDesc, (ID3D11DepthStencilView**)pppDepthStencilView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilView(this ComPtr<ID3D11Device5> comObj, ComPtr<ID3D11Resource> pResource, ref DepthStencilViewDesc pDesc, out ComPtr<ID3D11DepthStencilView> ppDepthStencilView) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (DepthStencilViewDesc* ppDesc = &pDesc)
			{
				ppDepthStencilView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(handle->LpVtbl[10]))(handle, (ID3D11Resource*)pResource.Handle, (DepthStencilViewDesc*)ppDesc, (ID3D11DepthStencilView**)ppDepthStencilView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateInputLayout(this ComPtr<ID3D11Device5> comObj, InputElementDesc* pInputElementDescs, uint numElements, void* pShaderBytecodeWithInputSignature, nuint bytecodeLength, ID3D11InputLayout** ppInputLayout) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, HResult>)(handle->LpVtbl[11]))(handle, pInputElementDescs, numElements, pShaderBytecodeWithInputSignature, bytecodeLength, ppInputLayout);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateInputLayout(this ComPtr<ID3D11Device5> comObj, ref InputElementDesc pInputElementDescs, uint numElements, void* pShaderBytecodeWithInputSignature, nuint bytecodeLength, ID3D11InputLayout** ppInputLayout) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (InputElementDesc* ppInputElementDescs = &pInputElementDescs)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, HResult>)(handle->LpVtbl[11]))(handle, (InputElementDesc*)ppInputElementDescs, numElements, pShaderBytecodeWithInputSignature, bytecodeLength, ppInputLayout);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateInputLayout(this ComPtr<ID3D11Device5> comObj, InputElementDesc* pInputElementDescs, uint numElements, void* pShaderBytecodeWithInputSignature, nuint bytecodeLength, ref ID3D11InputLayout* ppInputLayout) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11InputLayout** pppInputLayout = &ppInputLayout)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, HResult>)(handle->LpVtbl[11]))(handle, pInputElementDescs, numElements, pShaderBytecodeWithInputSignature, bytecodeLength, (ID3D11InputLayout**)pppInputLayout);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateInputLayout(this ComPtr<ID3D11Device5> comObj, ref InputElementDesc pInputElementDescs, uint numElements, void* pShaderBytecodeWithInputSignature, nuint bytecodeLength, ref ID3D11InputLayout* ppInputLayout) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (InputElementDesc* ppInputElementDescs = &pInputElementDescs)
			{
				fixed (ID3D11InputLayout** pppInputLayout = &ppInputLayout)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, HResult>)(handle->LpVtbl[11]))(handle, (InputElementDesc*)ppInputElementDescs, numElements, pShaderBytecodeWithInputSignature, bytecodeLength, (ID3D11InputLayout**)pppInputLayout);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVertexShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11VertexShader** ppVertexShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(handle->LpVtbl[12]))(handle, pShaderBytecode, bytecodeLength, pClassLinkage, ppVertexShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVertexShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader** ppVertexShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(handle->LpVtbl[12]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppVertexShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVertexShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11VertexShader** ppVertexShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(handle->LpVtbl[12]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppVertexShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVertexShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11VertexShader* ppVertexShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11VertexShader** pppVertexShader = &ppVertexShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(handle->LpVtbl[12]))(handle, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11VertexShader**)pppVertexShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVertexShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11VertexShader* ppVertexShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11VertexShader** pppVertexShader = &ppVertexShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(handle->LpVtbl[12]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11VertexShader**)pppVertexShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVertexShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11VertexShader* ppVertexShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11VertexShader** pppVertexShader = &ppVertexShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(handle->LpVtbl[12]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11VertexShader**)pppVertexShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[13]))(handle, pShaderBytecode, bytecodeLength, pClassLinkage, ppGeometryShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[13]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[13]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppGeometryShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[13]))(handle, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[13]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[13]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11GeometryShader**)pppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, pClassLinkage, ppGeometryShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, pClassLinkage, ppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, pClassLinkage, ppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, pClassLinkage, ppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppGeometryShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11GeometryShader**)pppGeometryShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
				{
					fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
				{
					fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
					{
						fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(handle->LpVtbl[14]))(handle, pShaderBytecode, bytecodeLength, (SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11GeometryShader**)pppGeometryShader);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreatePixelShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11PixelShader** ppPixelShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(handle->LpVtbl[15]))(handle, pShaderBytecode, bytecodeLength, pClassLinkage, ppPixelShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreatePixelShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader** ppPixelShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(handle->LpVtbl[15]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppPixelShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreatePixelShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11PixelShader** ppPixelShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(handle->LpVtbl[15]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppPixelShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreatePixelShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11PixelShader* ppPixelShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11PixelShader** pppPixelShader = &ppPixelShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(handle->LpVtbl[15]))(handle, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11PixelShader**)pppPixelShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreatePixelShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11PixelShader* ppPixelShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11PixelShader** pppPixelShader = &ppPixelShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(handle->LpVtbl[15]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11PixelShader**)pppPixelShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreatePixelShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11PixelShader* ppPixelShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11PixelShader** pppPixelShader = &ppPixelShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(handle->LpVtbl[15]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11PixelShader**)pppPixelShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateHullShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11HullShader** ppHullShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(handle->LpVtbl[16]))(handle, pShaderBytecode, bytecodeLength, pClassLinkage, ppHullShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateHullShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11HullShader** ppHullShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(handle->LpVtbl[16]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppHullShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateHullShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11HullShader** ppHullShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(handle->LpVtbl[16]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppHullShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateHullShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11HullShader* ppHullShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11HullShader** pppHullShader = &ppHullShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(handle->LpVtbl[16]))(handle, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11HullShader**)pppHullShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateHullShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11HullShader* ppHullShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11HullShader** pppHullShader = &ppHullShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(handle->LpVtbl[16]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11HullShader**)pppHullShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateHullShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11HullShader* ppHullShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11HullShader** pppHullShader = &ppHullShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(handle->LpVtbl[16]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11HullShader**)pppHullShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDomainShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11DomainShader** ppDomainShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(handle->LpVtbl[17]))(handle, pShaderBytecode, bytecodeLength, pClassLinkage, ppDomainShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDomainShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader** ppDomainShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(handle->LpVtbl[17]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppDomainShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDomainShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11DomainShader** ppDomainShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(handle->LpVtbl[17]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppDomainShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDomainShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11DomainShader* ppDomainShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11DomainShader** pppDomainShader = &ppDomainShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(handle->LpVtbl[17]))(handle, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11DomainShader**)pppDomainShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDomainShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11DomainShader* ppDomainShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11DomainShader** pppDomainShader = &ppDomainShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(handle->LpVtbl[17]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11DomainShader**)pppDomainShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDomainShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11DomainShader* ppDomainShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11DomainShader** pppDomainShader = &ppDomainShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(handle->LpVtbl[17]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11DomainShader**)pppDomainShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateComputeShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11ComputeShader** ppComputeShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(handle->LpVtbl[18]))(handle, pShaderBytecode, bytecodeLength, pClassLinkage, ppComputeShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateComputeShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader** ppComputeShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(handle->LpVtbl[18]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppComputeShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateComputeShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ID3D11ComputeShader** ppComputeShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(handle->LpVtbl[18]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, ppComputeShader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateComputeShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ComputeShader** pppComputeShader = &ppComputeShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(handle->LpVtbl[18]))(handle, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11ComputeShader**)pppComputeShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateComputeShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11ComputeShader** pppComputeShader = &ppComputeShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(handle->LpVtbl[18]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11ComputeShader**)pppComputeShader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateComputeShader(this ComPtr<ID3D11Device5> comObj, void* pShaderBytecode, nuint bytecodeLength, ComPtr<ID3D11ClassLinkage> pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ComputeShader** pppComputeShader = &ppComputeShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(handle->LpVtbl[18]))(handle, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)pClassLinkage.Handle, (ID3D11ComputeShader**)pppComputeShader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateClassLinkage(this ComPtr<ID3D11Device5> comObj, ID3D11ClassLinkage** ppLinkage) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11ClassLinkage**, HResult>)(handle->LpVtbl[19]))(handle, ppLinkage);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateClassLinkage(this ComPtr<ID3D11Device5> comObj, ref ID3D11ClassLinkage* ppLinkage) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11ClassLinkage** pppLinkage = &ppLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11ClassLinkage**, HResult>)(handle->LpVtbl[19]))(handle, (ID3D11ClassLinkage**)pppLinkage);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateClassLinkage(this ComPtr<ID3D11Device5> comObj, out ComPtr<ID3D11ClassLinkage> ppLinkage) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppLinkage = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11ClassLinkage**, HResult>)(handle->LpVtbl[19]))(handle, (ID3D11ClassLinkage**)ppLinkage.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateBlendState(this ComPtr<ID3D11Device5> comObj, BlendDesc* pBlendStateDesc, ID3D11BlendState** ppBlendState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc*, ID3D11BlendState**, HResult>)(handle->LpVtbl[20]))(handle, pBlendStateDesc, ppBlendState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateBlendState(this ComPtr<ID3D11Device5> comObj, ref BlendDesc pBlendStateDesc, ID3D11BlendState** ppBlendState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (BlendDesc* ppBlendStateDesc = &pBlendStateDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc*, ID3D11BlendState**, HResult>)(handle->LpVtbl[20]))(handle, (BlendDesc*)ppBlendStateDesc, ppBlendState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateBlendState(this ComPtr<ID3D11Device5> comObj, BlendDesc* pBlendStateDesc, ref ID3D11BlendState* ppBlendState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11BlendState** pppBlendState = &ppBlendState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc*, ID3D11BlendState**, HResult>)(handle->LpVtbl[20]))(handle, pBlendStateDesc, (ID3D11BlendState**)pppBlendState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateBlendState(this ComPtr<ID3D11Device5> comObj, BlendDesc* pBlendStateDesc, out ComPtr<ID3D11BlendState> ppBlendState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppBlendState = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc*, ID3D11BlendState**, HResult>)(handle->LpVtbl[20]))(handle, pBlendStateDesc, (ID3D11BlendState**)ppBlendState.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateBlendState(this ComPtr<ID3D11Device5> comObj, ref BlendDesc pBlendStateDesc, ref ID3D11BlendState* ppBlendState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (BlendDesc* ppBlendStateDesc = &pBlendStateDesc)
			{
				fixed (ID3D11BlendState** pppBlendState = &ppBlendState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc*, ID3D11BlendState**, HResult>)(handle->LpVtbl[20]))(handle, (BlendDesc*)ppBlendStateDesc, (ID3D11BlendState**)pppBlendState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateBlendState(this ComPtr<ID3D11Device5> comObj, ref BlendDesc pBlendStateDesc, out ComPtr<ID3D11BlendState> ppBlendState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (BlendDesc* ppBlendStateDesc = &pBlendStateDesc)
			{
				ppBlendState = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc*, ID3D11BlendState**, HResult>)(handle->LpVtbl[20]))(handle, (BlendDesc*)ppBlendStateDesc, (ID3D11BlendState**)ppBlendState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilState(this ComPtr<ID3D11Device5> comObj, DepthStencilDesc* pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(handle->LpVtbl[21]))(handle, pDepthStencilDesc, ppDepthStencilState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilState(this ComPtr<ID3D11Device5> comObj, ref DepthStencilDesc pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (DepthStencilDesc* ppDepthStencilDesc = &pDepthStencilDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(handle->LpVtbl[21]))(handle, (DepthStencilDesc*)ppDepthStencilDesc, ppDepthStencilState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilState(this ComPtr<ID3D11Device5> comObj, DepthStencilDesc* pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11DepthStencilState** pppDepthStencilState = &ppDepthStencilState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(handle->LpVtbl[21]))(handle, pDepthStencilDesc, (ID3D11DepthStencilState**)pppDepthStencilState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilState(this ComPtr<ID3D11Device5> comObj, DepthStencilDesc* pDepthStencilDesc, out ComPtr<ID3D11DepthStencilState> ppDepthStencilState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppDepthStencilState = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(handle->LpVtbl[21]))(handle, pDepthStencilDesc, (ID3D11DepthStencilState**)ppDepthStencilState.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilState(this ComPtr<ID3D11Device5> comObj, ref DepthStencilDesc pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (DepthStencilDesc* ppDepthStencilDesc = &pDepthStencilDesc)
			{
				fixed (ID3D11DepthStencilState** pppDepthStencilState = &ppDepthStencilState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(handle->LpVtbl[21]))(handle, (DepthStencilDesc*)ppDepthStencilDesc, (ID3D11DepthStencilState**)pppDepthStencilState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDepthStencilState(this ComPtr<ID3D11Device5> comObj, ref DepthStencilDesc pDepthStencilDesc, out ComPtr<ID3D11DepthStencilState> ppDepthStencilState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (DepthStencilDesc* ppDepthStencilDesc = &pDepthStencilDesc)
			{
				ppDepthStencilState = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(handle->LpVtbl[21]))(handle, (DepthStencilDesc*)ppDepthStencilDesc, (ID3D11DepthStencilState**)ppDepthStencilState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRasterizerState(this ComPtr<ID3D11Device5> comObj, RasterizerDesc* pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc*, ID3D11RasterizerState**, HResult>)(handle->LpVtbl[22]))(handle, pRasterizerDesc, ppRasterizerState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRasterizerState(this ComPtr<ID3D11Device5> comObj, ref RasterizerDesc pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (RasterizerDesc* ppRasterizerDesc = &pRasterizerDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc*, ID3D11RasterizerState**, HResult>)(handle->LpVtbl[22]))(handle, (RasterizerDesc*)ppRasterizerDesc, ppRasterizerState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRasterizerState(this ComPtr<ID3D11Device5> comObj, RasterizerDesc* pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11RasterizerState** pppRasterizerState = &ppRasterizerState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc*, ID3D11RasterizerState**, HResult>)(handle->LpVtbl[22]))(handle, pRasterizerDesc, (ID3D11RasterizerState**)pppRasterizerState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRasterizerState(this ComPtr<ID3D11Device5> comObj, RasterizerDesc* pRasterizerDesc, out ComPtr<ID3D11RasterizerState> ppRasterizerState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppRasterizerState = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc*, ID3D11RasterizerState**, HResult>)(handle->LpVtbl[22]))(handle, pRasterizerDesc, (ID3D11RasterizerState**)ppRasterizerState.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRasterizerState(this ComPtr<ID3D11Device5> comObj, ref RasterizerDesc pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (RasterizerDesc* ppRasterizerDesc = &pRasterizerDesc)
			{
				fixed (ID3D11RasterizerState** pppRasterizerState = &ppRasterizerState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc*, ID3D11RasterizerState**, HResult>)(handle->LpVtbl[22]))(handle, (RasterizerDesc*)ppRasterizerDesc, (ID3D11RasterizerState**)pppRasterizerState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateRasterizerState(this ComPtr<ID3D11Device5> comObj, ref RasterizerDesc pRasterizerDesc, out ComPtr<ID3D11RasterizerState> ppRasterizerState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (RasterizerDesc* ppRasterizerDesc = &pRasterizerDesc)
			{
				ppRasterizerState = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc*, ID3D11RasterizerState**, HResult>)(handle->LpVtbl[22]))(handle, (RasterizerDesc*)ppRasterizerDesc, (ID3D11RasterizerState**)ppRasterizerState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSamplerState(this ComPtr<ID3D11Device5> comObj, SamplerDesc* pSamplerDesc, ID3D11SamplerState** ppSamplerState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, SamplerDesc*, ID3D11SamplerState**, HResult>)(handle->LpVtbl[23]))(handle, pSamplerDesc, ppSamplerState);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSamplerState(this ComPtr<ID3D11Device5> comObj, ref SamplerDesc pSamplerDesc, ID3D11SamplerState** ppSamplerState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SamplerDesc* ppSamplerDesc = &pSamplerDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, SamplerDesc*, ID3D11SamplerState**, HResult>)(handle->LpVtbl[23]))(handle, (SamplerDesc*)ppSamplerDesc, ppSamplerState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSamplerState(this ComPtr<ID3D11Device5> comObj, SamplerDesc* pSamplerDesc, ref ID3D11SamplerState* ppSamplerState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11SamplerState** pppSamplerState = &ppSamplerState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, SamplerDesc*, ID3D11SamplerState**, HResult>)(handle->LpVtbl[23]))(handle, pSamplerDesc, (ID3D11SamplerState**)pppSamplerState);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSamplerState(this ComPtr<ID3D11Device5> comObj, SamplerDesc* pSamplerDesc, out ComPtr<ID3D11SamplerState> ppSamplerState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppSamplerState = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, SamplerDesc*, ID3D11SamplerState**, HResult>)(handle->LpVtbl[23]))(handle, pSamplerDesc, (ID3D11SamplerState**)ppSamplerState.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSamplerState(this ComPtr<ID3D11Device5> comObj, ref SamplerDesc pSamplerDesc, ref ID3D11SamplerState* ppSamplerState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SamplerDesc* ppSamplerDesc = &pSamplerDesc)
			{
				fixed (ID3D11SamplerState** pppSamplerState = &ppSamplerState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, SamplerDesc*, ID3D11SamplerState**, HResult>)(handle->LpVtbl[23]))(handle, (SamplerDesc*)ppSamplerDesc, (ID3D11SamplerState**)pppSamplerState);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateSamplerState(this ComPtr<ID3D11Device5> comObj, ref SamplerDesc pSamplerDesc, out ComPtr<ID3D11SamplerState> ppSamplerState) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (SamplerDesc* ppSamplerDesc = &pSamplerDesc)
			{
				ppSamplerState = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, SamplerDesc*, ID3D11SamplerState**, HResult>)(handle->LpVtbl[23]))(handle, (SamplerDesc*)ppSamplerDesc, (ID3D11SamplerState**)ppSamplerState.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateQuery(this ComPtr<ID3D11Device5> comObj, QueryDesc* pQueryDesc, ID3D11Query** ppQuery) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Query**, HResult>)(handle->LpVtbl[24]))(handle, pQueryDesc, ppQuery);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateQuery(this ComPtr<ID3D11Device5> comObj, ref QueryDesc pQueryDesc, ID3D11Query** ppQuery) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (QueryDesc* ppQueryDesc = &pQueryDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Query**, HResult>)(handle->LpVtbl[24]))(handle, (QueryDesc*)ppQueryDesc, ppQuery);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateQuery(this ComPtr<ID3D11Device5> comObj, QueryDesc* pQueryDesc, ref ID3D11Query* ppQuery) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Query** pppQuery = &ppQuery)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Query**, HResult>)(handle->LpVtbl[24]))(handle, pQueryDesc, (ID3D11Query**)pppQuery);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateQuery(this ComPtr<ID3D11Device5> comObj, QueryDesc* pQueryDesc, out ComPtr<ID3D11Query> ppQuery) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppQuery = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Query**, HResult>)(handle->LpVtbl[24]))(handle, pQueryDesc, (ID3D11Query**)ppQuery.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateQuery(this ComPtr<ID3D11Device5> comObj, ref QueryDesc pQueryDesc, ref ID3D11Query* ppQuery) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (QueryDesc* ppQueryDesc = &pQueryDesc)
			{
				fixed (ID3D11Query** pppQuery = &ppQuery)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Query**, HResult>)(handle->LpVtbl[24]))(handle, (QueryDesc*)ppQueryDesc, (ID3D11Query**)pppQuery);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateQuery(this ComPtr<ID3D11Device5> comObj, ref QueryDesc pQueryDesc, out ComPtr<ID3D11Query> ppQuery) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (QueryDesc* ppQueryDesc = &pQueryDesc)
			{
				ppQuery = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Query**, HResult>)(handle->LpVtbl[24]))(handle, (QueryDesc*)ppQueryDesc, (ID3D11Query**)ppQuery.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreatePredicate(this ComPtr<ID3D11Device5> comObj, QueryDesc* pPredicateDesc, ID3D11Predicate** ppPredicate) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Predicate**, HResult>)(handle->LpVtbl[25]))(handle, pPredicateDesc, ppPredicate);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreatePredicate(this ComPtr<ID3D11Device5> comObj, ref QueryDesc pPredicateDesc, ID3D11Predicate** ppPredicate) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (QueryDesc* ppPredicateDesc = &pPredicateDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Predicate**, HResult>)(handle->LpVtbl[25]))(handle, (QueryDesc*)ppPredicateDesc, ppPredicate);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreatePredicate(this ComPtr<ID3D11Device5> comObj, QueryDesc* pPredicateDesc, ref ID3D11Predicate* ppPredicate) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Predicate** pppPredicate = &ppPredicate)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Predicate**, HResult>)(handle->LpVtbl[25]))(handle, pPredicateDesc, (ID3D11Predicate**)pppPredicate);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreatePredicate(this ComPtr<ID3D11Device5> comObj, ref QueryDesc pPredicateDesc, ref ID3D11Predicate* ppPredicate) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (QueryDesc* ppPredicateDesc = &pPredicateDesc)
			{
				fixed (ID3D11Predicate** pppPredicate = &ppPredicate)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Predicate**, HResult>)(handle->LpVtbl[25]))(handle, (QueryDesc*)ppPredicateDesc, (ID3D11Predicate**)pppPredicate);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pCounterDesc, ID3D11Counter** ppCounter) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, ID3D11Counter**, HResult>)(handle->LpVtbl[26]))(handle, pCounterDesc, ppCounter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pCounterDesc, ID3D11Counter** ppCounter) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppCounterDesc = &pCounterDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, ID3D11Counter**, HResult>)(handle->LpVtbl[26]))(handle, (CounterDesc*)ppCounterDesc, ppCounter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pCounterDesc, ref ID3D11Counter* ppCounter) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11Counter** pppCounter = &ppCounter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, ID3D11Counter**, HResult>)(handle->LpVtbl[26]))(handle, pCounterDesc, (ID3D11Counter**)pppCounter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pCounterDesc, out ComPtr<ID3D11Counter> ppCounter) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppCounter = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, ID3D11Counter**, HResult>)(handle->LpVtbl[26]))(handle, pCounterDesc, (ID3D11Counter**)ppCounter.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pCounterDesc, ref ID3D11Counter* ppCounter) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppCounterDesc = &pCounterDesc)
			{
				fixed (ID3D11Counter** pppCounter = &ppCounter)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, ID3D11Counter**, HResult>)(handle->LpVtbl[26]))(handle, (CounterDesc*)ppCounterDesc, (ID3D11Counter**)pppCounter);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pCounterDesc, out ComPtr<ID3D11Counter> ppCounter) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppCounterDesc = &pCounterDesc)
			{
				ppCounter = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, ID3D11Counter**, HResult>)(handle->LpVtbl[26]))(handle, (CounterDesc*)ppCounterDesc, (ID3D11Counter**)ppCounter.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeferredContext(this ComPtr<ID3D11Device5> comObj, uint contextFlags, ID3D11DeviceContext** ppDeferredContext) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, ID3D11DeviceContext**, HResult>)(handle->LpVtbl[27]))(handle, contextFlags, ppDeferredContext);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeferredContext(this ComPtr<ID3D11Device5> comObj, uint contextFlags, ref ID3D11DeviceContext* ppDeferredContext) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (ID3D11DeviceContext** pppDeferredContext = &ppDeferredContext)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, ID3D11DeviceContext**, HResult>)(handle->LpVtbl[27]))(handle, contextFlags, (ID3D11DeviceContext**)pppDeferredContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeferredContext(this ComPtr<ID3D11Device5> comObj, uint contextFlags, out ComPtr<ID3D11DeviceContext> ppDeferredContext) 
		{
			ID3D11Device5* handle = comObj.Handle;
			ppDeferredContext = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, ID3D11DeviceContext**, HResult>)(handle->LpVtbl[27]))(handle, contextFlags, (ID3D11DeviceContext**)ppDeferredContext.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult OpenSharedResource(this ComPtr<ID3D11Device5> comObj, nint hResource, Guid* returnedInterface, void** ppResource) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, nint, Guid*, void**, HResult>)(handle->LpVtbl[28]))(handle, hResource, returnedInterface, ppResource);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult OpenSharedResource(this ComPtr<ID3D11Device5> comObj, nint hResource, ref Guid returnedInterface, void** ppResource) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, nint, Guid*, void**, HResult>)(handle->LpVtbl[28]))(handle, hResource, (Guid*)preturnedInterface, ppResource);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult OpenSharedResource<T>(this ComPtr<ID3D11Device5> comObj, nint hResource, out ComPtr<T> ppResource) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device5* handle = comObj.Handle;
			ppResource = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, nint, Guid*, void**, HResult>)(handle->LpVtbl[28]))(handle, hResource, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppResource.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult OpenSharedResource<T>(this ComPtr<ID3D11Device5> comObj, nint hResource, ref Guid returnedInterface, out ComPtr<T> ppResource) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				ppResource = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, nint, Guid*, void**, HResult>)(handle->LpVtbl[28]))(handle, hResource, (Guid*)preturnedInterface, (void**)ppResource.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckFormatSupport(this ComPtr<ID3D11Device5> comObj, Format format, uint* pFormatSupport) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Format, uint*, HResult>)(handle->LpVtbl[29]))(handle, format, pFormatSupport);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckFormatSupport(this ComPtr<ID3D11Device5> comObj, Format format, ref uint pFormatSupport) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppFormatSupport = &pFormatSupport)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Format, uint*, HResult>)(handle->LpVtbl[29]))(handle, format, (uint*)ppFormatSupport);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckMultisampleQualityLevels(this ComPtr<ID3D11Device5> comObj, Format format, uint sampleCount, uint* pNumQualityLevels) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Format, uint, uint*, HResult>)(handle->LpVtbl[30]))(handle, format, sampleCount, pNumQualityLevels);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckMultisampleQualityLevels(this ComPtr<ID3D11Device5> comObj, Format format, uint sampleCount, ref uint pNumQualityLevels) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppNumQualityLevels = &pNumQualityLevels)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Format, uint, uint*, HResult>)(handle->LpVtbl[30]))(handle, format, sampleCount, (uint*)ppNumQualityLevels);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CheckCounterInfo(this ComPtr<ID3D11Device5> comObj, CounterInfo* pCounterInfo) 
		{
			ID3D11Device5* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterInfo*, void>)(handle->LpVtbl[31]))(handle, pCounterInfo);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CheckCounterInfo(this ComPtr<ID3D11Device5> comObj, ref CounterInfo pCounterInfo) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterInfo* ppCounterInfo = &pCounterInfo)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterInfo*, void>)(handle->LpVtbl[31]))(handle, (CounterInfo*)ppCounterInfo);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (byte* pszName = szName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppNameLength = &pNameLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (byte* pszUnits = szUnits)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szUnits != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszUnits = szUnits)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszUnits = szUnits)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszUnits = szUnits)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (byte* pszName = szName)
			{
				fixed (byte* pszUnits = szUnits)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szUnits != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (byte* pszUnits = szUnits)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (byte* pszUnits = szUnits)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCounter(this ComPtr<ID3D11Device5> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength) 
		{
			ID3D11Device5* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, pUnitsLength, szDescription, pDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}
	}
}
