// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	public static unsafe partial class Extensions
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, byte* pNamespace, ID3D11ModuleInstance** ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, pNamespace, ppModuleInstance);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, ReadOnlySpan<byte> pNamespace, ID3D11ModuleInstance** ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (byte* ppNamespace = pNamespace)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, (byte*)ppNamespace, ppModuleInstance);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, string pNamespace, ID3D11ModuleInstance** ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, pStr0, ppModuleInstance);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, byte* pNamespace, ref ID3D11ModuleInstance* ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance** pppModuleInstance = &ppModuleInstance)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, pNamespace, (ID3D11ModuleInstance**)pppModuleInstance);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, byte* pNamespace, out ComPtr<ID3D11ModuleInstance> ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			ppModuleInstance = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, pNamespace, (ID3D11ModuleInstance**)ppModuleInstance.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, ReadOnlySpan<byte> pNamespace, ref ID3D11ModuleInstance* ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (byte* ppNamespace = pNamespace)
			{
				fixed (ID3D11ModuleInstance** pppModuleInstance = &ppModuleInstance)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, (byte*)ppNamespace, (ID3D11ModuleInstance**)pppModuleInstance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, string pNamespace, ref ID3D11ModuleInstance* ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11ModuleInstance** pppModuleInstance = &ppModuleInstance)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, pStr0, (ID3D11ModuleInstance**)pppModuleInstance);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11Linker> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11Linker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11Linker> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11Linker> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Linker* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11Linker> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11Linker> comObj) 
		{
			ID3D11Linker* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11Linker> comObj) 
		{
			ID3D11Linker* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11Linker> comObj, Guid* iid, ref void* ppv) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (void** pppv = &ppv)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11Linker> comObj, ref Guid iid, ref void* ppv) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ComPtr<ID3D11ModuleInstance> pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)pEntry.Handle, pEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, ReadOnlySpan<byte> pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, string pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, ReadOnlySpan<byte> pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, string pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, byte* pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppTargetName = pTargetName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, byte* pEntryName, string pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pStr0, uFlags, ppShaderBlob, ppErrorBuffer);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, byte* pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, byte* pEntryName, string pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pStr0, uFlags, ppShaderBlob, ppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, ReadOnlySpan<byte> pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, string pEntryName, string pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pStr1, uFlags, ppShaderBlob, ppErrorBuffer);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, ReadOnlySpan<byte> pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (byte* ppTargetName = pTargetName)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, string pEntryName, string pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pStr1, uFlags, ppShaderBlob, ppErrorBuffer);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ComPtr<ID3D11ModuleInstance> pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)pEntry.Handle, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, ReadOnlySpan<byte> pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, string pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, ReadOnlySpan<byte> pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, string pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, byte* pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppTargetName = pTargetName)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, byte* pEntryName, string pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pStr0, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, byte* pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, byte* pEntryName, string pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pStr0, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, ReadOnlySpan<byte> pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, string pEntryName, string pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pStr1, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, ReadOnlySpan<byte> pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (byte* ppTargetName = pTargetName)
					{
						fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, string pEntryName, string pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pStr1, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ComPtr<ID3D11ModuleInstance> pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)pEntry.Handle, pEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, ReadOnlySpan<byte> pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, string pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, ReadOnlySpan<byte> pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, string pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, byte* pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppTargetName = pTargetName)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, byte* pEntryName, string pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pStr0, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, byte* pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, byte* pEntryName, string pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pStr0, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, ReadOnlySpan<byte> pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, string pEntryName, string pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pStr1, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, ReadOnlySpan<byte> pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (byte* ppTargetName = pTargetName)
					{
						fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, string pEntryName, string pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pStr1, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ComPtr<ID3D11ModuleInstance> pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)pEntry.Handle, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, ReadOnlySpan<byte> pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, string pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, ReadOnlySpan<byte> pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, string pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, byte* pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppTargetName = pTargetName)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, byte* pEntryName, string pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pStr0, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, byte* pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, byte* pEntryName, string pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pStr0, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, ReadOnlySpan<byte> pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pEntry, string pEntryName, string pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pStr1, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, ReadOnlySpan<byte> pEntryName, ReadOnlySpan<byte> pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (byte* ppTargetName = pTargetName)
					{
						fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
						{
							fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Link(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pEntry, string pEntryName, string pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pStr1, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int UseLibrary(this ComPtr<ID3D11Linker> comObj, ID3D11ModuleInstance* pLibraryMI) 
		{
			ID3D11Linker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, int>)(handle->LpVtbl[5]))(handle, pLibraryMI);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int UseLibrary(this ComPtr<ID3D11Linker> comObj, ref ID3D11ModuleInstance pLibraryMI) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppLibraryMI = &pLibraryMI)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, int>)(handle->LpVtbl[5]))(handle, (ID3D11ModuleInstance*)ppLibraryMI);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int UseLibrary(this ComPtr<ID3D11Linker> comObj, ComPtr<ID3D11ModuleInstance> pLibraryMI) 
		{
			ID3D11Linker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, int>)(handle->LpVtbl[5]))(handle, (ID3D11ModuleInstance*)pLibraryMI.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int AddClipPlaneFromCBuffer(this ComPtr<ID3D11Linker> comObj, uint uCBufferSlot, uint uCBufferEntry) 
		{
			ID3D11Linker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, uint, uint, int>)(handle->LpVtbl[6]))(handle, uCBufferSlot, uCBufferEntry);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11LinkingNode> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11LinkingNode> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11LinkingNode> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11LinkingNode> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11LinkingNode> comObj) 
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11LinkingNode> comObj) 
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11LinkingNode> comObj, Guid* iid, ref void* ppv) 
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			fixed (void** pppv = &ppv)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11LinkingNode> comObj, ref Guid iid, ref void* ppv) 
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11FunctionLinkingGraph> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11FunctionLinkingGraph> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11FunctionLinkingGraph> comObj) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11FunctionLinkingGraph> comObj) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11FunctionLinkingGraph> comObj, Guid* iid, ref void* ppv) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (void** pppv = &ppv)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref Guid iid, ref void* ppv) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateModuleInstance(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11ModuleInstance** ppModuleInstance, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, ppModuleInstance, ppErrorBuffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateModuleInstance(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11ModuleInstance* ppModuleInstance, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance** pppModuleInstance = &ppModuleInstance)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance**)pppModuleInstance, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateModuleInstance(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ComPtr<ID3D11ModuleInstance> ppModuleInstance, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ComPtr<ID3D11ModuleInstance>* pppModuleInstance = &ppModuleInstance)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance**)pppModuleInstance, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateModuleInstance(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11ModuleInstance** ppModuleInstance, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, ppModuleInstance, (ID3D10Blob**)pppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateModuleInstance(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11ModuleInstance* ppModuleInstance, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance** pppModuleInstance = &ppModuleInstance)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance**)pppModuleInstance, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateModuleInstance(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ComPtr<ID3D11ModuleInstance> ppModuleInstance, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ComPtr<ID3D11ModuleInstance>* pppModuleInstance = &ppModuleInstance)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance**)pppModuleInstance, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetInputSignature(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ParameterDesc* pInputParameters, uint cInputParameters, ID3D11LinkingNode** ppInputNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, int>)(handle->LpVtbl[5]))(handle, pInputParameters, cInputParameters, ppInputNode);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetInputSignature(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ParameterDesc pInputParameters, uint cInputParameters, ID3D11LinkingNode** ppInputNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ParameterDesc* ppInputParameters = &pInputParameters)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, int>)(handle->LpVtbl[5]))(handle, (ParameterDesc*)ppInputParameters, cInputParameters, ppInputNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetInputSignature(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ParameterDesc* pInputParameters, uint cInputParameters, ref ID3D11LinkingNode* ppInputNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode** pppInputNode = &ppInputNode)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, int>)(handle->LpVtbl[5]))(handle, pInputParameters, cInputParameters, (ID3D11LinkingNode**)pppInputNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetInputSignature(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ParameterDesc* pInputParameters, uint cInputParameters, out ComPtr<ID3D11LinkingNode> ppInputNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			ppInputNode = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, int>)(handle->LpVtbl[5]))(handle, pInputParameters, cInputParameters, (ID3D11LinkingNode**)ppInputNode.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetInputSignature(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ParameterDesc pInputParameters, uint cInputParameters, ref ID3D11LinkingNode* ppInputNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ParameterDesc* ppInputParameters = &pInputParameters)
			{
				fixed (ID3D11LinkingNode** pppInputNode = &ppInputNode)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, int>)(handle->LpVtbl[5]))(handle, (ParameterDesc*)ppInputParameters, cInputParameters, (ID3D11LinkingNode**)pppInputNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetInputSignature(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ParameterDesc pInputParameters, uint cInputParameters, out ComPtr<ID3D11LinkingNode> ppInputNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ParameterDesc* ppInputParameters = &pInputParameters)
			{
				ppInputNode = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, int>)(handle->LpVtbl[5]))(handle, (ParameterDesc*)ppInputParameters, cInputParameters, (ID3D11LinkingNode**)ppInputNode.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetOutputSignature(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ParameterDesc* pOutputParameters, uint cOutputParameters, ID3D11LinkingNode** ppOutputNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, int>)(handle->LpVtbl[6]))(handle, pOutputParameters, cOutputParameters, ppOutputNode);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetOutputSignature(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ParameterDesc pOutputParameters, uint cOutputParameters, ID3D11LinkingNode** ppOutputNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ParameterDesc* ppOutputParameters = &pOutputParameters)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, int>)(handle->LpVtbl[6]))(handle, (ParameterDesc*)ppOutputParameters, cOutputParameters, ppOutputNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetOutputSignature(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ParameterDesc* pOutputParameters, uint cOutputParameters, ref ID3D11LinkingNode* ppOutputNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode** pppOutputNode = &ppOutputNode)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, int>)(handle->LpVtbl[6]))(handle, pOutputParameters, cOutputParameters, (ID3D11LinkingNode**)pppOutputNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetOutputSignature(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ParameterDesc* pOutputParameters, uint cOutputParameters, out ComPtr<ID3D11LinkingNode> ppOutputNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			ppOutputNode = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, int>)(handle->LpVtbl[6]))(handle, pOutputParameters, cOutputParameters, (ID3D11LinkingNode**)ppOutputNode.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetOutputSignature(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ParameterDesc pOutputParameters, uint cOutputParameters, ref ID3D11LinkingNode* ppOutputNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ParameterDesc* ppOutputParameters = &pOutputParameters)
			{
				fixed (ID3D11LinkingNode** pppOutputNode = &ppOutputNode)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, int>)(handle->LpVtbl[6]))(handle, (ParameterDesc*)ppOutputParameters, cOutputParameters, (ID3D11LinkingNode**)pppOutputNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetOutputSignature(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ParameterDesc pOutputParameters, uint cOutputParameters, out ComPtr<ID3D11LinkingNode> ppOutputNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ParameterDesc* ppOutputParameters = &pOutputParameters)
			{
				ppOutputNode = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ParameterDesc*, uint, ID3D11LinkingNode**, int>)(handle->LpVtbl[6]))(handle, (ParameterDesc*)ppOutputParameters, cOutputParameters, (ID3D11LinkingNode**)ppOutputNode.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, ppCallNode);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ReadOnlySpan<byte> pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, (byte*)ppModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, ppCallNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, string pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pStr0, pModuleWithFunctionPrototype, pFunctionName, ppCallNode);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, ppCallNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ComPtr<ID3D11Module> pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, (ID3D11Module*)pModuleWithFunctionPrototype.Handle, pFunctionName, ppCallNode);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ReadOnlySpan<byte> pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, (byte*)ppModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, ppCallNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, string pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pStr0, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, ppCallNode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppFunctionName = pFunctionName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, pModuleWithFunctionPrototype, (byte*)ppFunctionName, ppCallNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, string pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pFunctionName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pFunctionName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pFunctionName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pStr0, ppCallNode);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ReadOnlySpan<byte> pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (byte* ppFunctionName = pFunctionName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, (byte*)ppModuleInstanceNamespace, pModuleWithFunctionPrototype, (byte*)ppFunctionName, ppCallNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, string pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, string pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pFunctionName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pFunctionName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pFunctionName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pStr0, pModuleWithFunctionPrototype, pStr1, ppCallNode);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				fixed (byte* ppFunctionName = pFunctionName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, (byte*)ppFunctionName, ppCallNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, string pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pFunctionName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pFunctionName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pFunctionName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pStr0, ppCallNode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ReadOnlySpan<byte> pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
				{
					fixed (byte* ppFunctionName = pFunctionName)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, (byte*)ppModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, (byte*)ppFunctionName, ppCallNode);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, string pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, string pFunctionName, ID3D11LinkingNode** ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pFunctionName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pFunctionName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pFunctionName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pStr0, (ID3D11Module*)ppModuleWithFunctionPrototype, pStr1, ppCallNode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, out ComPtr<ID3D11LinkingNode> ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			ppCallNode = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)ppCallNode.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ReadOnlySpan<byte> pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, (byte*)ppModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, string pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pStr0, pModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ComPtr<ID3D11Module> pModuleWithFunctionPrototype, byte* pFunctionName, out ComPtr<ID3D11LinkingNode> ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			ppCallNode = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, (ID3D11Module*)pModuleWithFunctionPrototype.Handle, pFunctionName, (ID3D11LinkingNode**)ppCallNode.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ReadOnlySpan<byte> pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
				{
					fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, (byte*)ppModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, string pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pStr0, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppFunctionName = pFunctionName)
			{
				fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, pModuleWithFunctionPrototype, (byte*)ppFunctionName, (ID3D11LinkingNode**)pppCallNode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, string pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pFunctionName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pFunctionName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pFunctionName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pStr0, (ID3D11LinkingNode**)pppCallNode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ReadOnlySpan<byte> pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (byte* ppFunctionName = pFunctionName)
				{
					fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, (byte*)ppModuleInstanceNamespace, pModuleWithFunctionPrototype, (byte*)ppFunctionName, (ID3D11LinkingNode**)pppCallNode);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, string pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, string pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pFunctionName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pFunctionName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pFunctionName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pStr0, pModuleWithFunctionPrototype, pStr1, (ID3D11LinkingNode**)pppCallNode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				fixed (byte* ppFunctionName = pFunctionName)
				{
					fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, (byte*)ppFunctionName, (ID3D11LinkingNode**)pppCallNode);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, string pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pFunctionName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pFunctionName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pFunctionName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pStr0, (ID3D11LinkingNode**)pppCallNode);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ReadOnlySpan<byte> pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, ReadOnlySpan<byte> pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppModuleInstanceNamespace = pModuleInstanceNamespace)
			{
				fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
				{
					fixed (byte* ppFunctionName = pFunctionName)
					{
						fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, (byte*)ppModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, (byte*)ppFunctionName, (ID3D11LinkingNode**)pppCallNode);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CallFunction(this ComPtr<ID3D11FunctionLinkingGraph> comObj, string pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, string pFunctionName, ref ID3D11LinkingNode* ppCallNode) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pModuleInstanceNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pModuleInstanceNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pModuleInstanceNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pFunctionName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pFunctionName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pFunctionName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, int>)(handle->LpVtbl[7]))(handle, pStr0, (ID3D11Module*)ppModuleWithFunctionPrototype, pStr1, (ID3D11LinkingNode**)pppCallNode);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValue(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ID3D11LinkingNode* pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, int>)(handle->LpVtbl[8]))(handle, pSrcNode, srcParameterIndex, pDstNode, dstParameterIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValue(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ID3D11LinkingNode* pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, int>)(handle->LpVtbl[8]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pDstNode, dstParameterIndex);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValue(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ComPtr<ID3D11LinkingNode> pSrcNode, int srcParameterIndex, ID3D11LinkingNode* pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, int>)(handle->LpVtbl[8]))(handle, (ID3D11LinkingNode*)pSrcNode.Handle, srcParameterIndex, pDstNode, dstParameterIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValue(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ref ID3D11LinkingNode pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, int>)(handle->LpVtbl[8]))(handle, pSrcNode, srcParameterIndex, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValue(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ComPtr<ID3D11LinkingNode> pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, int>)(handle->LpVtbl[8]))(handle, pSrcNode, srcParameterIndex, (ID3D11LinkingNode*)pDstNode.Handle, dstParameterIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValue(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ref ID3D11LinkingNode pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, int>)(handle->LpVtbl[8]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValue(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ComPtr<ID3D11LinkingNode> pSrcNode, int srcParameterIndex, ComPtr<ID3D11LinkingNode> pDstNode, int dstParameterIndex) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, int>)(handle->LpVtbl[8]))(handle, (ID3D11LinkingNode*)pSrcNode.Handle, srcParameterIndex, (ID3D11LinkingNode*)pDstNode.Handle, dstParameterIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, pDstSwizzle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, pDstSwizzle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ComPtr<ID3D11LinkingNode> pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)pSrcNode.Handle, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, pDstSwizzle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppSrcSwizzle = pSrcSwizzle)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, pDstNode, dstParameterIndex, pDstSwizzle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, string pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSrcSwizzle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, pStr0, pDstNode, dstParameterIndex, pDstSwizzle);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (byte* ppSrcSwizzle = pSrcSwizzle)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, pDstNode, dstParameterIndex, pDstSwizzle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, string pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pSrcSwizzle != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pStr0, pDstNode, dstParameterIndex, pDstSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ComPtr<ID3D11LinkingNode> pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)pDstNode.Handle, dstParameterIndex, pDstSwizzle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ComPtr<ID3D11LinkingNode> pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ComPtr<ID3D11LinkingNode> pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)pSrcNode.Handle, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)pDstNode.Handle, dstParameterIndex, pDstSwizzle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppSrcSwizzle = pSrcSwizzle)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, string pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSrcSwizzle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, pStr0, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (byte* ppSrcSwizzle = pSrcSwizzle)
				{
					fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, string pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pSrcSwizzle != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pStr0, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppDstSwizzle = pDstSwizzle)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDstSwizzle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDstSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDstSwizzle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (byte* ppDstSwizzle = pDstSwizzle)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pDstSwizzle != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pDstSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pDstSwizzle, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppSrcSwizzle = pSrcSwizzle)
			{
				fixed (byte* ppDstSwizzle = pDstSwizzle)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, pDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, string pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSrcSwizzle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pDstSwizzle != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pDstSwizzle);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pDstSwizzle, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, pStr0, pDstNode, dstParameterIndex, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (byte* ppSrcSwizzle = pSrcSwizzle)
				{
					fixed (byte* ppDstSwizzle = pDstSwizzle)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, pDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, string pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pSrcSwizzle != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pDstSwizzle != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pDstSwizzle);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pDstSwizzle, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pStr0, pDstNode, dstParameterIndex, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				fixed (byte* ppDstSwizzle = pDstSwizzle)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pDstSwizzle != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pDstSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pDstSwizzle, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					fixed (byte* ppDstSwizzle = pDstSwizzle)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (pDstSwizzle != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(pDstSwizzle);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(pDstSwizzle, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (byte* ppSrcSwizzle = pSrcSwizzle)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					fixed (byte* ppDstSwizzle = pDstSwizzle)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D11LinkingNode* pSrcNode, int srcParameterIndex, string pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSrcSwizzle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pDstSwizzle != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pDstSwizzle);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pDstSwizzle, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, pSrcNode, srcParameterIndex, pStr0, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ReadOnlySpan<byte> pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, ReadOnlySpan<byte> pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (byte* ppSrcSwizzle = pSrcSwizzle)
				{
					fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
					{
						fixed (byte* ppDstSwizzle = pDstSwizzle)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, (byte*)ppSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, (byte*)ppDstSwizzle);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PassValueWithSwizzle(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, string pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, string pDstSwizzle) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pSrcSwizzle != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pSrcSwizzle);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pSrcSwizzle, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pDstSwizzle != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pDstSwizzle);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pDstSwizzle, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, int>)(handle->LpVtbl[9]))(handle, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pStr0, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pStr1);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetLastError(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D10Blob**, int>)(handle->LpVtbl[10]))(handle, ppErrorBuffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetLastError(this ComPtr<ID3D11FunctionLinkingGraph> comObj, ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D10Blob**, int>)(handle->LpVtbl[10]))(handle, (ID3D10Blob**)pppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GenerateHlsl(this ComPtr<ID3D11FunctionLinkingGraph> comObj, uint uFlags, ID3D10Blob** ppBuffer) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, uint, ID3D10Blob**, int>)(handle->LpVtbl[11]))(handle, uFlags, ppBuffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GenerateHlsl(this ComPtr<ID3D11FunctionLinkingGraph> comObj, uint uFlags, ref ID3D10Blob* ppBuffer) 
		{
			ID3D11FunctionLinkingGraph* handle = comObj.Handle;
			fixed (ID3D10Blob** pppBuffer = &ppBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, uint, ID3D10Blob**, int>)(handle->LpVtbl[11]))(handle, uFlags, (ID3D10Blob**)pppBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11ShaderTrace> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11ShaderTrace> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11ShaderTrace> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11ShaderTrace> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11ShaderTrace> comObj) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11ShaderTrace> comObj) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int TraceReady(this ComPtr<ID3D11ShaderTrace> comObj, ulong* pTestCount) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, ulong*, int>)(handle->LpVtbl[3]))(handle, pTestCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int TraceReady(this ComPtr<ID3D11ShaderTrace> comObj, ref ulong pTestCount) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (ulong* ppTestCount = &pTestCount)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, ulong*, int>)(handle->LpVtbl[3]))(handle, (ulong*)ppTestCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ResetTrace(this ComPtr<ID3D11ShaderTrace> comObj) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, void>)(handle->LpVtbl[4]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetTraceStats(this ComPtr<ID3D11ShaderTrace> comObj, TraceStats* pTraceStats) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, TraceStats*, int>)(handle->LpVtbl[5]))(handle, pTraceStats);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetTraceStats(this ComPtr<ID3D11ShaderTrace> comObj, ref TraceStats pTraceStats) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (TraceStats* ppTraceStats = &pTraceStats)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, TraceStats*, int>)(handle->LpVtbl[5]))(handle, (TraceStats*)ppTraceStats);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PSSelectStamp(this ComPtr<ID3D11ShaderTrace> comObj, uint stampIndex) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, int>)(handle->LpVtbl[6]))(handle, stampIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetInitialRegisterContents(this ComPtr<ID3D11ShaderTrace> comObj, TraceRegister* pRegister, TraceValue* pValue) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, TraceRegister*, TraceValue*, int>)(handle->LpVtbl[7]))(handle, pRegister, pValue);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetInitialRegisterContents(this ComPtr<ID3D11ShaderTrace> comObj, ref TraceRegister pRegister, TraceValue* pValue) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (TraceRegister* ppRegister = &pRegister)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, TraceRegister*, TraceValue*, int>)(handle->LpVtbl[7]))(handle, (TraceRegister*)ppRegister, pValue);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetInitialRegisterContents(this ComPtr<ID3D11ShaderTrace> comObj, TraceRegister* pRegister, ref TraceValue pValue) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (TraceValue* ppValue = &pValue)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, TraceRegister*, TraceValue*, int>)(handle->LpVtbl[7]))(handle, pRegister, (TraceValue*)ppValue);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetInitialRegisterContents(this ComPtr<ID3D11ShaderTrace> comObj, ref TraceRegister pRegister, ref TraceValue pValue) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (TraceRegister* ppRegister = &pRegister)
			{
				fixed (TraceValue* ppValue = &pValue)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, TraceRegister*, TraceValue*, int>)(handle->LpVtbl[7]))(handle, (TraceRegister*)ppRegister, (TraceValue*)ppValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetStep(this ComPtr<ID3D11ShaderTrace> comObj, uint stepIndex, TraceStep* pTraceStep) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, TraceStep*, int>)(handle->LpVtbl[8]))(handle, stepIndex, pTraceStep);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetStep(this ComPtr<ID3D11ShaderTrace> comObj, uint stepIndex, ref TraceStep pTraceStep) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (TraceStep* ppTraceStep = &pTraceStep)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, TraceStep*, int>)(handle->LpVtbl[8]))(handle, stepIndex, (TraceStep*)ppTraceStep);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetWrittenRegister(this ComPtr<ID3D11ShaderTrace> comObj, uint stepIndex, uint writtenRegisterIndex, TraceRegister* pRegister, TraceValue* pValue) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, TraceRegister*, TraceValue*, int>)(handle->LpVtbl[9]))(handle, stepIndex, writtenRegisterIndex, pRegister, pValue);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetWrittenRegister(this ComPtr<ID3D11ShaderTrace> comObj, uint stepIndex, uint writtenRegisterIndex, ref TraceRegister pRegister, TraceValue* pValue) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (TraceRegister* ppRegister = &pRegister)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, TraceRegister*, TraceValue*, int>)(handle->LpVtbl[9]))(handle, stepIndex, writtenRegisterIndex, (TraceRegister*)ppRegister, pValue);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetWrittenRegister(this ComPtr<ID3D11ShaderTrace> comObj, uint stepIndex, uint writtenRegisterIndex, TraceRegister* pRegister, ref TraceValue pValue) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (TraceValue* ppValue = &pValue)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, TraceRegister*, TraceValue*, int>)(handle->LpVtbl[9]))(handle, stepIndex, writtenRegisterIndex, pRegister, (TraceValue*)ppValue);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetWrittenRegister(this ComPtr<ID3D11ShaderTrace> comObj, uint stepIndex, uint writtenRegisterIndex, ref TraceRegister pRegister, ref TraceValue pValue) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (TraceRegister* ppRegister = &pRegister)
			{
				fixed (TraceValue* ppValue = &pValue)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, TraceRegister*, TraceValue*, int>)(handle->LpVtbl[9]))(handle, stepIndex, writtenRegisterIndex, (TraceRegister*)ppRegister, (TraceValue*)ppValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetReadRegister(this ComPtr<ID3D11ShaderTrace> comObj, uint stepIndex, uint readRegisterIndex, TraceRegister* pRegister, TraceValue* pValue) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, TraceRegister*, TraceValue*, int>)(handle->LpVtbl[10]))(handle, stepIndex, readRegisterIndex, pRegister, pValue);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetReadRegister(this ComPtr<ID3D11ShaderTrace> comObj, uint stepIndex, uint readRegisterIndex, ref TraceRegister pRegister, TraceValue* pValue) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (TraceRegister* ppRegister = &pRegister)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, TraceRegister*, TraceValue*, int>)(handle->LpVtbl[10]))(handle, stepIndex, readRegisterIndex, (TraceRegister*)ppRegister, pValue);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetReadRegister(this ComPtr<ID3D11ShaderTrace> comObj, uint stepIndex, uint readRegisterIndex, TraceRegister* pRegister, ref TraceValue pValue) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (TraceValue* ppValue = &pValue)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, TraceRegister*, TraceValue*, int>)(handle->LpVtbl[10]))(handle, stepIndex, readRegisterIndex, pRegister, (TraceValue*)ppValue);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetReadRegister(this ComPtr<ID3D11ShaderTrace> comObj, uint stepIndex, uint readRegisterIndex, ref TraceRegister pRegister, ref TraceValue pValue) 
		{
			ID3D11ShaderTrace* handle = comObj.Handle;
			fixed (TraceRegister* ppRegister = &pRegister)
			{
				fixed (TraceValue* ppValue = &pValue)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, TraceRegister*, TraceValue*, int>)(handle->LpVtbl[10]))(handle, stepIndex, readRegisterIndex, (TraceRegister*)ppRegister, (TraceValue*)ppValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11ShaderTraceFactory> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11ShaderTraceFactory> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11ShaderTraceFactory> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11ShaderTraceFactory> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11ShaderTraceFactory> comObj) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11ShaderTraceFactory> comObj) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, IUnknown* pShader, ShaderTraceDesc* pTraceDesc, ID3D11ShaderTrace** ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, pShader, pTraceDesc, ppShaderTrace);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, ref IUnknown pShader, ShaderTraceDesc* pTraceDesc, ID3D11ShaderTrace** ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			fixed (IUnknown* ppShader = &pShader)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, (IUnknown*)ppShader, pTraceDesc, ppShaderTrace);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, ComPtr<IUnknown> pShader, ShaderTraceDesc* pTraceDesc, ID3D11ShaderTrace** ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, (IUnknown*)pShader.Handle, pTraceDesc, ppShaderTrace);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, IUnknown* pShader, ref ShaderTraceDesc pTraceDesc, ID3D11ShaderTrace** ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			fixed (ShaderTraceDesc* ppTraceDesc = &pTraceDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, pShader, (ShaderTraceDesc*)ppTraceDesc, ppShaderTrace);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, ref IUnknown pShader, ref ShaderTraceDesc pTraceDesc, ID3D11ShaderTrace** ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			fixed (IUnknown* ppShader = &pShader)
			{
				fixed (ShaderTraceDesc* ppTraceDesc = &pTraceDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, (IUnknown*)ppShader, (ShaderTraceDesc*)ppTraceDesc, ppShaderTrace);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, ComPtr<IUnknown> pShader, ref ShaderTraceDesc pTraceDesc, ID3D11ShaderTrace** ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			fixed (ShaderTraceDesc* ppTraceDesc = &pTraceDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, (IUnknown*)pShader.Handle, (ShaderTraceDesc*)ppTraceDesc, ppShaderTrace);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, IUnknown* pShader, ShaderTraceDesc* pTraceDesc, ref ID3D11ShaderTrace* ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			fixed (ID3D11ShaderTrace** pppShaderTrace = &ppShaderTrace)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, pShader, pTraceDesc, (ID3D11ShaderTrace**)pppShaderTrace);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, IUnknown* pShader, ShaderTraceDesc* pTraceDesc, out ComPtr<ID3D11ShaderTrace> ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			ppShaderTrace = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, pShader, pTraceDesc, (ID3D11ShaderTrace**)ppShaderTrace.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, ref IUnknown pShader, ShaderTraceDesc* pTraceDesc, ref ID3D11ShaderTrace* ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			fixed (IUnknown* ppShader = &pShader)
			{
				fixed (ID3D11ShaderTrace** pppShaderTrace = &ppShaderTrace)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, (IUnknown*)ppShader, pTraceDesc, (ID3D11ShaderTrace**)pppShaderTrace);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, ComPtr<IUnknown> pShader, ShaderTraceDesc* pTraceDesc, out ComPtr<ID3D11ShaderTrace> ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			ppShaderTrace = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, (IUnknown*)pShader.Handle, pTraceDesc, (ID3D11ShaderTrace**)ppShaderTrace.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, IUnknown* pShader, ref ShaderTraceDesc pTraceDesc, ref ID3D11ShaderTrace* ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			fixed (ShaderTraceDesc* ppTraceDesc = &pTraceDesc)
			{
				fixed (ID3D11ShaderTrace** pppShaderTrace = &ppShaderTrace)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, pShader, (ShaderTraceDesc*)ppTraceDesc, (ID3D11ShaderTrace**)pppShaderTrace);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, IUnknown* pShader, ref ShaderTraceDesc pTraceDesc, out ComPtr<ID3D11ShaderTrace> ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			fixed (ShaderTraceDesc* ppTraceDesc = &pTraceDesc)
			{
				ppShaderTrace = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, pShader, (ShaderTraceDesc*)ppTraceDesc, (ID3D11ShaderTrace**)ppShaderTrace.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, ref IUnknown pShader, ref ShaderTraceDesc pTraceDesc, ref ID3D11ShaderTrace* ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			fixed (IUnknown* ppShader = &pShader)
			{
				fixed (ShaderTraceDesc* ppTraceDesc = &pTraceDesc)
				{
					fixed (ID3D11ShaderTrace** pppShaderTrace = &ppShaderTrace)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, (IUnknown*)ppShader, (ShaderTraceDesc*)ppTraceDesc, (ID3D11ShaderTrace**)pppShaderTrace);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CreateShaderTrace(this ComPtr<ID3D11ShaderTraceFactory> comObj, ComPtr<IUnknown> pShader, ref ShaderTraceDesc pTraceDesc, out ComPtr<ID3D11ShaderTrace> ppShaderTrace) 
		{
			ID3D11ShaderTraceFactory* handle = comObj.Handle;
			fixed (ShaderTraceDesc* ppTraceDesc = &pTraceDesc)
			{
				ppShaderTrace = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, ShaderTraceDesc*, ID3D11ShaderTrace**, int>)(handle->LpVtbl[3]))(handle, (IUnknown*)pShader.Handle, (ShaderTraceDesc*)ppTraceDesc, (ID3D11ShaderTrace**)ppShaderTrace.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11BlendState1> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11BlendState1> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11BlendState1> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11BlendState1* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11BlendState1> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11BlendState1> comObj) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11BlendState1> comObj) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void GetDevice(this ComPtr<ID3D11BlendState1> comObj, ID3D11Device** ppDevice) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, ID3D11Device**, void>)(handle->LpVtbl[3]))(handle, ppDevice);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void GetDevice(this ComPtr<ID3D11BlendState1> comObj, ref ID3D11Device* ppDevice) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, ID3D11Device**, void>)(handle->LpVtbl[3]))(handle, (ID3D11Device**)pppDevice);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void GetDevice(this ComPtr<ID3D11BlendState1> comObj, out ComPtr<ID3D11Device> ppDevice) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			ppDevice = default;
			((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, ID3D11Device**, void>)(handle->LpVtbl[3]))(handle, (ID3D11Device**)ppDevice.GetAddressOf());
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetPrivateData(this ComPtr<ID3D11BlendState1> comObj, Guid* guid, uint* pDataSize, void* pData) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, uint*, void*, int>)(handle->LpVtbl[4]))(handle, guid, pDataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetPrivateData(this ComPtr<ID3D11BlendState1> comObj, ref Guid guid, uint* pDataSize, void* pData) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, uint*, void*, int>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetPrivateData(this ComPtr<ID3D11BlendState1> comObj, Guid* guid, ref uint pDataSize, void* pData) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, uint*, void*, int>)(handle->LpVtbl[4]))(handle, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetPrivateData(this ComPtr<ID3D11BlendState1> comObj, ref Guid guid, ref uint pDataSize, void* pData) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, uint*, void*, int>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetPrivateData<T>(this ComPtr<ID3D11BlendState1> comObj, Guid* guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11BlendState1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, uint*, void*, int>)(handle->LpVtbl[4]))(handle, guid, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetPrivateData<T>(this ComPtr<ID3D11BlendState1> comObj, ref Guid guid, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, uint*, void*, int>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetPrivateData<T>(this ComPtr<ID3D11BlendState1> comObj, Guid* guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, uint*, void*, int>)(handle->LpVtbl[4]))(handle, guid, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetPrivateData<T>(this ComPtr<ID3D11BlendState1> comObj, ref Guid guid, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, uint*, void*, int>)(handle->LpVtbl[4]))(handle, (Guid*)pguid, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetPrivateData(this ComPtr<ID3D11BlendState1> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, uint, void*, int>)(handle->LpVtbl[5]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetPrivateData(this ComPtr<ID3D11BlendState1> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, uint, void*, int>)(handle->LpVtbl[5]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetPrivateDataInterface(this ComPtr<ID3D11BlendState1> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, IUnknown*, int>)(handle->LpVtbl[6]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetPrivateDataInterface(this ComPtr<ID3D11BlendState1> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, IUnknown*, int>)(handle->LpVtbl[6]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetPrivateDataInterface(this ComPtr<ID3D11BlendState1> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, IUnknown*, int>)(handle->LpVtbl[6]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetPrivateDataInterface(this ComPtr<ID3D11BlendState1> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, IUnknown*, int>)(handle->LpVtbl[6]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetPrivateDataInterface(this ComPtr<ID3D11BlendState1> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, IUnknown*, int>)(handle->LpVtbl[6]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int SetPrivateDataInterface(this ComPtr<ID3D11BlendState1> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, Guid*, IUnknown*, int>)(handle->LpVtbl[6]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void GetDesc(this ComPtr<ID3D11BlendState1> comObj, BlendDesc* pDesc) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, BlendDesc*, void>)(handle->LpVtbl[7]))(handle, pDesc);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void GetDesc(this ComPtr<ID3D11BlendState1> comObj, ref BlendDesc pDesc) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (BlendDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, BlendDesc*, void>)(handle->LpVtbl[7]))(handle, (BlendDesc*)ppDesc);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void GetDesc1(this ComPtr<ID3D11BlendState1> comObj, BlendDesc1* pDesc) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, BlendDesc1*, void>)(handle->LpVtbl[8]))(handle, pDesc);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void GetDesc1(this ComPtr<ID3D11BlendState1> comObj, ref BlendDesc1 pDesc) 
		{
			ID3D11BlendState1* handle = comObj.Handle;
			fixed (BlendDesc1* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, BlendDesc1*, void>)(handle->LpVtbl[8]))(handle, (BlendDesc1*)ppDesc);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11RasterizerState1> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11RasterizerState1* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11RasterizerState1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface(this ComPtr<ID3D11RasterizerState1> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11RasterizerState1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11RasterizerState1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11RasterizerState1> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11RasterizerState1* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11RasterizerState1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int QueryInterface<T>(this ComPtr<ID3D11RasterizerState1> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11RasterizerState1* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11RasterizerState1*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11RasterizerState1> comObj) 
		{
			ID3D11RasterizerState1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11RasterizerState1*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11RasterizerState1> comObj) 
		{
			ID3D11RasterizerState1* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11RasterizerState1*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void GetDevice(this ComPtr<ID3D11RasterizerState1> comObj, ID3D11Device** ppDevice) 
		{
			ID3D11RasterizerState1* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11RasterizerState1*, ID3D11Device**, void>)(handle->LpVtbl[3]))(handle, ppDevice);
		}
	}
}
