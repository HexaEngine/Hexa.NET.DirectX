// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	public static unsafe partial class Extensions
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateCryptoSession(this ComPtr<ID3D11VideoDevice> comObj, Guid* pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, ref ID3D11CryptoSession* ppCryptoSession) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(handle->LpVtbl[6]))(handle, pCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateCryptoSession(this ComPtr<ID3D11VideoDevice> comObj, Guid* pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, out ComPtr<ID3D11CryptoSession> ppCryptoSession) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					ppCryptoSession = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(handle->LpVtbl[6]))(handle, pCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)ppCryptoSession.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateCryptoSession(this ComPtr<ID3D11VideoDevice> comObj, ref Guid pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, ref ID3D11CryptoSession* ppCryptoSession) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateCryptoSession(this ComPtr<ID3D11VideoDevice> comObj, ref Guid pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, out ComPtr<ID3D11CryptoSession> ppCryptoSession) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						ppCryptoSession = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(handle->LpVtbl[6]))(handle, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)ppCryptoSession.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, VideoDecoderOutputViewDesc* pDesc, ID3D11VideoDecoderOutputView** ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, pResource, pDesc, ppVDOVView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, VideoDecoderOutputViewDesc* pDesc, ID3D11VideoDecoderOutputView** ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)ppResource, pDesc, ppVDOVView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, VideoDecoderOutputViewDesc* pDesc, ID3D11VideoDecoderOutputView** ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)pResource.Handle, pDesc, ppVDOVView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ref VideoDecoderOutputViewDesc pDesc, ID3D11VideoDecoderOutputView** ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoDecoderOutputViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, pResource, (VideoDecoderOutputViewDesc*)ppDesc, ppVDOVView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ref VideoDecoderOutputViewDesc pDesc, ID3D11VideoDecoderOutputView** ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (VideoDecoderOutputViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)ppResource, (VideoDecoderOutputViewDesc*)ppDesc, ppVDOVView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ref VideoDecoderOutputViewDesc pDesc, ID3D11VideoDecoderOutputView** ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoDecoderOutputViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)pResource.Handle, (VideoDecoderOutputViewDesc*)ppDesc, ppVDOVView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, VideoDecoderOutputViewDesc* pDesc, ref ID3D11VideoDecoderOutputView* ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11VideoDecoderOutputView** pppVDOVView = &ppVDOVView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, pResource, pDesc, (ID3D11VideoDecoderOutputView**)pppVDOVView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, VideoDecoderOutputViewDesc* pDesc, out ComPtr<ID3D11VideoDecoderOutputView> ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			ppVDOVView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, pResource, pDesc, (ID3D11VideoDecoderOutputView**)ppVDOVView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, VideoDecoderOutputViewDesc* pDesc, ref ID3D11VideoDecoderOutputView* ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoDecoderOutputView** pppVDOVView = &ppVDOVView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)ppResource, pDesc, (ID3D11VideoDecoderOutputView**)pppVDOVView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, VideoDecoderOutputViewDesc* pDesc, out ComPtr<ID3D11VideoDecoderOutputView> ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			ppVDOVView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)pResource.Handle, pDesc, (ID3D11VideoDecoderOutputView**)ppVDOVView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ref VideoDecoderOutputViewDesc pDesc, ref ID3D11VideoDecoderOutputView* ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoDecoderOutputViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11VideoDecoderOutputView** pppVDOVView = &ppVDOVView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, pResource, (VideoDecoderOutputViewDesc*)ppDesc, (ID3D11VideoDecoderOutputView**)pppVDOVView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ref VideoDecoderOutputViewDesc pDesc, out ComPtr<ID3D11VideoDecoderOutputView> ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoDecoderOutputViewDesc* ppDesc = &pDesc)
			{
				ppVDOVView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, pResource, (VideoDecoderOutputViewDesc*)ppDesc, (ID3D11VideoDecoderOutputView**)ppVDOVView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ref VideoDecoderOutputViewDesc pDesc, ref ID3D11VideoDecoderOutputView* ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (VideoDecoderOutputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoDecoderOutputView** pppVDOVView = &ppVDOVView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)ppResource, (VideoDecoderOutputViewDesc*)ppDesc, (ID3D11VideoDecoderOutputView**)pppVDOVView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoDecoderOutputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ref VideoDecoderOutputViewDesc pDesc, out ComPtr<ID3D11VideoDecoderOutputView> ppVDOVView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoDecoderOutputViewDesc* ppDesc = &pDesc)
			{
				ppVDOVView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(handle->LpVtbl[7]))(handle, (ID3D11Resource*)pResource.Handle, (VideoDecoderOutputViewDesc*)ppDesc, (ID3D11VideoDecoderOutputView**)ppVDOVView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorInputViewDesc* pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, pEnum, pDesc, ppVPIView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorInputViewDesc* pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)ppResource, pEnum, pDesc, ppVPIView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorInputViewDesc* pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)pResource.Handle, pEnum, pDesc, ppVPIView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, VideoProcessorInputViewDesc* pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, ppVPIView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, VideoProcessorInputViewDesc* pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, ppVPIView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, VideoProcessorInputViewDesc* pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, ppVPIView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, VideoProcessorInputViewDesc* pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, ppVPIView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorInputViewDesc pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, pEnum, (VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorInputViewDesc pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)ppResource, pEnum, (VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorInputViewDesc pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)pResource.Handle, pEnum, (VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref VideoProcessorInputViewDesc pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, ref VideoProcessorInputViewDesc pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref VideoProcessorInputViewDesc pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, ref VideoProcessorInputViewDesc pDesc, ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorInputViewDesc* pDesc, ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, pEnum, pDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorInputViewDesc* pDesc, out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			ppVPIView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, pEnum, pDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorInputViewDesc* pDesc, ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)ppResource, pEnum, pDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorInputViewDesc* pDesc, out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			ppVPIView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)pResource.Handle, pEnum, pDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, VideoProcessorInputViewDesc* pDesc, ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, VideoProcessorInputViewDesc* pDesc, out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			ppVPIView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, VideoProcessorInputViewDesc* pDesc, ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, VideoProcessorInputViewDesc* pDesc, out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			ppVPIView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorInputViewDesc pDesc, ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, pEnum, (VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorInputViewDesc pDesc, out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				ppVPIView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, pEnum, (VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorInputViewDesc pDesc, ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)ppResource, pEnum, (VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorInputViewDesc pDesc, out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				ppVPIView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)pResource.Handle, pEnum, (VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref VideoProcessorInputViewDesc pDesc, ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, ref VideoProcessorInputViewDesc pDesc, out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				ppVPIView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref VideoProcessorInputViewDesc pDesc, ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
					{
						fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorInputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, ref VideoProcessorInputViewDesc pDesc, out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				ppVPIView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(handle->LpVtbl[8]))(handle, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorOutputViewDesc* pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, pEnum, pDesc, ppVPOView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorOutputViewDesc* pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)ppResource, pEnum, pDesc, ppVPOView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorOutputViewDesc* pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)pResource.Handle, pEnum, pDesc, ppVPOView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, VideoProcessorOutputViewDesc* pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, ppVPOView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, VideoProcessorOutputViewDesc* pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, ppVPOView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, VideoProcessorOutputViewDesc* pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, ppVPOView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, VideoProcessorOutputViewDesc* pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, ppVPOView);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorOutputViewDesc pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, pEnum, (VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorOutputViewDesc pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)ppResource, pEnum, (VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorOutputViewDesc pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)pResource.Handle, pEnum, (VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref VideoProcessorOutputViewDesc pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, ref VideoProcessorOutputViewDesc pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref VideoProcessorOutputViewDesc pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, ref VideoProcessorOutputViewDesc pDesc, ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorOutputViewDesc* pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, pEnum, pDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorOutputViewDesc* pDesc, out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			ppVPOView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, pEnum, pDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorOutputViewDesc* pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)ppResource, pEnum, pDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ID3D11VideoProcessorEnumerator* pEnum, VideoProcessorOutputViewDesc* pDesc, out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			ppVPOView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)pResource.Handle, pEnum, pDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, VideoProcessorOutputViewDesc* pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, VideoProcessorOutputViewDesc* pDesc, out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			ppVPOView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, VideoProcessorOutputViewDesc* pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, VideoProcessorOutputViewDesc* pDesc, out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			ppVPOView = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorOutputViewDesc pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, pEnum, (VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorOutputViewDesc pDesc, out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				ppVPOView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, pEnum, (VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorOutputViewDesc pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)ppResource, pEnum, (VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ID3D11VideoProcessorEnumerator* pEnum, ref VideoProcessorOutputViewDesc pDesc, out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				ppVPOView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)pResource.Handle, pEnum, (VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref VideoProcessorOutputViewDesc pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ID3D11Resource* pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, ref VideoProcessorOutputViewDesc pDesc, out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				ppVPOView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref VideoProcessorOutputViewDesc pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
					{
						fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorOutputView(this ComPtr<ID3D11VideoDevice> comObj, ComPtr<ID3D11Resource> pResource, ComPtr<ID3D11VideoProcessorEnumerator> pEnum, ref VideoProcessorOutputViewDesc pDesc, out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				ppVPOView = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorEnumerator(this ComPtr<ID3D11VideoDevice> comObj, VideoProcessorContentDesc* pDesc, ID3D11VideoProcessorEnumerator** ppEnum) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, HResult>)(handle->LpVtbl[10]))(handle, pDesc, ppEnum);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorEnumerator(this ComPtr<ID3D11VideoDevice> comObj, ref VideoProcessorContentDesc pDesc, ID3D11VideoProcessorEnumerator** ppEnum) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorContentDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, HResult>)(handle->LpVtbl[10]))(handle, (VideoProcessorContentDesc*)ppDesc, ppEnum);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorEnumerator(this ComPtr<ID3D11VideoDevice> comObj, VideoProcessorContentDesc* pDesc, ref ID3D11VideoProcessorEnumerator* ppEnum) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (ID3D11VideoProcessorEnumerator** pppEnum = &ppEnum)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, HResult>)(handle->LpVtbl[10]))(handle, pDesc, (ID3D11VideoProcessorEnumerator**)pppEnum);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorEnumerator(this ComPtr<ID3D11VideoDevice> comObj, VideoProcessorContentDesc* pDesc, out ComPtr<ID3D11VideoProcessorEnumerator> ppEnum) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			ppEnum = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, HResult>)(handle->LpVtbl[10]))(handle, pDesc, (ID3D11VideoProcessorEnumerator**)ppEnum.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorEnumerator(this ComPtr<ID3D11VideoDevice> comObj, ref VideoProcessorContentDesc pDesc, ref ID3D11VideoProcessorEnumerator* ppEnum) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorContentDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11VideoProcessorEnumerator** pppEnum = &ppEnum)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, HResult>)(handle->LpVtbl[10]))(handle, (VideoProcessorContentDesc*)ppDesc, (ID3D11VideoProcessorEnumerator**)pppEnum);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateVideoProcessorEnumerator(this ComPtr<ID3D11VideoDevice> comObj, ref VideoProcessorContentDesc pDesc, out ComPtr<ID3D11VideoProcessorEnumerator> ppEnum) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoProcessorContentDesc* ppDesc = &pDesc)
			{
				ppEnum = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, HResult>)(handle->LpVtbl[10]))(handle, (VideoProcessorContentDesc*)ppDesc, (ID3D11VideoProcessorEnumerator**)ppEnum.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetVideoDecoderProfileCount(this ComPtr<ID3D11VideoDevice> comObj) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, uint>)(handle->LpVtbl[11]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVideoDecoderProfile(this ComPtr<ID3D11VideoDevice> comObj, uint index, Guid* pDecoderProfile) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, uint, Guid*, HResult>)(handle->LpVtbl[12]))(handle, index, pDecoderProfile);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVideoDecoderProfile(this ComPtr<ID3D11VideoDevice> comObj, uint index, ref Guid pDecoderProfile) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, uint, Guid*, HResult>)(handle->LpVtbl[12]))(handle, index, (Guid*)ppDecoderProfile);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckVideoDecoderFormat(this ComPtr<ID3D11VideoDevice> comObj, Guid* pDecoderProfile, Format format, Bool32* pSupported) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Format, Bool32*, HResult>)(handle->LpVtbl[13]))(handle, pDecoderProfile, format, pSupported);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckVideoDecoderFormat(this ComPtr<ID3D11VideoDevice> comObj, ref Guid pDecoderProfile, Format format, Bool32* pSupported) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Format, Bool32*, HResult>)(handle->LpVtbl[13]))(handle, (Guid*)ppDecoderProfile, format, pSupported);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckVideoDecoderFormat(this ComPtr<ID3D11VideoDevice> comObj, Guid* pDecoderProfile, Format format, ref Bool32 pSupported) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Bool32* ppSupported = &pSupported)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Format, Bool32*, HResult>)(handle->LpVtbl[13]))(handle, pDecoderProfile, format, (Bool32*)ppSupported);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckVideoDecoderFormat(this ComPtr<ID3D11VideoDevice> comObj, ref Guid pDecoderProfile, Format format, ref Bool32 pSupported) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Bool32* ppSupported = &pSupported)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Format, Bool32*, HResult>)(handle->LpVtbl[13]))(handle, (Guid*)ppDecoderProfile, format, (Bool32*)ppSupported);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVideoDecoderConfigCount(this ComPtr<ID3D11VideoDevice> comObj, VideoDecoderDesc* pDesc, uint* pCount) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoDecoderDesc*, uint*, HResult>)(handle->LpVtbl[14]))(handle, pDesc, pCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVideoDecoderConfigCount(this ComPtr<ID3D11VideoDevice> comObj, ref VideoDecoderDesc pDesc, uint* pCount) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoDecoderDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoDecoderDesc*, uint*, HResult>)(handle->LpVtbl[14]))(handle, (VideoDecoderDesc*)ppDesc, pCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVideoDecoderConfigCount(this ComPtr<ID3D11VideoDevice> comObj, VideoDecoderDesc* pDesc, ref uint pCount) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (uint* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoDecoderDesc*, uint*, HResult>)(handle->LpVtbl[14]))(handle, pDesc, (uint*)ppCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVideoDecoderConfigCount(this ComPtr<ID3D11VideoDevice> comObj, ref VideoDecoderDesc pDesc, ref uint pCount) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoDecoderDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppCount = &pCount)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoDecoderDesc*, uint*, HResult>)(handle->LpVtbl[14]))(handle, (VideoDecoderDesc*)ppDesc, (uint*)ppCount);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVideoDecoderConfig(this ComPtr<ID3D11VideoDevice> comObj, VideoDecoderDesc* pDesc, uint index, VideoDecoderConfig* pConfig) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoDecoderDesc*, uint, VideoDecoderConfig*, HResult>)(handle->LpVtbl[15]))(handle, pDesc, index, pConfig);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVideoDecoderConfig(this ComPtr<ID3D11VideoDevice> comObj, ref VideoDecoderDesc pDesc, uint index, VideoDecoderConfig* pConfig) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoDecoderDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoDecoderDesc*, uint, VideoDecoderConfig*, HResult>)(handle->LpVtbl[15]))(handle, (VideoDecoderDesc*)ppDesc, index, pConfig);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVideoDecoderConfig(this ComPtr<ID3D11VideoDevice> comObj, VideoDecoderDesc* pDesc, uint index, ref VideoDecoderConfig pConfig) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoDecoderConfig* ppConfig = &pConfig)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoDecoderDesc*, uint, VideoDecoderConfig*, HResult>)(handle->LpVtbl[15]))(handle, pDesc, index, (VideoDecoderConfig*)ppConfig);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetVideoDecoderConfig(this ComPtr<ID3D11VideoDevice> comObj, ref VideoDecoderDesc pDesc, uint index, ref VideoDecoderConfig pConfig) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoDecoderDesc* ppDesc = &pDesc)
			{
				fixed (VideoDecoderConfig* ppConfig = &pConfig)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, VideoDecoderDesc*, uint, VideoDecoderConfig*, HResult>)(handle->LpVtbl[15]))(handle, (VideoDecoderDesc*)ppDesc, index, (VideoDecoderConfig*)ppConfig);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContentProtectionCaps(this ComPtr<ID3D11VideoDevice> comObj, Guid* pCryptoType, Guid* pDecoderProfile, VideoContentProtectionCaps* pCaps) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, VideoContentProtectionCaps*, HResult>)(handle->LpVtbl[16]))(handle, pCryptoType, pDecoderProfile, pCaps);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContentProtectionCaps(this ComPtr<ID3D11VideoDevice> comObj, ref Guid pCryptoType, Guid* pDecoderProfile, VideoContentProtectionCaps* pCaps) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, VideoContentProtectionCaps*, HResult>)(handle->LpVtbl[16]))(handle, (Guid*)ppCryptoType, pDecoderProfile, pCaps);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContentProtectionCaps(this ComPtr<ID3D11VideoDevice> comObj, Guid* pCryptoType, ref Guid pDecoderProfile, VideoContentProtectionCaps* pCaps) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, VideoContentProtectionCaps*, HResult>)(handle->LpVtbl[16]))(handle, pCryptoType, (Guid*)ppDecoderProfile, pCaps);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContentProtectionCaps(this ComPtr<ID3D11VideoDevice> comObj, ref Guid pCryptoType, ref Guid pDecoderProfile, VideoContentProtectionCaps* pCaps) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, VideoContentProtectionCaps*, HResult>)(handle->LpVtbl[16]))(handle, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, pCaps);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContentProtectionCaps(this ComPtr<ID3D11VideoDevice> comObj, Guid* pCryptoType, Guid* pDecoderProfile, ref VideoContentProtectionCaps pCaps) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (VideoContentProtectionCaps* ppCaps = &pCaps)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, VideoContentProtectionCaps*, HResult>)(handle->LpVtbl[16]))(handle, pCryptoType, pDecoderProfile, (VideoContentProtectionCaps*)ppCaps);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContentProtectionCaps(this ComPtr<ID3D11VideoDevice> comObj, ref Guid pCryptoType, Guid* pDecoderProfile, ref VideoContentProtectionCaps pCaps) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (VideoContentProtectionCaps* ppCaps = &pCaps)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, VideoContentProtectionCaps*, HResult>)(handle->LpVtbl[16]))(handle, (Guid*)ppCryptoType, pDecoderProfile, (VideoContentProtectionCaps*)ppCaps);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContentProtectionCaps(this ComPtr<ID3D11VideoDevice> comObj, Guid* pCryptoType, ref Guid pDecoderProfile, ref VideoContentProtectionCaps pCaps) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (VideoContentProtectionCaps* ppCaps = &pCaps)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, VideoContentProtectionCaps*, HResult>)(handle->LpVtbl[16]))(handle, pCryptoType, (Guid*)ppDecoderProfile, (VideoContentProtectionCaps*)ppCaps);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetContentProtectionCaps(this ComPtr<ID3D11VideoDevice> comObj, ref Guid pCryptoType, ref Guid pDecoderProfile, ref VideoContentProtectionCaps pCaps) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (VideoContentProtectionCaps* ppCaps = &pCaps)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, VideoContentProtectionCaps*, HResult>)(handle->LpVtbl[16]))(handle, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (VideoContentProtectionCaps*)ppCaps);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCryptoKeyExchange(this ComPtr<ID3D11VideoDevice> comObj, Guid* pCryptoType, Guid* pDecoderProfile, uint index, Guid* pKeyExchangeType) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(handle->LpVtbl[17]))(handle, pCryptoType, pDecoderProfile, index, pKeyExchangeType);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCryptoKeyExchange(this ComPtr<ID3D11VideoDevice> comObj, ref Guid pCryptoType, Guid* pDecoderProfile, uint index, Guid* pKeyExchangeType) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(handle->LpVtbl[17]))(handle, (Guid*)ppCryptoType, pDecoderProfile, index, pKeyExchangeType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCryptoKeyExchange(this ComPtr<ID3D11VideoDevice> comObj, Guid* pCryptoType, ref Guid pDecoderProfile, uint index, Guid* pKeyExchangeType) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(handle->LpVtbl[17]))(handle, pCryptoType, (Guid*)ppDecoderProfile, index, pKeyExchangeType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCryptoKeyExchange(this ComPtr<ID3D11VideoDevice> comObj, ref Guid pCryptoType, ref Guid pDecoderProfile, uint index, Guid* pKeyExchangeType) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(handle->LpVtbl[17]))(handle, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, index, pKeyExchangeType);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCryptoKeyExchange(this ComPtr<ID3D11VideoDevice> comObj, Guid* pCryptoType, Guid* pDecoderProfile, uint index, ref Guid pKeyExchangeType) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(handle->LpVtbl[17]))(handle, pCryptoType, pDecoderProfile, index, (Guid*)ppKeyExchangeType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCryptoKeyExchange(this ComPtr<ID3D11VideoDevice> comObj, ref Guid pCryptoType, Guid* pDecoderProfile, uint index, ref Guid pKeyExchangeType) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(handle->LpVtbl[17]))(handle, (Guid*)ppCryptoType, pDecoderProfile, index, (Guid*)ppKeyExchangeType);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCryptoKeyExchange(this ComPtr<ID3D11VideoDevice> comObj, Guid* pCryptoType, ref Guid pDecoderProfile, uint index, ref Guid pKeyExchangeType) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(handle->LpVtbl[17]))(handle, pCryptoType, (Guid*)ppDecoderProfile, index, (Guid*)ppKeyExchangeType);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CheckCryptoKeyExchange(this ComPtr<ID3D11VideoDevice> comObj, ref Guid pCryptoType, ref Guid pDecoderProfile, uint index, ref Guid pKeyExchangeType) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(handle->LpVtbl[17]))(handle, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, index, (Guid*)ppKeyExchangeType);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D11VideoDevice> comObj, Guid* guid, uint dataSize, void* pData) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, uint, void*, HResult>)(handle->LpVtbl[18]))(handle, guid, dataSize, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateData(this ComPtr<ID3D11VideoDevice> comObj, ref Guid guid, uint dataSize, void* pData) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, uint, void*, HResult>)(handle->LpVtbl[18]))(handle, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D11VideoDevice> comObj, Guid* guid, IUnknown* pData) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[19]))(handle, guid, pData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D11VideoDevice> comObj, ref Guid guid, IUnknown* pData) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[19]))(handle, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D11VideoDevice> comObj, Guid* guid, ref IUnknown pData) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[19]))(handle, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D11VideoDevice> comObj, Guid* guid, ComPtr<IUnknown> pData) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[19]))(handle, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D11VideoDevice> comObj, ref Guid guid, ref IUnknown pData) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[19]))(handle, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPrivateDataInterface(this ComPtr<ID3D11VideoDevice> comObj, ref Guid guid, ComPtr<IUnknown> pData) 
		{
			ID3D11VideoDevice* handle = comObj.Handle;
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, IUnknown*, HResult>)(handle->LpVtbl[19]))(handle, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11Debug> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11Debug* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11Debug> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11Debug* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11Debug> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Debug* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11Debug> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Debug* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11Debug> comObj) 
		{
			ID3D11Debug* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11Debug> comObj) 
		{
			ID3D11Debug* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetFeatureMask(this ComPtr<ID3D11Debug> comObj, uint mask) 
		{
			ID3D11Debug* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint, HResult>)(handle->LpVtbl[3]))(handle, mask);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetFeatureMask(this ComPtr<ID3D11Debug> comObj) 
		{
			ID3D11Debug* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint>)(handle->LpVtbl[4]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetPresentPerRenderOpDelay(this ComPtr<ID3D11Debug> comObj, uint milliseconds) 
		{
			ID3D11Debug* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint, HResult>)(handle->LpVtbl[5]))(handle, milliseconds);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPresentPerRenderOpDelay(this ComPtr<ID3D11Debug> comObj) 
		{
			ID3D11Debug* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint>)(handle->LpVtbl[6]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetSwapChain(this ComPtr<ID3D11Debug> comObj, IDXGISwapChain* pSwapChain) 
		{
			ID3D11Debug* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain*, HResult>)(handle->LpVtbl[7]))(handle, pSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetSwapChain(this ComPtr<ID3D11Debug> comObj, ref IDXGISwapChain pSwapChain) 
		{
			ID3D11Debug* handle = comObj.Handle;
			fixed (IDXGISwapChain* ppSwapChain = &pSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain*, HResult>)(handle->LpVtbl[7]))(handle, (IDXGISwapChain*)ppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetSwapChain(this ComPtr<ID3D11Debug> comObj, ComPtr<IDXGISwapChain> pSwapChain) 
		{
			ID3D11Debug* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain*, HResult>)(handle->LpVtbl[7]))(handle, (IDXGISwapChain*)pSwapChain.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSwapChain(this ComPtr<ID3D11Debug> comObj, IDXGISwapChain** ppSwapChain) 
		{
			ID3D11Debug* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain**, HResult>)(handle->LpVtbl[8]))(handle, ppSwapChain);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSwapChain(this ComPtr<ID3D11Debug> comObj, ref IDXGISwapChain* ppSwapChain) 
		{
			ID3D11Debug* handle = comObj.Handle;
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain**, HResult>)(handle->LpVtbl[8]))(handle, (IDXGISwapChain**)pppSwapChain);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetSwapChain(this ComPtr<ID3D11Debug> comObj, out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			ID3D11Debug* handle = comObj.Handle;
			ppSwapChain = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain**, HResult>)(handle->LpVtbl[8]))(handle, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ValidateContext(this ComPtr<ID3D11Debug> comObj, ID3D11DeviceContext* pContext) 
		{
			ID3D11Debug* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, HResult>)(handle->LpVtbl[9]))(handle, pContext);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ValidateContext(this ComPtr<ID3D11Debug> comObj, ref ID3D11DeviceContext pContext) 
		{
			ID3D11Debug* handle = comObj.Handle;
			fixed (ID3D11DeviceContext* ppContext = &pContext)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11DeviceContext*)ppContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ValidateContext(this ComPtr<ID3D11Debug> comObj, ComPtr<ID3D11DeviceContext> pContext) 
		{
			ID3D11Debug* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11DeviceContext*)pContext.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ReportLiveDeviceObjects(this ComPtr<ID3D11Debug> comObj, RldoFlags flags) 
		{
			ID3D11Debug* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, RldoFlags, HResult>)(handle->LpVtbl[10]))(handle, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ValidateContextForDispatch(this ComPtr<ID3D11Debug> comObj, ID3D11DeviceContext* pContext) 
		{
			ID3D11Debug* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, HResult>)(handle->LpVtbl[11]))(handle, pContext);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ValidateContextForDispatch(this ComPtr<ID3D11Debug> comObj, ref ID3D11DeviceContext pContext) 
		{
			ID3D11Debug* handle = comObj.Handle;
			fixed (ID3D11DeviceContext* ppContext = &pContext)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, HResult>)(handle->LpVtbl[11]))(handle, (ID3D11DeviceContext*)ppContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ValidateContextForDispatch(this ComPtr<ID3D11Debug> comObj, ComPtr<ID3D11DeviceContext> pContext) 
		{
			ID3D11Debug* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, HResult>)(handle->LpVtbl[11]))(handle, (ID3D11DeviceContext*)pContext.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11SwitchToRef> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11SwitchToRef* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11SwitchToRef> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11SwitchToRef* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11SwitchToRef> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11SwitchToRef* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11SwitchToRef> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11SwitchToRef* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11SwitchToRef> comObj) 
		{
			ID3D11SwitchToRef* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11SwitchToRef> comObj) 
		{
			ID3D11SwitchToRef* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 SetUseRef(this ComPtr<ID3D11SwitchToRef> comObj, Bool32 useRef) 
		{
			ID3D11SwitchToRef* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, Bool32, Bool32>)(handle->LpVtbl[3]))(handle, useRef);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 GetUseRef(this ComPtr<ID3D11SwitchToRef> comObj) 
		{
			ID3D11SwitchToRef* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, Bool32>)(handle->LpVtbl[4]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11TracingDevice> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11TracingDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11TracingDevice> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11TracingDevice* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11TracingDevice> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11TracingDevice* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11TracingDevice> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11TracingDevice* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11TracingDevice> comObj) 
		{
			ID3D11TracingDevice* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11TracingDevice> comObj) 
		{
			ID3D11TracingDevice* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetShaderTrackingOptionsByType(this ComPtr<ID3D11TracingDevice> comObj, uint resourceTypeFlags, uint options) 
		{
			ID3D11TracingDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, uint, uint, HResult>)(handle->LpVtbl[3]))(handle, resourceTypeFlags, options);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetShaderTrackingOptions(this ComPtr<ID3D11TracingDevice> comObj, IUnknown* pShader, uint options) 
		{
			ID3D11TracingDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, IUnknown*, uint, HResult>)(handle->LpVtbl[4]))(handle, pShader, options);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetShaderTrackingOptions(this ComPtr<ID3D11TracingDevice> comObj, ref IUnknown pShader, uint options) 
		{
			ID3D11TracingDevice* handle = comObj.Handle;
			fixed (IUnknown* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, IUnknown*, uint, HResult>)(handle->LpVtbl[4]))(handle, (IUnknown*)ppShader, options);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetShaderTrackingOptions(this ComPtr<ID3D11TracingDevice> comObj, ComPtr<IUnknown> pShader, uint options) 
		{
			ID3D11TracingDevice* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, IUnknown*, uint, HResult>)(handle->LpVtbl[4]))(handle, (IUnknown*)pShader.Handle, options);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11RefTrackingOptions> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11RefTrackingOptions* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11RefTrackingOptions> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11RefTrackingOptions* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11RefTrackingOptions> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11RefTrackingOptions* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11RefTrackingOptions> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11RefTrackingOptions* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11RefTrackingOptions> comObj) 
		{
			ID3D11RefTrackingOptions* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11RefTrackingOptions> comObj) 
		{
			ID3D11RefTrackingOptions* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetTrackingOptions(this ComPtr<ID3D11RefTrackingOptions> comObj, uint uOptions) 
		{
			ID3D11RefTrackingOptions* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, uint, HResult>)(handle->LpVtbl[3]))(handle, uOptions);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11RefDefaultTrackingOptions> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11RefDefaultTrackingOptions* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11RefDefaultTrackingOptions> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11RefDefaultTrackingOptions* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11RefDefaultTrackingOptions> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11RefDefaultTrackingOptions* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11RefDefaultTrackingOptions> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11RefDefaultTrackingOptions* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11RefDefaultTrackingOptions> comObj) 
		{
			ID3D11RefDefaultTrackingOptions* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11RefDefaultTrackingOptions> comObj) 
		{
			ID3D11RefDefaultTrackingOptions* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetTrackingOptions(this ComPtr<ID3D11RefDefaultTrackingOptions> comObj, uint resourceTypeFlags, uint options) 
		{
			ID3D11RefDefaultTrackingOptions* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, uint, uint, HResult>)(handle->LpVtbl[3]))(handle, resourceTypeFlags, options);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11InfoQueue> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11InfoQueue> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11InfoQueue> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11InfoQueue> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetMessageCountLimit(this ComPtr<ID3D11InfoQueue> comObj, ulong messageCountLimit) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, HResult>)(handle->LpVtbl[3]))(handle, messageCountLimit);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClearStoredMessages(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(handle->LpVtbl[4]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMessageA(this ComPtr<ID3D11InfoQueue> comObj, ulong messageIndex, Message* pMessage, nuint* pMessageByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, Message*, nuint*, HResult>)(handle->LpVtbl[5]))(handle, messageIndex, pMessage, pMessageByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMessageA(this ComPtr<ID3D11InfoQueue> comObj, ulong messageIndex, ref Message pMessage, nuint* pMessageByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (Message* ppMessage = &pMessage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, Message*, nuint*, HResult>)(handle->LpVtbl[5]))(handle, messageIndex, (Message*)ppMessage, pMessageByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMessageA(this ComPtr<ID3D11InfoQueue> comObj, ulong messageIndex, Message* pMessage, ref nuint pMessageByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (nuint* ppMessageByteLength = &pMessageByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, Message*, nuint*, HResult>)(handle->LpVtbl[5]))(handle, messageIndex, pMessage, (nuint*)ppMessageByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMessageA(this ComPtr<ID3D11InfoQueue> comObj, ulong messageIndex, ref Message pMessage, ref nuint pMessageByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (Message* ppMessage = &pMessage)
			{
				fixed (nuint* ppMessageByteLength = &pMessageByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, Message*, nuint*, HResult>)(handle->LpVtbl[5]))(handle, messageIndex, (Message*)ppMessage, (nuint*)ppMessageByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumMessagesAllowedByStorageFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(handle->LpVtbl[6]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumMessagesDeniedByStorageFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(handle->LpVtbl[7]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumStoredMessages(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(handle->LpVtbl[8]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumStoredMessagesAllowedByRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(handle->LpVtbl[9]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetNumMessagesDiscardedByMessageCountLimit(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(handle->LpVtbl[10]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetMessageCountLimit(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(handle->LpVtbl[11]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddStorageFilterEntries(this ComPtr<ID3D11InfoQueue> comObj, InfoQueueFilter* pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, HResult>)(handle->LpVtbl[12]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddStorageFilterEntries(this ComPtr<ID3D11InfoQueue> comObj, ref InfoQueueFilter pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, HResult>)(handle->LpVtbl[12]))(handle, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetStorageFilter(this ComPtr<ID3D11InfoQueue> comObj, InfoQueueFilter* pFilter, nuint* pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[13]))(handle, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetStorageFilter(this ComPtr<ID3D11InfoQueue> comObj, ref InfoQueueFilter pFilter, nuint* pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[13]))(handle, (InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetStorageFilter(this ComPtr<ID3D11InfoQueue> comObj, InfoQueueFilter* pFilter, ref nuint pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[13]))(handle, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetStorageFilter(this ComPtr<ID3D11InfoQueue> comObj, ref InfoQueueFilter pFilter, ref nuint pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[13]))(handle, (InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClearStorageFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(handle->LpVtbl[14]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushEmptyStorageFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, HResult>)(handle->LpVtbl[15]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushCopyOfStorageFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, HResult>)(handle->LpVtbl[16]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushStorageFilter(this ComPtr<ID3D11InfoQueue> comObj, InfoQueueFilter* pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, HResult>)(handle->LpVtbl[17]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushStorageFilter(this ComPtr<ID3D11InfoQueue> comObj, ref InfoQueueFilter pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, HResult>)(handle->LpVtbl[17]))(handle, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PopStorageFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(handle->LpVtbl[18]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetStorageFilterStackSize(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, uint>)(handle->LpVtbl[19]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddRetrievalFilterEntries(this ComPtr<ID3D11InfoQueue> comObj, InfoQueueFilter* pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, HResult>)(handle->LpVtbl[20]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddRetrievalFilterEntries(this ComPtr<ID3D11InfoQueue> comObj, ref InfoQueueFilter pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, HResult>)(handle->LpVtbl[20]))(handle, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj, InfoQueueFilter* pFilter, nuint* pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[21]))(handle, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj, ref InfoQueueFilter pFilter, nuint* pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[21]))(handle, (InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj, InfoQueueFilter* pFilter, ref nuint pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[21]))(handle, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj, ref InfoQueueFilter pFilter, ref nuint pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, nuint*, HResult>)(handle->LpVtbl[21]))(handle, (InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClearRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(handle->LpVtbl[22]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushEmptyRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, HResult>)(handle->LpVtbl[23]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushCopyOfRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, HResult>)(handle->LpVtbl[24]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj, InfoQueueFilter* pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, HResult>)(handle->LpVtbl[25]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult PushRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj, ref InfoQueueFilter pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, InfoQueueFilter*, HResult>)(handle->LpVtbl[25]))(handle, (InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PopRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(handle->LpVtbl[26]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetRetrievalFilterStackSize(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, uint>)(handle->LpVtbl[27]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddMessage(this ComPtr<ID3D11InfoQueue> comObj, MessageCategory category, MessageSeverity severity, MessageId id, byte* pDescription) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, MessageCategory, MessageSeverity, MessageId, byte*, HResult>)(handle->LpVtbl[28]))(handle, category, severity, id, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddMessage(this ComPtr<ID3D11InfoQueue> comObj, MessageCategory category, MessageSeverity severity, MessageId id, ReadOnlySpan<byte> pDescription) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (byte* ppDescription = pDescription)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, MessageCategory, MessageSeverity, MessageId, byte*, HResult>)(handle->LpVtbl[28]))(handle, category, severity, id, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddMessage(this ComPtr<ID3D11InfoQueue> comObj, MessageCategory category, MessageSeverity severity, MessageId id, string pDescription) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, MessageCategory, MessageSeverity, MessageId, byte*, HResult>)(handle->LpVtbl[28]))(handle, category, severity, id, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddApplicationMessage(this ComPtr<ID3D11InfoQueue> comObj, MessageSeverity severity, byte* pDescription) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, MessageSeverity, byte*, HResult>)(handle->LpVtbl[29]))(handle, severity, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddApplicationMessage(this ComPtr<ID3D11InfoQueue> comObj, MessageSeverity severity, ReadOnlySpan<byte> pDescription) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (byte* ppDescription = pDescription)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, MessageSeverity, byte*, HResult>)(handle->LpVtbl[29]))(handle, severity, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult AddApplicationMessage(this ComPtr<ID3D11InfoQueue> comObj, MessageSeverity severity, string pDescription) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, MessageSeverity, byte*, HResult>)(handle->LpVtbl[29]))(handle, severity, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetBreakOnCategory(this ComPtr<ID3D11InfoQueue> comObj, MessageCategory category, Bool32 bEnable) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, MessageCategory, Bool32, HResult>)(handle->LpVtbl[30]))(handle, category, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetBreakOnSeverity(this ComPtr<ID3D11InfoQueue> comObj, MessageSeverity severity, Bool32 bEnable) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, MessageSeverity, Bool32, HResult>)(handle->LpVtbl[31]))(handle, severity, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult SetBreakOnID(this ComPtr<ID3D11InfoQueue> comObj, MessageId id, Bool32 bEnable) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, MessageId, Bool32, HResult>)(handle->LpVtbl[32]))(handle, id, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 GetBreakOnCategory(this ComPtr<ID3D11InfoQueue> comObj, MessageCategory category) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, MessageCategory, Bool32>)(handle->LpVtbl[33]))(handle, category);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 GetBreakOnSeverity(this ComPtr<ID3D11InfoQueue> comObj, MessageSeverity severity) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, MessageSeverity, Bool32>)(handle->LpVtbl[34]))(handle, severity);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 GetBreakOnID(this ComPtr<ID3D11InfoQueue> comObj, MessageId id) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, MessageId, Bool32>)(handle->LpVtbl[35]))(handle, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetMuteDebugOutput(this ComPtr<ID3D11InfoQueue> comObj, Bool32 bMute) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, Bool32, void>)(handle->LpVtbl[36]))(handle, bMute);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 GetMuteDebugOutput(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, Bool32>)(handle->LpVtbl[37]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11ShaderReflectionType> comObj, ShaderTypeDesc* pDesc) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ShaderTypeDesc*, HResult>)(*handle->LpVtbl))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11ShaderReflectionType> comObj, ref ShaderTypeDesc pDesc) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			fixed (ShaderTypeDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ShaderTypeDesc*, HResult>)(*handle->LpVtbl))(handle, (ShaderTypeDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionType* GetMemberTypeByIndex(this ComPtr<ID3D11ShaderReflectionType> comObj, uint index) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, ID3D11ShaderReflectionType*>)(handle->LpVtbl[1]))(handle, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionType* GetMemberTypeByName(this ComPtr<ID3D11ShaderReflectionType> comObj, byte* name) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, byte*, ID3D11ShaderReflectionType*>)(handle->LpVtbl[2]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionType* GetMemberTypeByName(this ComPtr<ID3D11ShaderReflectionType> comObj, ReadOnlySpan<byte> name) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, byte*, ID3D11ShaderReflectionType*>)(handle->LpVtbl[2]))(handle, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionType* GetMemberTypeByName(this ComPtr<ID3D11ShaderReflectionType> comObj, string name) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, byte*, ID3D11ShaderReflectionType*>)(handle->LpVtbl[2]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* GetMemberTypeName(this ComPtr<ID3D11ShaderReflectionType> comObj, uint index) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			byte* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, byte*>)(handle->LpVtbl[3]))(handle, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string GetMemberTypeNameS(this ComPtr<ID3D11ShaderReflectionType> comObj, uint index) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			string ret = Utils.DecodeStringUTF8(((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, byte*>)(handle->LpVtbl[3]))(handle, index));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult IsEqual(this ComPtr<ID3D11ShaderReflectionType> comObj, ID3D11ShaderReflectionType* pType) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(handle->LpVtbl[4]))(handle, pType);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult IsEqual(this ComPtr<ID3D11ShaderReflectionType> comObj, ref ID3D11ShaderReflectionType pType) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			fixed (ID3D11ShaderReflectionType* ppType = &pType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(handle->LpVtbl[4]))(handle, (ID3D11ShaderReflectionType*)ppType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult IsEqual(this ComPtr<ID3D11ShaderReflectionType> comObj, ComPtr<ID3D11ShaderReflectionType> pType) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(handle->LpVtbl[4]))(handle, (ID3D11ShaderReflectionType*)pType.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionType* GetSubType(this ComPtr<ID3D11ShaderReflectionType> comObj) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*>)(handle->LpVtbl[5]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionType* GetBaseClass(this ComPtr<ID3D11ShaderReflectionType> comObj) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*>)(handle->LpVtbl[6]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetNumInterfaces(this ComPtr<ID3D11ShaderReflectionType> comObj) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint>)(handle->LpVtbl[7]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionType* GetInterfaceByIndex(this ComPtr<ID3D11ShaderReflectionType> comObj, uint uIndex) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, ID3D11ShaderReflectionType*>)(handle->LpVtbl[8]))(handle, uIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult IsOfType(this ComPtr<ID3D11ShaderReflectionType> comObj, ID3D11ShaderReflectionType* pType) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(handle->LpVtbl[9]))(handle, pType);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult IsOfType(this ComPtr<ID3D11ShaderReflectionType> comObj, ref ID3D11ShaderReflectionType pType) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			fixed (ID3D11ShaderReflectionType* ppType = &pType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11ShaderReflectionType*)ppType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult IsOfType(this ComPtr<ID3D11ShaderReflectionType> comObj, ComPtr<ID3D11ShaderReflectionType> pType) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(handle->LpVtbl[9]))(handle, (ID3D11ShaderReflectionType*)pType.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ImplementsInterface(this ComPtr<ID3D11ShaderReflectionType> comObj, ID3D11ShaderReflectionType* pBase) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(handle->LpVtbl[10]))(handle, pBase);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ImplementsInterface(this ComPtr<ID3D11ShaderReflectionType> comObj, ref ID3D11ShaderReflectionType pBase) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			fixed (ID3D11ShaderReflectionType* ppBase = &pBase)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(handle->LpVtbl[10]))(handle, (ID3D11ShaderReflectionType*)ppBase);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult ImplementsInterface(this ComPtr<ID3D11ShaderReflectionType> comObj, ComPtr<ID3D11ShaderReflectionType> pBase) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(handle->LpVtbl[10]))(handle, (ID3D11ShaderReflectionType*)pBase.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11ShaderReflectionVariable> comObj, ShaderVariableDesc* pDesc) 
		{
			ID3D11ShaderReflectionVariable* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, ShaderVariableDesc*, HResult>)(*handle->LpVtbl))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11ShaderReflectionVariable> comObj, ref ShaderVariableDesc pDesc) 
		{
			ID3D11ShaderReflectionVariable* handle = comObj.Handle;
			fixed (ShaderVariableDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, ShaderVariableDesc*, HResult>)(*handle->LpVtbl))(handle, (ShaderVariableDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionType* GetType(this ComPtr<ID3D11ShaderReflectionVariable> comObj) 
		{
			ID3D11ShaderReflectionVariable* handle = comObj.Handle;
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, ID3D11ShaderReflectionType*>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionConstantBuffer* GetBuffer(this ComPtr<ID3D11ShaderReflectionVariable> comObj) 
		{
			ID3D11ShaderReflectionVariable* handle = comObj.Handle;
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetInterfaceSlot(this ComPtr<ID3D11ShaderReflectionVariable> comObj, uint uArrayIndex) 
		{
			ID3D11ShaderReflectionVariable* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, uint, uint>)(handle->LpVtbl[3]))(handle, uArrayIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11ShaderReflectionConstantBuffer> comObj, ShaderBufferDesc* pDesc) 
		{
			ID3D11ShaderReflectionConstantBuffer* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, ShaderBufferDesc*, HResult>)(*handle->LpVtbl))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11ShaderReflectionConstantBuffer> comObj, ref ShaderBufferDesc pDesc) 
		{
			ID3D11ShaderReflectionConstantBuffer* handle = comObj.Handle;
			fixed (ShaderBufferDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, ShaderBufferDesc*, HResult>)(*handle->LpVtbl))(handle, (ShaderBufferDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionVariable* GetVariableByIndex(this ComPtr<ID3D11ShaderReflectionConstantBuffer> comObj, uint index) 
		{
			ID3D11ShaderReflectionConstantBuffer* handle = comObj.Handle;
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, uint, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[1]))(handle, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11ShaderReflectionConstantBuffer> comObj, byte* name) 
		{
			ID3D11ShaderReflectionConstantBuffer* handle = comObj.Handle;
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[2]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11ShaderReflectionConstantBuffer> comObj, ReadOnlySpan<byte> name) 
		{
			ID3D11ShaderReflectionConstantBuffer* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[2]))(handle, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11ShaderReflectionConstantBuffer> comObj, string name) 
		{
			ID3D11ShaderReflectionConstantBuffer* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[2]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11ShaderReflection> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11ShaderReflection> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11ShaderReflection> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11ShaderReflection> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11ShaderReflection> comObj, Guid* iid, ref void* ppv) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (void** pppv = &ppv)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11ShaderReflection> comObj, ref Guid iid, ref void* ppv) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11ShaderReflection> comObj, ShaderDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, ShaderDesc*, HResult>)(handle->LpVtbl[4]))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11ShaderReflection> comObj, ref ShaderDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (ShaderDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, ShaderDesc*, HResult>)(handle->LpVtbl[4]))(handle, (ShaderDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByIndex(this ComPtr<ID3D11ShaderReflection> comObj, uint index) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[5]))(handle, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(this ComPtr<ID3D11ShaderReflection> comObj, byte* name) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(this ComPtr<ID3D11ShaderReflection> comObj, ReadOnlySpan<byte> name) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[6]))(handle, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(this ComPtr<ID3D11ShaderReflection> comObj, string name) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDesc(this ComPtr<ID3D11ShaderReflection> comObj, uint resourceIndex, ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[7]))(handle, resourceIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDesc(this ComPtr<ID3D11ShaderReflection> comObj, uint resourceIndex, ref ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (ShaderInputBindDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[7]))(handle, resourceIndex, (ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetInputParameterDesc(this ComPtr<ID3D11ShaderReflection> comObj, uint parameterIndex, SignatureParameterDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, SignatureParameterDesc*, HResult>)(handle->LpVtbl[8]))(handle, parameterIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetInputParameterDesc(this ComPtr<ID3D11ShaderReflection> comObj, uint parameterIndex, ref SignatureParameterDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (SignatureParameterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, SignatureParameterDesc*, HResult>)(handle->LpVtbl[8]))(handle, parameterIndex, (SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetOutputParameterDesc(this ComPtr<ID3D11ShaderReflection> comObj, uint parameterIndex, SignatureParameterDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, SignatureParameterDesc*, HResult>)(handle->LpVtbl[9]))(handle, parameterIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetOutputParameterDesc(this ComPtr<ID3D11ShaderReflection> comObj, uint parameterIndex, ref SignatureParameterDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (SignatureParameterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, SignatureParameterDesc*, HResult>)(handle->LpVtbl[9]))(handle, parameterIndex, (SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPatchConstantParameterDesc(this ComPtr<ID3D11ShaderReflection> comObj, uint parameterIndex, SignatureParameterDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, SignatureParameterDesc*, HResult>)(handle->LpVtbl[10]))(handle, parameterIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetPatchConstantParameterDesc(this ComPtr<ID3D11ShaderReflection> comObj, uint parameterIndex, ref SignatureParameterDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (SignatureParameterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, SignatureParameterDesc*, HResult>)(handle->LpVtbl[10]))(handle, parameterIndex, (SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11ShaderReflection> comObj, byte* name) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[11]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11ShaderReflection> comObj, ReadOnlySpan<byte> name) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[11]))(handle, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11ShaderReflection> comObj, string name) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[11]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDescByName(this ComPtr<ID3D11ShaderReflection> comObj, byte* name, ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[12]))(handle, name, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDescByName(this ComPtr<ID3D11ShaderReflection> comObj, ReadOnlySpan<byte> name, ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[12]))(handle, (byte*)pname, pDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDescByName(this ComPtr<ID3D11ShaderReflection> comObj, string name, ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[12]))(handle, pStr0, pDesc);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDescByName(this ComPtr<ID3D11ShaderReflection> comObj, byte* name, ref ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (ShaderInputBindDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[12]))(handle, name, (ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDescByName(this ComPtr<ID3D11ShaderReflection> comObj, ReadOnlySpan<byte> name, ref ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				fixed (ShaderInputBindDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[12]))(handle, (byte*)pname, (ShaderInputBindDesc*)ppDesc);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDescByName(this ComPtr<ID3D11ShaderReflection> comObj, string name, ref ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ShaderInputBindDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[12]))(handle, pStr0, (ShaderInputBindDesc*)ppDesc);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMovInstructionCount(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[13]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMovcInstructionCount(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[14]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetConversionInstructionCount(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[15]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetBitwiseInstructionCount(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[16]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Primitive GetGSInputPrimitive(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			Primitive ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Primitive>)(handle->LpVtbl[17]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Bool32 IsSampleFrequencyShader(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			Bool32 ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Bool32>)(handle->LpVtbl[18]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetNumInterfaceSlots(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[19]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMinFeatureLevel(this ComPtr<ID3D11ShaderReflection> comObj, FeatureLevel* pLevel) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, FeatureLevel*, HResult>)(handle->LpVtbl[20]))(handle, pLevel);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetMinFeatureLevel(this ComPtr<ID3D11ShaderReflection> comObj, ref FeatureLevel pLevel) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (FeatureLevel* ppLevel = &pLevel)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, FeatureLevel*, HResult>)(handle->LpVtbl[20]))(handle, (FeatureLevel*)ppLevel);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, uint* pSizeX, uint* pSizeY, uint* pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, pSizeX, pSizeY, pSizeZ);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, ref uint pSizeX, uint* pSizeY, uint* pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeX = &pSizeX)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, (uint*)ppSizeX, pSizeY, pSizeZ);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, uint* pSizeX, ref uint pSizeY, uint* pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeY = &pSizeY)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, pSizeX, (uint*)ppSizeY, pSizeZ);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, ref uint pSizeX, ref uint pSizeY, uint* pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeY = &pSizeY)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, (uint*)ppSizeX, (uint*)ppSizeY, pSizeZ);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, uint* pSizeX, uint* pSizeY, ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeZ = &pSizeZ)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, pSizeX, pSizeY, (uint*)ppSizeZ);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, ref uint pSizeX, uint* pSizeY, ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeZ = &pSizeZ)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, (uint*)ppSizeX, pSizeY, (uint*)ppSizeZ);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, uint* pSizeX, ref uint pSizeY, ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeY = &pSizeY)
			{
				fixed (uint* ppSizeZ = &pSizeZ)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, pSizeX, (uint*)ppSizeY, (uint*)ppSizeZ);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, ref uint pSizeX, ref uint pSizeY, ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeY = &pSizeY)
				{
					fixed (uint* ppSizeZ = &pSizeZ)
					{
						uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, (uint*)ppSizeX, (uint*)ppSizeY, (uint*)ppSizeZ);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong GetRequiresFlags(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, ulong>)(handle->LpVtbl[22]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11LibraryReflection> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11LibraryReflection> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11LibraryReflection> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11LibraryReflection> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11LibraryReflection> comObj) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11LibraryReflection> comObj) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11LibraryReflection> comObj, Guid* iid, ref void* ppv) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			fixed (void** pppv = &ppv)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11LibraryReflection> comObj, ref Guid iid, ref void* ppv) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11LibraryReflection> comObj, LibraryDesc* pDesc) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, LibraryDesc*, HResult>)(handle->LpVtbl[4]))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11LibraryReflection> comObj, ref LibraryDesc pDesc) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			fixed (LibraryDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, LibraryDesc*, HResult>)(handle->LpVtbl[4]))(handle, (LibraryDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11FunctionReflection* GetFunctionByIndex(this ComPtr<ID3D11LibraryReflection> comObj, int functionIndex) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			ID3D11FunctionReflection* ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, int, ID3D11FunctionReflection*>)(handle->LpVtbl[5]))(handle, functionIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11FunctionReflection> comObj, FunctionDesc* pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, FunctionDesc*, HResult>)(*handle->LpVtbl))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11FunctionReflection> comObj, ref FunctionDesc pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (FunctionDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, FunctionDesc*, HResult>)(*handle->LpVtbl))(handle, (FunctionDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByIndex(this ComPtr<ID3D11FunctionReflection> comObj, uint bufferIndex) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, uint, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[1]))(handle, bufferIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(this ComPtr<ID3D11FunctionReflection> comObj, byte* name) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[2]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(this ComPtr<ID3D11FunctionReflection> comObj, ReadOnlySpan<byte> name) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[2]))(handle, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(this ComPtr<ID3D11FunctionReflection> comObj, string name) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[2]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDesc(this ComPtr<ID3D11FunctionReflection> comObj, uint resourceIndex, ShaderInputBindDesc* pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, uint, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[3]))(handle, resourceIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDesc(this ComPtr<ID3D11FunctionReflection> comObj, uint resourceIndex, ref ShaderInputBindDesc pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (ShaderInputBindDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, uint, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[3]))(handle, resourceIndex, (ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11FunctionReflection> comObj, byte* name) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[4]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11FunctionReflection> comObj, ReadOnlySpan<byte> name) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[4]))(handle, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11FunctionReflection> comObj, string name) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[4]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDescByName(this ComPtr<ID3D11FunctionReflection> comObj, byte* name, ShaderInputBindDesc* pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[5]))(handle, name, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDescByName(this ComPtr<ID3D11FunctionReflection> comObj, ReadOnlySpan<byte> name, ShaderInputBindDesc* pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[5]))(handle, (byte*)pname, pDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDescByName(this ComPtr<ID3D11FunctionReflection> comObj, string name, ShaderInputBindDesc* pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[5]))(handle, pStr0, pDesc);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDescByName(this ComPtr<ID3D11FunctionReflection> comObj, byte* name, ref ShaderInputBindDesc pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (ShaderInputBindDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[5]))(handle, name, (ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDescByName(this ComPtr<ID3D11FunctionReflection> comObj, ReadOnlySpan<byte> name, ref ShaderInputBindDesc pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				fixed (ShaderInputBindDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[5]))(handle, (byte*)pname, (ShaderInputBindDesc*)ppDesc);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetResourceBindingDescByName(this ComPtr<ID3D11FunctionReflection> comObj, string name, ref ShaderInputBindDesc pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ShaderInputBindDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ShaderInputBindDesc*, HResult>)(handle->LpVtbl[5]))(handle, pStr0, (ShaderInputBindDesc*)ppDesc);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ID3D11FunctionParameterReflection* GetFunctionParameter(this ComPtr<ID3D11FunctionReflection> comObj, int parameterIndex) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			ID3D11FunctionParameterReflection* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, int, ID3D11FunctionParameterReflection*>)(handle->LpVtbl[6]))(handle, parameterIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11FunctionParameterReflection> comObj, ParameterDesc* pDesc) 
		{
			ID3D11FunctionParameterReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionParameterReflection*, ParameterDesc*, HResult>)(*handle->LpVtbl))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult GetDesc(this ComPtr<ID3D11FunctionParameterReflection> comObj, ref ParameterDesc pDesc) 
		{
			ID3D11FunctionParameterReflection* handle = comObj.Handle;
			fixed (ParameterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionParameterReflection*, ParameterDesc*, HResult>)(*handle->LpVtbl))(handle, (ParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11ModuleInstance> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11ModuleInstance> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11ModuleInstance> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11ModuleInstance> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11ModuleInstance> comObj) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11ModuleInstance> comObj) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11ModuleInstance> comObj, Guid* iid, ref void* ppv) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (void** pppv = &ppv)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11ModuleInstance> comObj, ref Guid iid, ref void* ppv) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindConstantBuffer(this ComPtr<ID3D11ModuleInstance> comObj, uint uSrcSlot, uint uDstSlot, uint cbDstOffset) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, HResult>)(handle->LpVtbl[4]))(handle, uSrcSlot, uDstSlot, cbDstOffset);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindConstantBufferByName(this ComPtr<ID3D11ModuleInstance> comObj, byte* pName, uint uDstSlot, uint cbDstOffset) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[5]))(handle, pName, uDstSlot, cbDstOffset);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindConstantBufferByName(this ComPtr<ID3D11ModuleInstance> comObj, ReadOnlySpan<byte> pName, uint uDstSlot, uint cbDstOffset) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (byte* ppName = pName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[5]))(handle, (byte*)ppName, uDstSlot, cbDstOffset);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindConstantBufferByName(this ComPtr<ID3D11ModuleInstance> comObj, string pName, uint uDstSlot, uint cbDstOffset) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[5]))(handle, pStr0, uDstSlot, cbDstOffset);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindResource(this ComPtr<ID3D11ModuleInstance> comObj, uint uSrcSlot, uint uDstSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, HResult>)(handle->LpVtbl[6]))(handle, uSrcSlot, uDstSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindResourceByName(this ComPtr<ID3D11ModuleInstance> comObj, byte* pName, uint uDstSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[7]))(handle, pName, uDstSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindResourceByName(this ComPtr<ID3D11ModuleInstance> comObj, ReadOnlySpan<byte> pName, uint uDstSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (byte* ppName = pName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[7]))(handle, (byte*)ppName, uDstSlot, uCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindResourceByName(this ComPtr<ID3D11ModuleInstance> comObj, string pName, uint uDstSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[7]))(handle, pStr0, uDstSlot, uCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindSampler(this ComPtr<ID3D11ModuleInstance> comObj, uint uSrcSlot, uint uDstSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, HResult>)(handle->LpVtbl[8]))(handle, uSrcSlot, uDstSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindSamplerByName(this ComPtr<ID3D11ModuleInstance> comObj, byte* pName, uint uDstSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[9]))(handle, pName, uDstSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindSamplerByName(this ComPtr<ID3D11ModuleInstance> comObj, ReadOnlySpan<byte> pName, uint uDstSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (byte* ppName = pName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[9]))(handle, (byte*)ppName, uDstSlot, uCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindSamplerByName(this ComPtr<ID3D11ModuleInstance> comObj, string pName, uint uDstSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[9]))(handle, pStr0, uDstSlot, uCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindUnorderedAccessView(this ComPtr<ID3D11ModuleInstance> comObj, uint uSrcSlot, uint uDstSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, HResult>)(handle->LpVtbl[10]))(handle, uSrcSlot, uDstSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindUnorderedAccessViewByName(this ComPtr<ID3D11ModuleInstance> comObj, byte* pName, uint uDstSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[11]))(handle, pName, uDstSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindUnorderedAccessViewByName(this ComPtr<ID3D11ModuleInstance> comObj, ReadOnlySpan<byte> pName, uint uDstSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (byte* ppName = pName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[11]))(handle, (byte*)ppName, uDstSlot, uCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindUnorderedAccessViewByName(this ComPtr<ID3D11ModuleInstance> comObj, string pName, uint uDstSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[11]))(handle, pStr0, uDstSlot, uCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindResourceAsUnorderedAccessView(this ComPtr<ID3D11ModuleInstance> comObj, uint uSrcSrvSlot, uint uDstUavSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, HResult>)(handle->LpVtbl[12]))(handle, uSrcSrvSlot, uDstUavSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindResourceAsUnorderedAccessViewByName(this ComPtr<ID3D11ModuleInstance> comObj, byte* pSrvName, uint uDstUavSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[13]))(handle, pSrvName, uDstUavSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindResourceAsUnorderedAccessViewByName(this ComPtr<ID3D11ModuleInstance> comObj, ReadOnlySpan<byte> pSrvName, uint uDstUavSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (byte* ppSrvName = pSrvName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[13]))(handle, (byte*)ppSrvName, uDstUavSlot, uCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult BindResourceAsUnorderedAccessViewByName(this ComPtr<ID3D11ModuleInstance> comObj, string pSrvName, uint uDstUavSlot, uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSrvName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSrvName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSrvName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(handle->LpVtbl[13]))(handle, pStr0, uDstUavSlot, uCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11Module> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D11Module* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11Module> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11Module> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Module* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D11Module> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D11Module> comObj) 
		{
			ID3D11Module* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D11Module> comObj) 
		{
			ID3D11Module* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11Module> comObj, Guid* iid, ref void* ppv) 
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (void** pppv = &ppv)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D11Module> comObj, ref Guid iid, ref void* ppv) 
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, Guid*, void**, HResult>)(handle->LpVtbl[3]))(handle, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}
	}
}
