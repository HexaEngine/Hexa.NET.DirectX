// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	public static unsafe partial class Extensions
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddStorageFilterEntries")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int AddStorageFilterEntries(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(handle->LpVtbl[12]))(handle, (D3D11InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetStorageFilter(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[13]))(handle, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetStorageFilter(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[13]))(handle, (D3D11InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetStorageFilter(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[13]))(handle, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetStorageFilter(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[13]))(handle, (D3D11InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ClearStorageFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearStorageFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(handle->LpVtbl[14]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "PushEmptyStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int PushEmptyStorageFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int>)(handle->LpVtbl[15]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "PushCopyOfStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int PushCopyOfStorageFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int>)(handle->LpVtbl[16]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "PushStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int PushStorageFilter(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(handle->LpVtbl[17]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "PushStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int PushStorageFilter(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(handle->LpVtbl[17]))(handle, (D3D11InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "PopStorageFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PopStorageFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(handle->LpVtbl[18]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetStorageFilterStackSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetStorageFilterStackSize(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, uint>)(handle->LpVtbl[19]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddRetrievalFilterEntries")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int AddRetrievalFilterEntries(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(handle->LpVtbl[20]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddRetrievalFilterEntries")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int AddRetrievalFilterEntries(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(handle->LpVtbl[20]))(handle, (D3D11InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[21]))(handle, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[21]))(handle, (D3D11InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[21]))(handle, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFilterByteLength) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(handle->LpVtbl[21]))(handle, (D3D11InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ClearRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(handle->LpVtbl[22]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "PushEmptyRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int PushEmptyRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int>)(handle->LpVtbl[23]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "PushCopyOfRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int PushCopyOfRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int>)(handle->LpVtbl[24]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "PushRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int PushRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(handle->LpVtbl[25]))(handle, pFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "PushRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int PushRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(handle->LpVtbl[25]))(handle, (D3D11InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "PopRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PopRetrievalFilter(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(handle->LpVtbl[26]))(handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetRetrievalFilterStackSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetRetrievalFilterStackSize(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, uint>)(handle->LpVtbl[27]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddMessage")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int AddMessage(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "Category")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_CATEGORY")] D3D11MessageCategory category, [NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY")] D3D11MessageSeverity severity, [NativeName(NativeNameType.Param, "ID")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_ID")] D3D11MessageId id, [NativeName(NativeNameType.Param, "pDescription")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pDescription) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageCategory, D3D11MessageSeverity, D3D11MessageId, byte*, int>)(handle->LpVtbl[28]))(handle, category, severity, id, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddMessage")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int AddMessage(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "Category")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_CATEGORY")] D3D11MessageCategory category, [NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY")] D3D11MessageSeverity severity, [NativeName(NativeNameType.Param, "ID")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_ID")] D3D11MessageId id, [NativeName(NativeNameType.Param, "pDescription")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pDescription) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (byte* ppDescription = pDescription)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageCategory, D3D11MessageSeverity, D3D11MessageId, byte*, int>)(handle->LpVtbl[28]))(handle, category, severity, id, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddMessage")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int AddMessage(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "Category")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_CATEGORY")] D3D11MessageCategory category, [NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY")] D3D11MessageSeverity severity, [NativeName(NativeNameType.Param, "ID")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_ID")] D3D11MessageId id, [NativeName(NativeNameType.Param, "pDescription")] [NativeName(NativeNameType.Type, "LPCSTR")] string pDescription) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageCategory, D3D11MessageSeverity, D3D11MessageId, byte*, int>)(handle->LpVtbl[28]))(handle, category, severity, id, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddApplicationMessage")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int AddApplicationMessage(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY")] D3D11MessageSeverity severity, [NativeName(NativeNameType.Param, "pDescription")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pDescription) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageSeverity, byte*, int>)(handle->LpVtbl[29]))(handle, severity, pDescription);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddApplicationMessage")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int AddApplicationMessage(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY")] D3D11MessageSeverity severity, [NativeName(NativeNameType.Param, "pDescription")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pDescription) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			fixed (byte* ppDescription = pDescription)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageSeverity, byte*, int>)(handle->LpVtbl[29]))(handle, severity, (byte*)ppDescription);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddApplicationMessage")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int AddApplicationMessage(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY")] D3D11MessageSeverity severity, [NativeName(NativeNameType.Param, "pDescription")] [NativeName(NativeNameType.Type, "LPCSTR")] string pDescription) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageSeverity, byte*, int>)(handle->LpVtbl[29]))(handle, severity, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetBreakOnCategory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int SetBreakOnCategory(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "Category")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_CATEGORY")] D3D11MessageCategory category, [NativeName(NativeNameType.Param, "bEnable")] [NativeName(NativeNameType.Type, "BOOL")] int bEnable) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageCategory, int, int>)(handle->LpVtbl[30]))(handle, category, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetBreakOnSeverity")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int SetBreakOnSeverity(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY")] D3D11MessageSeverity severity, [NativeName(NativeNameType.Param, "bEnable")] [NativeName(NativeNameType.Type, "BOOL")] int bEnable) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageSeverity, int, int>)(handle->LpVtbl[31]))(handle, severity, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetBreakOnID")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int SetBreakOnID(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "ID")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_ID")] D3D11MessageId id, [NativeName(NativeNameType.Param, "bEnable")] [NativeName(NativeNameType.Type, "BOOL")] int bEnable) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageId, int, int>)(handle->LpVtbl[32]))(handle, id, bEnable);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBreakOnCategory")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public static int GetBreakOnCategory(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "Category")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_CATEGORY")] D3D11MessageCategory category) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageCategory, int>)(handle->LpVtbl[33]))(handle, category);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBreakOnSeverity")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public static int GetBreakOnSeverity(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY")] D3D11MessageSeverity severity) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageSeverity, int>)(handle->LpVtbl[34]))(handle, severity);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBreakOnID")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public static int GetBreakOnID(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "ID")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_ID")] D3D11MessageId id) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageId, int>)(handle->LpVtbl[35]))(handle, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "SetMuteDebugOutput")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetMuteDebugOutput(this ComPtr<ID3D11InfoQueue> comObj, [NativeName(NativeNameType.Param, "bMute")] [NativeName(NativeNameType.Type, "BOOL")] int bMute) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int, void>)(handle->LpVtbl[36]))(handle, bMute);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMuteDebugOutput")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public static int GetMuteDebugOutput(this ComPtr<ID3D11InfoQueue> comObj) 
		{
			ID3D11InfoQueue* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int>)(handle->LpVtbl[37]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_TYPE_DESC*")] D3D11ShaderTypeDesc* pDesc) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, D3D11ShaderTypeDesc*, int>)(*handle->LpVtbl))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_TYPE_DESC*")] ref D3D11ShaderTypeDesc pDesc) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			fixed (D3D11ShaderTypeDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, D3D11ShaderTypeDesc*, int>)(*handle->LpVtbl))(handle, (D3D11ShaderTypeDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMemberTypeByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public static ID3D11ShaderReflectionType* GetMemberTypeByIndex(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, ID3D11ShaderReflectionType*>)(handle->LpVtbl[1]))(handle, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMemberTypeByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public static ID3D11ShaderReflectionType* GetMemberTypeByName(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, byte*, ID3D11ShaderReflectionType*>)(handle->LpVtbl[2]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMemberTypeByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public static ID3D11ShaderReflectionType* GetMemberTypeByName(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> name) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, byte*, ID3D11ShaderReflectionType*>)(handle->LpVtbl[2]))(handle, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMemberTypeByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public static ID3D11ShaderReflectionType* GetMemberTypeByName(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] string name) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, byte*, ID3D11ShaderReflectionType*>)(handle->LpVtbl[2]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMemberTypeName")]
		[return: NativeName(NativeNameType.Type, "LPCSTR")]
		public static byte* GetMemberTypeName(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			byte* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, byte*>)(handle->LpVtbl[3]))(handle, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMemberTypeName")]
		[return: NativeName(NativeNameType.Type, "LPCSTR")]
		public static string GetMemberTypeNameS(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			string ret = Utils.DecodeStringUTF8(((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, byte*>)(handle->LpVtbl[3]))(handle, index));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsEqual")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int IsEqual(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ID3D11ShaderReflectionType* pType) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(handle->LpVtbl[4]))(handle, pType);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsEqual")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int IsEqual(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ref ID3D11ShaderReflectionType pType) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			fixed (ID3D11ShaderReflectionType* ppType = &pType)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(handle->LpVtbl[4]))(handle, (ID3D11ShaderReflectionType*)ppType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsEqual")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int IsEqual(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ComPtr<ID3D11ShaderReflectionType> pType) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(handle->LpVtbl[4]))(handle, (ID3D11ShaderReflectionType*)pType.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetSubType")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public static ID3D11ShaderReflectionType* GetSubType(this ComPtr<ID3D11ShaderReflectionType> comObj) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*>)(handle->LpVtbl[5]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBaseClass")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public static ID3D11ShaderReflectionType* GetBaseClass(this ComPtr<ID3D11ShaderReflectionType> comObj) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*>)(handle->LpVtbl[6]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetNumInterfaces")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetNumInterfaces(this ComPtr<ID3D11ShaderReflectionType> comObj) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint>)(handle->LpVtbl[7]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetInterfaceByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public static ID3D11ShaderReflectionType* GetInterfaceByIndex(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "uIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uIndex) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, ID3D11ShaderReflectionType*>)(handle->LpVtbl[8]))(handle, uIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsOfType")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int IsOfType(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ID3D11ShaderReflectionType* pType) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(handle->LpVtbl[9]))(handle, pType);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsOfType")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int IsOfType(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ref ID3D11ShaderReflectionType pType) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			fixed (ID3D11ShaderReflectionType* ppType = &pType)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(handle->LpVtbl[9]))(handle, (ID3D11ShaderReflectionType*)ppType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsOfType")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int IsOfType(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ComPtr<ID3D11ShaderReflectionType> pType) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(handle->LpVtbl[9]))(handle, (ID3D11ShaderReflectionType*)pType.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImplementsInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int ImplementsInterface(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "pBase")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ID3D11ShaderReflectionType* pBase) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(handle->LpVtbl[10]))(handle, pBase);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImplementsInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int ImplementsInterface(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "pBase")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ref ID3D11ShaderReflectionType pBase) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			fixed (ID3D11ShaderReflectionType* ppBase = &pBase)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(handle->LpVtbl[10]))(handle, (ID3D11ShaderReflectionType*)ppBase);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImplementsInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int ImplementsInterface(this ComPtr<ID3D11ShaderReflectionType> comObj, [NativeName(NativeNameType.Param, "pBase")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ComPtr<ID3D11ShaderReflectionType> pBase) 
		{
			ID3D11ShaderReflectionType* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(handle->LpVtbl[10]))(handle, (ID3D11ShaderReflectionType*)pBase.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11ShaderReflectionVariable> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_VARIABLE_DESC*")] D3D11ShaderVariableDesc* pDesc) 
		{
			ID3D11ShaderReflectionVariable* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, D3D11ShaderVariableDesc*, int>)(*handle->LpVtbl))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11ShaderReflectionVariable> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_VARIABLE_DESC*")] ref D3D11ShaderVariableDesc pDesc) 
		{
			ID3D11ShaderReflectionVariable* handle = comObj.Handle;
			fixed (D3D11ShaderVariableDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, D3D11ShaderVariableDesc*, int>)(*handle->LpVtbl))(handle, (D3D11ShaderVariableDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetType")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public static ID3D11ShaderReflectionType* GetType(this ComPtr<ID3D11ShaderReflectionVariable> comObj) 
		{
			ID3D11ShaderReflectionVariable* handle = comObj.Handle;
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, ID3D11ShaderReflectionType*>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBuffer")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionConstantBuffer*")]
		public static ID3D11ShaderReflectionConstantBuffer* GetBuffer(this ComPtr<ID3D11ShaderReflectionVariable> comObj) 
		{
			ID3D11ShaderReflectionVariable* handle = comObj.Handle;
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetInterfaceSlot")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetInterfaceSlot(this ComPtr<ID3D11ShaderReflectionVariable> comObj, [NativeName(NativeNameType.Param, "uArrayIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uArrayIndex) 
		{
			ID3D11ShaderReflectionVariable* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, uint, uint>)(handle->LpVtbl[3]))(handle, uArrayIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11ShaderReflectionConstantBuffer> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_BUFFER_DESC*")] D3D11ShaderBufferDesc* pDesc) 
		{
			ID3D11ShaderReflectionConstantBuffer* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, D3D11ShaderBufferDesc*, int>)(*handle->LpVtbl))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11ShaderReflectionConstantBuffer> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_BUFFER_DESC*")] ref D3D11ShaderBufferDesc pDesc) 
		{
			ID3D11ShaderReflectionConstantBuffer* handle = comObj.Handle;
			fixed (D3D11ShaderBufferDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, D3D11ShaderBufferDesc*, int>)(*handle->LpVtbl))(handle, (D3D11ShaderBufferDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionVariable*")]
		public static ID3D11ShaderReflectionVariable* GetVariableByIndex(this ComPtr<ID3D11ShaderReflectionConstantBuffer> comObj, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index) 
		{
			ID3D11ShaderReflectionConstantBuffer* handle = comObj.Handle;
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, uint, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[1]))(handle, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionVariable*")]
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11ShaderReflectionConstantBuffer> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name) 
		{
			ID3D11ShaderReflectionConstantBuffer* handle = comObj.Handle;
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[2]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionVariable*")]
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11ShaderReflectionConstantBuffer> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> name) 
		{
			ID3D11ShaderReflectionConstantBuffer* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[2]))(handle, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionVariable*")]
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11ShaderReflectionConstantBuffer> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] string name) 
		{
			ID3D11ShaderReflectionConstantBuffer* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[2]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface<T>(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface<T>(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public static uint AddRef(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public static uint Release(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (void** pppv = &ppv)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_DESC*")] D3D11ShaderDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3D11ShaderDesc*, int>)(handle->LpVtbl[4]))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_DESC*")] ref D3D11ShaderDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (D3D11ShaderDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3D11ShaderDesc*, int>)(handle->LpVtbl[4]))(handle, (D3D11ShaderDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetConstantBufferByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionConstantBuffer*")]
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByIndex(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[5]))(handle, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetConstantBufferByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionConstantBuffer*")]
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[6]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetConstantBufferByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionConstantBuffer*")]
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> name) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[6]))(handle, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetConstantBufferByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionConstantBuffer*")]
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] string name) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[6]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDesc(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "ResourceIndex")] [NativeName(NativeNameType.Type, "UINT")] uint resourceIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] D3D11ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[7]))(handle, resourceIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDesc(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "ResourceIndex")] [NativeName(NativeNameType.Type, "UINT")] uint resourceIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] ref D3D11ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (D3D11ShaderInputBindDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[7]))(handle, resourceIndex, (D3D11ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetInputParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetInputParameterDesc(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SIGNATURE_PARAMETER_DESC*")] D3D11SignatureParameterDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, int>)(handle->LpVtbl[8]))(handle, parameterIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetInputParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetInputParameterDesc(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SIGNATURE_PARAMETER_DESC*")] ref D3D11SignatureParameterDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (D3D11SignatureParameterDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, int>)(handle->LpVtbl[8]))(handle, parameterIndex, (D3D11SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetOutputParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetOutputParameterDesc(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SIGNATURE_PARAMETER_DESC*")] D3D11SignatureParameterDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, int>)(handle->LpVtbl[9]))(handle, parameterIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetOutputParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetOutputParameterDesc(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SIGNATURE_PARAMETER_DESC*")] ref D3D11SignatureParameterDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (D3D11SignatureParameterDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, int>)(handle->LpVtbl[9]))(handle, parameterIndex, (D3D11SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPatchConstantParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetPatchConstantParameterDesc(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SIGNATURE_PARAMETER_DESC*")] D3D11SignatureParameterDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, int>)(handle->LpVtbl[10]))(handle, parameterIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetPatchConstantParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetPatchConstantParameterDesc(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SIGNATURE_PARAMETER_DESC*")] ref D3D11SignatureParameterDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (D3D11SignatureParameterDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, int>)(handle->LpVtbl[10]))(handle, parameterIndex, (D3D11SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionVariable*")]
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[11]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionVariable*")]
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> name) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[11]))(handle, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionVariable*")]
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] string name) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[11]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDescByName(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] D3D11ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[12]))(handle, name, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDescByName(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] D3D11ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[12]))(handle, (byte*)pname, pDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDescByName(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] string name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] D3D11ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[12]))(handle, pStr0, pDesc);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDescByName(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] ref D3D11ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (D3D11ShaderInputBindDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[12]))(handle, name, (D3D11ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDescByName(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] ref D3D11ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				fixed (D3D11ShaderInputBindDesc* ppDesc = &pDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[12]))(handle, (byte*)pname, (D3D11ShaderInputBindDesc*)ppDesc);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDescByName(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] string name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] ref D3D11ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (D3D11ShaderInputBindDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[12]))(handle, pStr0, (D3D11ShaderInputBindDesc*)ppDesc);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMovInstructionCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetMovInstructionCount(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[13]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMovcInstructionCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetMovcInstructionCount(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[14]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetConversionInstructionCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetConversionInstructionCount(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[15]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetBitwiseInstructionCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetBitwiseInstructionCount(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[16]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetGSInputPrimitive")]
		[return: NativeName(NativeNameType.Type, "D3D_PRIMITIVE")]
		public static D3DPrimitive GetGSInputPrimitive(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			D3DPrimitive ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3DPrimitive>)(handle->LpVtbl[17]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "IsSampleFrequencyShader")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public static int IsSampleFrequencyShader(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, int>)(handle->LpVtbl[18]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetNumInterfaceSlots")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetNumInterfaceSlots(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(handle->LpVtbl[19]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMinFeatureLevel")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetMinFeatureLevel(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "pLevel")] [NativeName(NativeNameType.Type, "D3D_FEATURE_LEVEL*")] D3DFeatureLevel* pLevel) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3DFeatureLevel*, int>)(handle->LpVtbl[20]))(handle, pLevel);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetMinFeatureLevel")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetMinFeatureLevel(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "pLevel")] [NativeName(NativeNameType.Type, "D3D_FEATURE_LEVEL*")] ref D3DFeatureLevel pLevel) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (D3DFeatureLevel* ppLevel = &pLevel)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3DFeatureLevel*, int>)(handle->LpVtbl[20]))(handle, (D3DFeatureLevel*)ppLevel);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, pSizeX, pSizeY, pSizeZ);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeX = &pSizeX)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, (uint*)ppSizeX, pSizeY, pSizeZ);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeY = &pSizeY)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, pSizeX, (uint*)ppSizeY, pSizeZ);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeY = &pSizeY)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, (uint*)ppSizeX, (uint*)ppSizeY, pSizeZ);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeZ = &pSizeZ)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, pSizeX, pSizeY, (uint*)ppSizeZ);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeZ = &pSizeZ)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, (uint*)ppSizeX, pSizeY, (uint*)ppSizeZ);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeY = &pSizeY)
			{
				fixed (uint* ppSizeZ = &pSizeZ)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, pSizeX, (uint*)ppSizeY, (uint*)ppSizeZ);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public static uint GetThreadGroupSize(this ComPtr<ID3D11ShaderReflection> comObj, [NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeY = &pSizeY)
				{
					fixed (uint* ppSizeZ = &pSizeZ)
					{
						uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(handle->LpVtbl[21]))(handle, (uint*)ppSizeX, (uint*)ppSizeY, (uint*)ppSizeZ);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetRequiresFlags")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public static ulong GetRequiresFlags(this ComPtr<ID3D11ShaderReflection> comObj) 
		{
			ID3D11ShaderReflection* handle = comObj.Handle;
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, ulong>)(handle->LpVtbl[22]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11LibraryReflection> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11LibraryReflection> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface<T>(this ComPtr<ID3D11LibraryReflection> comObj, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface<T>(this ComPtr<ID3D11LibraryReflection> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public static uint AddRef(this ComPtr<ID3D11LibraryReflection> comObj) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public static uint Release(this ComPtr<ID3D11LibraryReflection> comObj) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11LibraryReflection> comObj, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			fixed (void** pppv = &ppv)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11LibraryReflection> comObj, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11LibraryReflection> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_LIBRARY_DESC*")] D3D11LibraryDesc* pDesc) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, D3D11LibraryDesc*, int>)(handle->LpVtbl[4]))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11LibraryReflection> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_LIBRARY_DESC*")] ref D3D11LibraryDesc pDesc) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			fixed (D3D11LibraryDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, D3D11LibraryDesc*, int>)(handle->LpVtbl[4]))(handle, (D3D11LibraryDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetFunctionByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D11FunctionReflection*")]
		public static ID3D11FunctionReflection* GetFunctionByIndex(this ComPtr<ID3D11LibraryReflection> comObj, [NativeName(NativeNameType.Param, "FunctionIndex")] [NativeName(NativeNameType.Type, "INT")] int functionIndex) 
		{
			ID3D11LibraryReflection* handle = comObj.Handle;
			ID3D11FunctionReflection* ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, int, ID3D11FunctionReflection*>)(handle->LpVtbl[5]))(handle, functionIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_FUNCTION_DESC*")] D3D11FunctionDesc* pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, D3D11FunctionDesc*, int>)(*handle->LpVtbl))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_FUNCTION_DESC*")] ref D3D11FunctionDesc pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (D3D11FunctionDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, D3D11FunctionDesc*, int>)(*handle->LpVtbl))(handle, (D3D11FunctionDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetConstantBufferByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionConstantBuffer*")]
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByIndex(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "BufferIndex")] [NativeName(NativeNameType.Type, "UINT")] uint bufferIndex) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, uint, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[1]))(handle, bufferIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetConstantBufferByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionConstantBuffer*")]
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[2]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetConstantBufferByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionConstantBuffer*")]
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> name) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[2]))(handle, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetConstantBufferByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionConstantBuffer*")]
		public static ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] string name) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(handle->LpVtbl[2]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDesc(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "ResourceIndex")] [NativeName(NativeNameType.Type, "UINT")] uint resourceIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] D3D11ShaderInputBindDesc* pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, uint, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[3]))(handle, resourceIndex, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDesc(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "ResourceIndex")] [NativeName(NativeNameType.Type, "UINT")] uint resourceIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] ref D3D11ShaderInputBindDesc pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (D3D11ShaderInputBindDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, uint, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[3]))(handle, resourceIndex, (D3D11ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionVariable*")]
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[4]))(handle, name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionVariable*")]
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> name) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[4]))(handle, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionVariable*")]
		public static ID3D11ShaderReflectionVariable* GetVariableByName(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] string name) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, ID3D11ShaderReflectionVariable*>)(handle->LpVtbl[4]))(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDescByName(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] D3D11ShaderInputBindDesc* pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[5]))(handle, name, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDescByName(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] D3D11ShaderInputBindDesc* pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[5]))(handle, (byte*)pname, pDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDescByName(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] string name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] D3D11ShaderInputBindDesc* pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[5]))(handle, pStr0, pDesc);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDescByName(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] ref D3D11ShaderInputBindDesc pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (D3D11ShaderInputBindDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[5]))(handle, name, (D3D11ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDescByName(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] ref D3D11ShaderInputBindDesc pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			fixed (byte* pname = name)
			{
				fixed (D3D11ShaderInputBindDesc* ppDesc = &pDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[5]))(handle, (byte*)pname, (D3D11ShaderInputBindDesc*)ppDesc);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetResourceBindingDescByName(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] string name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] ref D3D11ShaderInputBindDesc pDesc) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (D3D11ShaderInputBindDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(handle->LpVtbl[5]))(handle, pStr0, (D3D11ShaderInputBindDesc*)ppDesc);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetFunctionParameter")]
		[return: NativeName(NativeNameType.Type, "ID3D11FunctionParameterReflection*")]
		public static ID3D11FunctionParameterReflection* GetFunctionParameter(this ComPtr<ID3D11FunctionReflection> comObj, [NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "INT")] int parameterIndex) 
		{
			ID3D11FunctionReflection* handle = comObj.Handle;
			ID3D11FunctionParameterReflection* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, int, ID3D11FunctionParameterReflection*>)(handle->LpVtbl[6]))(handle, parameterIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11FunctionParameterReflection> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_PARAMETER_DESC*")] D3D11ParameterDesc* pDesc) 
		{
			ID3D11FunctionParameterReflection* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionParameterReflection*, D3D11ParameterDesc*, int>)(*handle->LpVtbl))(handle, pDesc);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDesc(this ComPtr<ID3D11FunctionParameterReflection> comObj, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_PARAMETER_DESC*")] ref D3D11ParameterDesc pDesc) 
		{
			ID3D11FunctionParameterReflection* handle = comObj.Handle;
			fixed (D3D11ParameterDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionParameterReflection*, D3D11ParameterDesc*, int>)(*handle->LpVtbl))(handle, (D3D11ParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface<T>(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface<T>(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public static uint AddRef(this ComPtr<ID3D11ModuleInstance> comObj) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public static uint Release(this ComPtr<ID3D11ModuleInstance> comObj) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (void** pppv = &ppv)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindConstantBuffer")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindConstantBuffer(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "uSrcSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uSrcSlot, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "cbDstOffset")] [NativeName(NativeNameType.Type, "UINT")] uint cbDstOffset) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, int>)(handle->LpVtbl[4]))(handle, uSrcSlot, uDstSlot, cbDstOffset);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindConstantBufferByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindConstantBufferByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pName, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "cbDstOffset")] [NativeName(NativeNameType.Type, "UINT")] uint cbDstOffset) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[5]))(handle, pName, uDstSlot, cbDstOffset);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindConstantBufferByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindConstantBufferByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pName, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "cbDstOffset")] [NativeName(NativeNameType.Type, "UINT")] uint cbDstOffset) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (byte* ppName = pName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[5]))(handle, (byte*)ppName, uDstSlot, cbDstOffset);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindConstantBufferByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindConstantBufferByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pName, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "cbDstOffset")] [NativeName(NativeNameType.Type, "UINT")] uint cbDstOffset) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[5]))(handle, pStr0, uDstSlot, cbDstOffset);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindResource(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "uSrcSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uSrcSlot, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, int>)(handle->LpVtbl[6]))(handle, uSrcSlot, uDstSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindResourceByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindResourceByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pName, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[7]))(handle, pName, uDstSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindResourceByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindResourceByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pName, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (byte* ppName = pName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[7]))(handle, (byte*)ppName, uDstSlot, uCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindResourceByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindResourceByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pName, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[7]))(handle, pStr0, uDstSlot, uCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindSampler")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindSampler(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "uSrcSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uSrcSlot, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, int>)(handle->LpVtbl[8]))(handle, uSrcSlot, uDstSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindSamplerByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindSamplerByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pName, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[9]))(handle, pName, uDstSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindSamplerByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindSamplerByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pName, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (byte* ppName = pName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[9]))(handle, (byte*)ppName, uDstSlot, uCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindSamplerByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindSamplerByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pName, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[9]))(handle, pStr0, uDstSlot, uCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindUnorderedAccessView(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "uSrcSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uSrcSlot, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, int>)(handle->LpVtbl[10]))(handle, uSrcSlot, uDstSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindUnorderedAccessViewByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindUnorderedAccessViewByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pName, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[11]))(handle, pName, uDstSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindUnorderedAccessViewByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindUnorderedAccessViewByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pName, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (byte* ppName = pName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[11]))(handle, (byte*)ppName, uDstSlot, uCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindUnorderedAccessViewByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindUnorderedAccessViewByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pName, [NativeName(NativeNameType.Param, "uDstSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[11]))(handle, pStr0, uDstSlot, uCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindResourceAsUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindResourceAsUnorderedAccessView(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "uSrcSrvSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uSrcSrvSlot, [NativeName(NativeNameType.Param, "uDstUavSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstUavSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, int>)(handle->LpVtbl[12]))(handle, uSrcSrvSlot, uDstUavSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindResourceAsUnorderedAccessViewByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindResourceAsUnorderedAccessViewByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pSrvName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSrvName, [NativeName(NativeNameType.Param, "uDstUavSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstUavSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[13]))(handle, pSrvName, uDstUavSlot, uCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindResourceAsUnorderedAccessViewByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindResourceAsUnorderedAccessViewByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pSrvName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSrvName, [NativeName(NativeNameType.Param, "uDstUavSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstUavSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			fixed (byte* ppSrvName = pSrvName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[13]))(handle, (byte*)ppSrvName, uDstUavSlot, uCount);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "BindResourceAsUnorderedAccessViewByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int BindResourceAsUnorderedAccessViewByName(this ComPtr<ID3D11ModuleInstance> comObj, [NativeName(NativeNameType.Param, "pSrvName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSrvName, [NativeName(NativeNameType.Param, "uDstUavSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uDstUavSlot, [NativeName(NativeNameType.Param, "uCount")] [NativeName(NativeNameType.Type, "UINT")] uint uCount) 
		{
			ID3D11ModuleInstance* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSrvName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSrvName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSrvName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, int>)(handle->LpVtbl[13]))(handle, pStr0, uDstUavSlot, uCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11Module> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11Module* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11Module> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface<T>(this ComPtr<ID3D11Module> comObj, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Module* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface<T>(this ComPtr<ID3D11Module> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public static uint AddRef(this ComPtr<ID3D11Module> comObj) 
		{
			ID3D11Module* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public static uint Release(this ComPtr<ID3D11Module> comObj) 
		{
			ID3D11Module* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11Module> comObj, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (void** pppv = &ppv)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11Module> comObj, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, [NativeName(NativeNameType.Param, "pNamespace")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pNamespace, [NativeName(NativeNameType.Param, "ppModuleInstance")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance**")] ID3D11ModuleInstance** ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, pNamespace, ppModuleInstance);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, [NativeName(NativeNameType.Param, "pNamespace")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pNamespace, [NativeName(NativeNameType.Param, "ppModuleInstance")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance**")] ID3D11ModuleInstance** ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (byte* ppNamespace = pNamespace)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, (byte*)ppNamespace, ppModuleInstance);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, [NativeName(NativeNameType.Param, "pNamespace")] [NativeName(NativeNameType.Type, "LPCSTR")] string pNamespace, [NativeName(NativeNameType.Param, "ppModuleInstance")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance**")] ID3D11ModuleInstance** ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, pStr0, ppModuleInstance);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, [NativeName(NativeNameType.Param, "pNamespace")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pNamespace, [NativeName(NativeNameType.Param, "ppModuleInstance")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance**")] ref ID3D11ModuleInstance* ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance** pppModuleInstance = &ppModuleInstance)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, pNamespace, (ID3D11ModuleInstance**)pppModuleInstance);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, [NativeName(NativeNameType.Param, "pNamespace")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pNamespace, [NativeName(NativeNameType.Param, "ppModuleInstance")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance**")] out ComPtr<ID3D11ModuleInstance> ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			ppModuleInstance = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, pNamespace, (ID3D11ModuleInstance**)ppModuleInstance.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, [NativeName(NativeNameType.Param, "pNamespace")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pNamespace, [NativeName(NativeNameType.Param, "ppModuleInstance")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance**")] ref ID3D11ModuleInstance* ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			fixed (byte* ppNamespace = pNamespace)
			{
				fixed (ID3D11ModuleInstance** pppModuleInstance = &ppModuleInstance)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, (byte*)ppNamespace, (ID3D11ModuleInstance**)pppModuleInstance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "CreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateInstance(this ComPtr<ID3D11Module> comObj, [NativeName(NativeNameType.Param, "pNamespace")] [NativeName(NativeNameType.Type, "LPCSTR")] string pNamespace, [NativeName(NativeNameType.Param, "ppModuleInstance")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance**")] ref ID3D11ModuleInstance* ppModuleInstance) 
		{
			ID3D11Module* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pNamespace != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pNamespace);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pNamespace, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D11ModuleInstance** pppModuleInstance = &ppModuleInstance)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, int>)(handle->LpVtbl[4]))(handle, pStr0, (ID3D11ModuleInstance**)pppModuleInstance);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11Linker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface<T>(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Linker* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface<T>(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public static uint AddRef(this ComPtr<ID3D11Linker> comObj) 
		{
			ID3D11Linker* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public static uint Release(this ComPtr<ID3D11Linker> comObj) 
		{
			ID3D11Linker* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (void** pppv = &ppv)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ComPtr<ID3D11ModuleInstance> pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)pEntry.Handle, pEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppTargetName = pTargetName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pStr0, uFlags, ppShaderBlob, ppErrorBuffer);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pStr0, uFlags, ppShaderBlob, ppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pStr1, uFlags, ppShaderBlob, ppErrorBuffer);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (byte* ppTargetName = pTargetName)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pStr1, uFlags, ppShaderBlob, ppErrorBuffer);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ComPtr<ID3D11ModuleInstance> pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)pEntry.Handle, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppTargetName = pTargetName)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pStr0, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pStr0, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pStr1, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (byte* ppTargetName = pTargetName)
					{
						fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pStr1, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ComPtr<ID3D11ModuleInstance> pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)pEntry.Handle, pEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppTargetName = pTargetName)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pStr0, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pStr0, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pStr1, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (byte* ppTargetName = pTargetName)
					{
						fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pStr1, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ComPtr<ID3D11ModuleInstance> pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)pEntry.Handle, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppTargetName = pTargetName)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTargetName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pEntryName, pStr0, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTargetName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTargetName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pEntryName, pStr0, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (byte* ppEntryName = pEntryName)
			{
				fixed (byte* ppTargetName = pTargetName)
				{
					fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
					{
						fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTargetName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, pEntry, pStr0, pStr1, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (byte* ppEntryName = pEntryName)
				{
					fixed (byte* ppTargetName = pTargetName)
					{
						fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
						{
							fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, (byte*)ppEntryName, (byte*)ppTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Link")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Link(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pEntry")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pEntry, [NativeName(NativeNameType.Param, "pEntryName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntryName, [NativeName(NativeNameType.Param, "pTargetName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTargetName, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaderBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaderBlob, [NativeName(NativeNameType.Param, "ppErrorBuffer")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorBuffer) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntryName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntryName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntryName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTargetName != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTargetName);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTargetName, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, int>)(handle->LpVtbl[4]))(handle, (ID3D11ModuleInstance*)ppEntry, pStr0, pStr1, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "UseLibrary")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int UseLibrary(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pLibraryMI")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ID3D11ModuleInstance* pLibraryMI) 
		{
			ID3D11Linker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, int>)(handle->LpVtbl[5]))(handle, pLibraryMI);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "UseLibrary")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int UseLibrary(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pLibraryMI")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ref ID3D11ModuleInstance pLibraryMI) 
		{
			ID3D11Linker* handle = comObj.Handle;
			fixed (ID3D11ModuleInstance* ppLibraryMI = &pLibraryMI)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, int>)(handle->LpVtbl[5]))(handle, (ID3D11ModuleInstance*)ppLibraryMI);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "UseLibrary")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int UseLibrary(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "pLibraryMI")] [NativeName(NativeNameType.Type, "ID3D11ModuleInstance*")] ComPtr<ID3D11ModuleInstance> pLibraryMI) 
		{
			ID3D11Linker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, int>)(handle->LpVtbl[5]))(handle, (ID3D11ModuleInstance*)pLibraryMI.Handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddClipPlaneFromCBuffer")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int AddClipPlaneFromCBuffer(this ComPtr<ID3D11Linker> comObj, [NativeName(NativeNameType.Param, "uCBufferSlot")] [NativeName(NativeNameType.Type, "UINT")] uint uCBufferSlot, [NativeName(NativeNameType.Param, "uCBufferEntry")] [NativeName(NativeNameType.Type, "UINT")] uint uCBufferEntry) 
		{
			ID3D11Linker* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, uint, uint, int>)(handle->LpVtbl[6]))(handle, uCBufferSlot, uCBufferEntry);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11LinkingNode> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11LinkingNode> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface<T>(this ComPtr<ID3D11LinkingNode> comObj, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface<T>(this ComPtr<ID3D11LinkingNode> comObj, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public static uint AddRef(this ComPtr<ID3D11LinkingNode> comObj) 
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public static uint Release(this ComPtr<ID3D11LinkingNode> comObj) 
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int QueryInterface(this ComPtr<ID3D11LinkingNode> comObj, [NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11LinkingNode* handle = comObj.Handle;
			fixed (void** pppv = &ppv)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LinkingNode*, Guid*, void**, int>)(handle->LpVtbl[3]))(handle, iid, (void**)pppv);
				return ret;
			}
		}
	}
}
