// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	public static unsafe partial class Extensions
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (byte* pszUnits = szUnits)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szUnits != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (byte* pszName = szName)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szUnits != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szUnits);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (byte* pszUnits = szUnits)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szUnits != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szUnits != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szUnits != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (szUnits != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(szUnits, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, pStr0, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (byte* pszName = szName)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszUnits = szUnits)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szUnits != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szUnits);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszUnits = szUnits)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szUnits != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szUnits);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (byte* pszUnits = szUnits)
							{
								fixed (uint* ppUnitsLength = &pUnitsLength)
								{
									fixed (uint* ppDescriptionLength = &pDescriptionLength)
									{
										int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szUnits != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szUnits);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr1);
								}
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, ref uint pNameLength, ReadOnlySpan<byte> szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (uint* ppNameLength = &pNameLength)
							{
								fixed (byte* pszUnits = szUnits)
								{
									fixed (uint* ppUnitsLength = &pUnitsLength)
									{
										fixed (uint* ppDescriptionLength = &pDescriptionLength)
										{
											int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, (uint*)ppNameLength, (byte*)pszUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppNameLength = &pNameLength)
						{
							byte* pStr1 = null;
							int pStrSize1 = 0;
							if (szUnits != null)
							{
								pStrSize1 = Utils.GetByteCountUTF8(szUnits);
								if (pStrSize1 >= Utils.MaxStackallocSize)
								{
									pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
								}
								else
								{
									byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
									pStr1 = pStrStack1;
								}
								int pStrOffset1 = Utils.EncodeStringUTF8(szUnits, pStr1, pStrSize1);
								pStr1[pStrOffset1] = 0;
							}
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, (uint*)ppNameLength, pStr1, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									if (pStrSize1 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr1);
									}
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										Utils.Free(pStr0);
									}
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (byte* pszDescription = szDescription)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppDescriptionLength = &pDescriptionLength)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszDescription = szDescription)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszDescription = szDescription)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszDescription = szDescription)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (byte* pszName = szName)
			{
				fixed (byte* pszDescription = szDescription)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (szDescription != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(szDescription);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (uint* ppDescriptionLength = &pDescriptionLength)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (byte* pszName = szName)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (szDescription != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (byte* pszName = szName)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szName != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szName);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (szDescription != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ReadOnlySpan<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (byte* pszName = szName)
						{
							fixed (byte* pszDescription = szDescription)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, (byte*)pszName, pNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szName != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szName);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szName, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						byte* pStr1 = null;
						int pStrSize1 = 0;
						if (szDescription != null)
						{
							pStrSize1 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
							}
							else
							{
								byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
								pStr1 = pStrStack1;
							}
							int pStrOffset1 = Utils.EncodeStringUTF8(szDescription, pStr1, pStrSize1);
							pStr1[pStrOffset1] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, (uint*)ppActiveCounters, pStr0, pNameLength, szUnits, pUnitsLength, pStr1, (uint*)ppDescriptionLength);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (byte* pszDescription = szDescription)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppNameLength = &pNameLength)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (szDescription != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(szDescription);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (byte* pszDescription = szDescription)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, ref CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (CounterDesc* ppDesc = &pDesc)
			{
				fixed (CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (szDescription != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(szDescription);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, (CounterDesc*)ppDesc, (CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ReadOnlySpan<byte> szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (byte* pszDescription = szDescription)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, (byte*)pszDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int CheckCounter(this ComPtr<ID3D11Device> comObj, CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, string szDescription, ref uint pDescriptionLength) 
		{
			ID3D11Device* handle = comObj.Handle;
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (szDescription != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(szDescription);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(szDescription, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)(handle->LpVtbl[32]))(handle, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, pStr0, (uint*)ppDescriptionLength);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}
	}
}
