// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	public unsafe partial class D3D11
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static HResult CreateDeviceNative(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<IDXGIAdapter*, DriverType, nint, uint, FeatureLevel*, uint, uint, ID3D11Device**, FeatureLevel*, ID3D11DeviceContext**, HResult>)funcTable[0])(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, ppImmediateContext);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, DriverType, nint, uint, nint, uint, uint, nint, nint, nint, HResult>)funcTable[0])((nint)pAdapter, driverType, software, flags, (nint)pFeatureLevels, featureLevels, sdkVersion, (nint)ppDevice, (nint)pFeatureLevel, (nint)ppImmediateContext);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, ppImmediateContext);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, ppImmediateContext);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
			{
				HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			ppImmediateContext = default;
			HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			ppImmediateContext = default;
			HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDevice(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static HResult CreateDeviceAndSwapChainNative(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<IDXGIAdapter*, DriverType, nint, uint, FeatureLevel*, uint, uint, SwapChainDesc*, IDXGISwapChain**, ID3D11Device**, FeatureLevel*, ID3D11DeviceContext**, HResult>)funcTable[1])(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
			#else
			return (HResult)((delegate* unmanaged[Cdecl]<nint, DriverType, nint, uint, nint, uint, uint, nint, nint, nint, nint, nint, HResult>)funcTable[1])((nint)pAdapter, driverType, software, flags, (nint)pFeatureLevels, featureLevels, sdkVersion, (nint)pSwapChainDesc, (nint)ppSwapChain, (nint)ppDevice, (nint)pFeatureLevel, (nint)ppImmediateContext);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							fixed (ID3D11Device** pppDevice = &ppDevice)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							fixed (ID3D11Device** pppDevice = &ppDevice)
							{
								fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
								{
									HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
			{
				HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			ppImmediateContext = default;
			HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			ppImmediateContext = default;
			HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							ppImmediateContext = default;
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, FeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							fixed (ID3D11Device** pppDevice = &ppDevice)
							{
								fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
								{
									HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, FeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							ppImmediateContext = default;
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				ppImmediateContext = default;
				HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							ppImmediateContext = default;
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
								{
									HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							ppImmediateContext = default;
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, DriverType driverType, nint software, uint flags, ref FeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, SwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (FeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.Handle, driverType, software, flags, (FeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref FeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, DriverType driverType, nint software, uint flags, FeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref SwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref FeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext)
		{
			fixed (SwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (FeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (SwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (FeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}
	}
}
