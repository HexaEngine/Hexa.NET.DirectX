// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace Hexa.NET.XAudio2
{
	/// <summary>
	/// XAUDIO2FX_REVERB_I3DL2_PARAMETERS: Parameter set compliant with the I3DL2 standard<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "XAUDIO2FX_REVERB_I3DL2_PARAMETERS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct XAudio2FxReverbI3Dl2Parameters
	{
		/// <summary>
		/// [0, 100] (percentage)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WetDryMix")]
		[NativeName(NativeNameType.Type, "float")]
		public float WetDryMix;

		/// <summary>
		/// [-10000, 0] in mB (hundredths of decibels)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Room")]
		[NativeName(NativeNameType.Type, "INT32")]
		public int Room;

		/// <summary>
		/// [-10000, 0] in mB (hundredths of decibels)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RoomHF")]
		[NativeName(NativeNameType.Type, "INT32")]
		public int RoomHF;

		/// <summary>
		/// [0.0, 10.0]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RoomRolloffFactor")]
		[NativeName(NativeNameType.Type, "float")]
		public float RoomRolloffFactor;

		/// <summary>
		/// [0.1, 20.0] in seconds<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DecayTime")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecayTime;

		/// <summary>
		/// [0.1, 2.0]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DecayHFRatio")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecayHFRatio;

		/// <summary>
		/// [-10000, 1000] in mB (hundredths of decibels)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Reflections")]
		[NativeName(NativeNameType.Type, "INT32")]
		public int Reflections;

		/// <summary>
		/// [0.0, 0.3] in seconds<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReflectionsDelay")]
		[NativeName(NativeNameType.Type, "float")]
		public float ReflectionsDelay;

		/// <summary>
		/// [-10000, 2000] in mB (hundredths of decibels)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Reverb")]
		[NativeName(NativeNameType.Type, "INT32")]
		public int Reverb;

		/// <summary>
		/// [0.0, 0.1] in seconds<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReverbDelay")]
		[NativeName(NativeNameType.Type, "float")]
		public float ReverbDelay;

		/// <summary>
		/// [0.0, 100.0] (percentage)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Diffusion")]
		[NativeName(NativeNameType.Type, "float")]
		public float Diffusion;

		/// <summary>
		/// [0.0, 100.0] (percentage)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Density")]
		[NativeName(NativeNameType.Type, "float")]
		public float Density;

		/// <summary>
		/// [20.0, 20000.0] in Hz<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HFReference")]
		[NativeName(NativeNameType.Type, "float")]
		public float HFReference;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe XAudio2FxReverbI3Dl2Parameters(float wetDryMix = default, int room = default, int roomHf = default, float roomRolloffFactor = default, float decayTime = default, float decayHfRatio = default, int reflections = default, float reflectionsDelay = default, int reverb = default, float reverbDelay = default, float diffusion = default, float density = default, float hfReference = default)
		{
			WetDryMix = wetDryMix;
			Room = room;
			RoomHF = roomHf;
			RoomRolloffFactor = roomRolloffFactor;
			DecayTime = decayTime;
			DecayHFRatio = decayHfRatio;
			Reflections = reflections;
			ReflectionsDelay = reflectionsDelay;
			Reverb = reverb;
			ReverbDelay = reverbDelay;
			Diffusion = diffusion;
			Density = density;
			HFReference = hfReference;
		}


	}

}
