// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace Hexa.NET.XAudio2
{
	/// <summary>
	/// Returned by IXAudio2SourceVoice::GetState<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "XAUDIO2_VOICE_STATE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct XAudio2VoiceState
	{
		/// <summary>
		/// The pContext value provided in the XAUDIO2_BUFFER<br/>
		/// that is currently being processed, or NULL if<br/>
		/// there are no buffers in the queue.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pCurrentBufferContext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PCurrentBufferContext;

		/// <summary>
		/// Number of buffers currently queued on the voice<br/>
		/// (including the one that is being processed).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BuffersQueued")]
		[NativeName(NativeNameType.Type, "UINT32")]
		public uint BuffersQueued;

		/// <summary>
		/// Total number of samples produced by the voice since<br/>
		/// it began processing the current audio stream.<br/>
		/// If XAUDIO2_VOICE_NOSAMPLESPLAYED is specified<br/>
		/// in the call to IXAudio2SourceVoice::GetState,<br/>
		/// this member will not be calculated, saving CPU.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SamplesPlayed")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong SamplesPlayed;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe XAudio2VoiceState(void* pCurrentBufferContext = default, uint buffersQueued = default, ulong samplesPlayed = default)
		{
			PCurrentBufferContext = pCurrentBufferContext;
			BuffersQueued = buffersQueued;
			SamplesPlayed = samplesPlayed;
		}


	}

}
