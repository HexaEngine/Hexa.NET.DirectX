// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace Hexa.NET.XAudio2
{
	/// <summary>
	/// XAUDIO2FX_REVERB_PARAMETERS: Native parameter set for the reverb effect<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "XAUDIO2FX_REVERB_PARAMETERS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct XAudio2FxReverbParameters
	{
		/// <summary>
		/// [0, 100] (percentage)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WetDryMix")]
		[NativeName(NativeNameType.Type, "float")]
		public float WetDryMix;

		/// <summary>
		/// [0, 300] in ms<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReflectionsDelay")]
		[NativeName(NativeNameType.Type, "UINT32")]
		public uint ReflectionsDelay;

		/// <summary>
		/// [0, 85] in ms<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReverbDelay")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte ReverbDelay;

		/// <summary>
		/// 7.1: [0, 20] in ms, all other: [0, 5] in ms<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RearDelay")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte RearDelay;

		/// <summary>
		/// 7.1: [0, 5] in ms, all other: not used, but still validated<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SideDelay")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte SideDelay;

		/// <summary>
		/// [0, 30] no units<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PositionLeft")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte PositionLeft;

		/// <summary>
		/// [0, 30] no units, ignored when configured to mono<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PositionRight")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte PositionRight;

		/// <summary>
		/// [0, 30] no units<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PositionMatrixLeft")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte PositionMatrixLeft;

		/// <summary>
		/// [0, 30] no units, ignored when configured to mono<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PositionMatrixRight")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte PositionMatrixRight;

		/// <summary>
		/// [0, 15] no units<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EarlyDiffusion")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte EarlyDiffusion;

		/// <summary>
		/// [0, 15] no units<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LateDiffusion")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte LateDiffusion;

		/// <summary>
		/// [0, 12] no units<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LowEQGain")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte LowEQGain;

		/// <summary>
		/// [0, 9] no units<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LowEQCutoff")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte LowEQCutoff;

		/// <summary>
		/// [0, 8] no units<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HighEQGain")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte HighEQGain;

		/// <summary>
		/// [0, 14] no units<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HighEQCutoff")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte HighEQCutoff;

		/// <summary>
		/// [20, 20000] in Hz<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RoomFilterFreq")]
		[NativeName(NativeNameType.Type, "float")]
		public float RoomFilterFreq;

		/// <summary>
		/// [-100, 0] in dB<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RoomFilterMain")]
		[NativeName(NativeNameType.Type, "float")]
		public float RoomFilterMain;

		/// <summary>
		/// [-100, 0] in dB<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RoomFilterHF")]
		[NativeName(NativeNameType.Type, "float")]
		public float RoomFilterHF;

		/// <summary>
		/// [-100, 20] in dB<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReflectionsGain")]
		[NativeName(NativeNameType.Type, "float")]
		public float ReflectionsGain;

		/// <summary>
		/// [-100, 20] in dB<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReverbGain")]
		[NativeName(NativeNameType.Type, "float")]
		public float ReverbGain;

		/// <summary>
		/// [0.1, inf] in seconds<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DecayTime")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecayTime;

		/// <summary>
		/// [0, 100] (percentage)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Density")]
		[NativeName(NativeNameType.Type, "float")]
		public float Density;

		/// <summary>
		/// [1, 100] in feet<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RoomSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float RoomSize;

		/// <summary>
		/// TRUE to disable late field reflections<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisableLateField")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DisableLateField;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe XAudio2FxReverbParameters(float wetDryMix = default, uint reflectionsDelay = default, byte reverbDelay = default, byte rearDelay = default, byte sideDelay = default, byte positionLeft = default, byte positionRight = default, byte positionMatrixLeft = default, byte positionMatrixRight = default, byte earlyDiffusion = default, byte lateDiffusion = default, byte lowEqGain = default, byte lowEqCutoff = default, byte highEqGain = default, byte highEqCutoff = default, float roomFilterFreq = default, float roomFilterMain = default, float roomFilterHf = default, float reflectionsGain = default, float reverbGain = default, float decayTime = default, float density = default, float roomSize = default, int disableLateField = default)
		{
			WetDryMix = wetDryMix;
			ReflectionsDelay = reflectionsDelay;
			ReverbDelay = reverbDelay;
			RearDelay = rearDelay;
			SideDelay = sideDelay;
			PositionLeft = positionLeft;
			PositionRight = positionRight;
			PositionMatrixLeft = positionMatrixLeft;
			PositionMatrixRight = positionMatrixRight;
			EarlyDiffusion = earlyDiffusion;
			LateDiffusion = lateDiffusion;
			LowEQGain = lowEqGain;
			LowEQCutoff = lowEqCutoff;
			HighEQGain = highEqGain;
			HighEQCutoff = highEqCutoff;
			RoomFilterFreq = roomFilterFreq;
			RoomFilterMain = roomFilterMain;
			RoomFilterHF = roomFilterHf;
			ReflectionsGain = reflectionsGain;
			ReverbGain = reverbGain;
			DecayTime = decayTime;
			Density = density;
			RoomSize = roomSize;
			DisableLateField = disableLateField;
		}


	}

}
