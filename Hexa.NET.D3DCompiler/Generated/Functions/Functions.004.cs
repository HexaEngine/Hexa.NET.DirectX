// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.D3DCommon;
using Hexa.NET.D3D11;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3DCompiler
{
	public unsafe partial class D3DCompiler
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (pTarget != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(pTarget, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr0, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppCode = &ppCode)
							{
								HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pTarget != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (byte* ppEntrypoint = pEntrypoint)
			{
				fixed (byte* ppTarget = pTarget)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntrypoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTarget != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, pStr0, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntrypoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (pTarget != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				HResult ret = CompileFromFileNative(pStr0, pDefines, pInclude, pStr1, pStr2, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntrypoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, pStr0, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppCode = &ppCode)
							{
								HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntrypoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (pTarget != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, pInclude, pStr1, pStr2, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntrypoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pStr0, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppCode = &ppCode)
							{
								HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntrypoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (pTarget != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					HResult ret = CompileFromFileNative(pStr0, pDefines, (ID3DInclude*)ppInclude, pStr1, pStr2, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppCode = &ppCode)
							{
								HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (pEntrypoint != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pTarget != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pStr0, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (byte* ppEntrypoint = pEntrypoint)
						{
							fixed (byte* ppTarget = pTarget)
							{
								fixed (ID3D10Blob** pppCode = &ppCode)
								{
									HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ID3D10Blob** ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pEntrypoint != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (pTarget != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pStr1, pStr2, flags1, flags2, (ID3D10Blob**)pppCode, ppErrorMsgs);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
			{
				HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, pInclude, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
			{
				HResult ret = CompileFromFileNative(pStr0, pDefines, pInclude, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ComPtr<ID3DInclude> pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
			{
				HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)pInclude.Handle, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pStr0, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ComPtr<ID3DInclude> pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)pInclude.Handle, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppEntrypoint = pEntrypoint)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntrypoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
			{
				HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, pStr0, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, pInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntrypoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
			{
				HResult ret = CompileFromFileNative(pStr0, pDefines, pInclude, pStr1, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntrypoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, pStr0, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, pInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntrypoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, pInclude, pStr1, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntrypoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pStr0, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntrypoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pStr0, pDefines, (ID3DInclude*)ppInclude, pStr1, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (pEntrypoint != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pStr0, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (byte* ppEntrypoint = pEntrypoint)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pEntrypoint != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pStr1, pTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppTarget = pTarget)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTarget != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTarget, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
			{
				HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, pEntrypoint, pStr0, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (byte* ppTarget = pTarget)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, pInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTarget != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
			{
				HResult ret = CompileFromFileNative(pStr0, pDefines, pInclude, pEntrypoint, pStr1, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (byte* ppTarget = pTarget)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTarget != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTarget, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, pStr0, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, pStr1, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (byte* ppTarget = pTarget)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTarget != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTarget, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr0, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pStr0, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr1, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (pTarget != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(pTarget, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr0, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pTarget != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr1, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppEntrypoint = pEntrypoint)
			{
				fixed (byte* ppTarget = pTarget)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntrypoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTarget != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
			{
				HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, pStr0, pStr1, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntrypoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (pTarget != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
			{
				HResult ret = CompileFromFileNative(pStr0, pDefines, pInclude, pStr1, pStr2, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntrypoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, pStr0, pStr1, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntrypoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (pTarget != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, pInclude, pStr1, pStr2, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntrypoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pStr0, pStr1, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntrypoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (pTarget != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pStr0, pDefines, (ID3DInclude*)ppInclude, pStr1, pStr2, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (pEntrypoint != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pTarget != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pStr0, pStr1, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (byte* ppEntrypoint = pEntrypoint)
						{
							fixed (byte* ppTarget = pTarget)
							{
								fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
								{
									HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ID3D10Blob** ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pEntrypoint != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (pTarget != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pStr1, pStr2, flags1, flags2, ppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, pInclude, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pStr0, pDefines, pInclude, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ComPtr<ID3DInclude> pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)pInclude.Handle, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pStr0, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ComPtr<ID3DInclude> pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)pInclude.Handle, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppEntrypoint = pEntrypoint)
			{
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntrypoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, pStr0, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, pInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntrypoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pStr0, pDefines, pInclude, pStr1, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntrypoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, pStr0, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, pInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntrypoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, pInclude, pStr1, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntrypoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pStr0, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntrypoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pStr0, pDefines, (ID3DInclude*)ppInclude, pStr1, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (pEntrypoint != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pStr0, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (byte* ppEntrypoint = pEntrypoint)
						{
							fixed (ID3D10Blob** pppCode = &ppCode)
							{
								fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
								{
									HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, string pEntrypoint, byte* pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pEntrypoint != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pStr1, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppTarget = pTarget)
			{
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTarget != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTarget, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, pEntrypoint, pStr0, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (byte* ppTarget = pTarget)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, pInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTarget != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pStr0, pDefines, pInclude, pEntrypoint, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (byte* ppTarget = pTarget)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTarget != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTarget, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, pStr0, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, pInclude, pEntrypoint, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (byte* ppTarget = pTarget)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTarget != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTarget, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr0, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pStr0, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (pTarget != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(pTarget, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr0, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppCode = &ppCode)
							{
								fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
								{
									HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ref ID3DInclude pInclude, byte* pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pTarget != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppEntrypoint = pEntrypoint)
			{
				fixed (byte* ppTarget = pTarget)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntrypoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTarget != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pFileName, pDefines, pInclude, pStr0, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ID3DInclude* pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntrypoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (pTarget != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					HResult ret = CompileFromFileNative(pStr0, pDefines, pInclude, pStr1, pStr2, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntrypoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, (ShaderMacro*)ppDefines, pInclude, pStr0, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ShaderMacro* ppDefines = &pDefines)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppCode = &ppCode)
							{
								fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
								{
									HResult ret = CompileFromFileNative((char*)ppFileName, (ShaderMacro*)ppDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ref ShaderMacro pDefines, ID3DInclude* pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntrypoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (pTarget != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pStr0, (ShaderMacro*)ppDefines, pInclude, pStr1, pStr2, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(char* pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntrypoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pStr0, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(ReadOnlySpan<char> pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, ReadOnlySpan<byte> pEntrypoint, ReadOnlySpan<byte> pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppCode = &ppCode)
							{
								fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
								{
									HResult ret = CompileFromFileNative((char*)ppFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult CompileFromFile(string pFileName, ShaderMacro* pDefines, ref ID3DInclude pInclude, string pEntrypoint, string pTarget, uint flags1, uint flags2, ref ID3D10Blob* ppCode, ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntrypoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (pTarget != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						HResult ret = CompileFromFileNative(pStr0, pDefines, (ID3DInclude*)ppInclude, pStr1, pStr2, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}
	}
}
