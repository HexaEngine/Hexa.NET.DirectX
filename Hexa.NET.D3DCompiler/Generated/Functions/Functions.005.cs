// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.D3DCommon;
using Hexa.NET.D3D11;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3DCompiler
{
	public unsafe partial class D3DCompiler
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntrypoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pStr0, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								int ret = CompileFromFileNative((char*)ppFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntrypoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = CompileFromFileNative(pStr0, pDefines, (ID3DInclude*)ppInclude, pStr1, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								int ret = CompileFromFileNative(pFileName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (pEntrypoint != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = CompileFromFileNative(pFileName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pStr0, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (D3DShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (byte* ppEntrypoint = pEntrypoint)
						{
							fixed (ID3D10Blob** pppCode = &ppCode)
							{
								fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
								{
									int ret = CompileFromFileNative((char*)ppFileName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pEntrypoint != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = CompileFromFileNative(pStr0, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pStr1, pTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppTarget = pTarget)
			{
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = CompileFromFileNative(pFileName, pDefines, pInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pTarget != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pTarget, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					int ret = CompileFromFileNative(pFileName, pDefines, pInclude, pEntrypoint, pStr0, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (byte* ppTarget = pTarget)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = CompileFromFileNative((char*)ppFileName, pDefines, pInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTarget != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					int ret = CompileFromFileNative(pStr0, pDefines, pInclude, pEntrypoint, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (byte* ppTarget = pTarget)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = CompileFromFileNative(pFileName, (D3DShaderMacro*)ppDefines, pInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTarget != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTarget, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = CompileFromFileNative(pFileName, (D3DShaderMacro*)ppDefines, pInclude, pEntrypoint, pStr0, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (D3DShaderMacro* ppDefines = &pDefines)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								int ret = CompileFromFileNative((char*)ppFileName, (D3DShaderMacro*)ppDefines, pInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = CompileFromFileNative(pStr0, (D3DShaderMacro*)ppDefines, pInclude, pEntrypoint, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (byte* ppTarget = pTarget)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pTarget != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pTarget, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr0, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								int ret = CompileFromFileNative((char*)ppFileName, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = CompileFromFileNative(pStr0, pDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								int ret = CompileFromFileNative(pFileName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (pTarget != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(pTarget, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = CompileFromFileNative(pFileName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr0, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (D3DShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppCode = &ppCode)
							{
								fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
								{
									int ret = CompileFromFileNative((char*)ppFileName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pTarget != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = CompileFromFileNative(pStr0, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pEntrypoint, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppEntrypoint = pEntrypoint)
			{
				fixed (byte* ppTarget = pTarget)
				{
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = CompileFromFileNative(pFileName, pDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntrypoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pTarget != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					int ret = CompileFromFileNative(pFileName, pDefines, pInclude, pStr0, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								int ret = CompileFromFileNative((char*)ppFileName, pDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pEntrypoint != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (pTarget != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(pTarget);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			fixed (ID3D10Blob** pppCode = &ppCode)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					int ret = CompileFromFileNative(pStr0, pDefines, pInclude, pStr1, pStr2, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								int ret = CompileFromFileNative(pFileName, (D3DShaderMacro*)ppDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntrypoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = CompileFromFileNative(pFileName, (D3DShaderMacro*)ppDefines, pInclude, pStr0, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (D3DShaderMacro* ppDefines = &pDefines)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppCode = &ppCode)
							{
								fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
								{
									int ret = CompileFromFileNative((char*)ppFileName, (D3DShaderMacro*)ppDefines, pInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntrypoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (pTarget != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = CompileFromFileNative(pStr0, (D3DShaderMacro*)ppDefines, pInclude, pStr1, pStr2, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (byte* ppEntrypoint = pEntrypoint)
				{
					fixed (byte* ppTarget = pTarget)
					{
						fixed (ID3D10Blob** pppCode = &ppCode)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								int ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (pEntrypoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pTarget != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = CompileFromFileNative(pFileName, pDefines, (ID3DInclude*)ppInclude, pStr0, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppCode = &ppCode)
							{
								fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
								{
									int ret = CompileFromFileNative((char*)ppFileName, pDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (pEntrypoint != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (pTarget != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(pTarget);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (ID3D10Blob** pppCode = &ppCode)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = CompileFromFileNative(pStr0, pDefines, (ID3DInclude*)ppInclude, pStr1, pStr2, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr2);
						}
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (byte* ppEntrypoint = pEntrypoint)
					{
						fixed (byte* ppTarget = pTarget)
						{
							fixed (ID3D10Blob** pppCode = &ppCode)
							{
								fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
								{
									int ret = CompileFromFileNative(pFileName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (pEntrypoint != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(pEntrypoint);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(pEntrypoint, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pTarget != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pTarget, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = CompileFromFileNative(pFileName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pStr0, pStr1, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] ReadOnlySpan<char> pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (char* ppFileName = pFileName)
			{
				fixed (D3DShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (byte* ppEntrypoint = pEntrypoint)
						{
							fixed (byte* ppTarget = pTarget)
							{
								fixed (ID3D10Blob** pppCode = &ppCode)
								{
									fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
									{
										int ret = CompileFromFileNative((char*)ppFileName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (byte*)ppEntrypoint, (byte*)ppTarget, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompileFromFile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompileFromFile([NativeName(NativeNameType.Param, "pFileName")] [NativeName(NativeNameType.Type, "LPCWSTR")] string pFileName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "pEntrypoint")] [NativeName(NativeNameType.Type, "LPCSTR")] string pEntrypoint, [NativeName(NativeNameType.Param, "pTarget")] [NativeName(NativeNameType.Type, "LPCSTR")] string pTarget, [NativeName(NativeNameType.Param, "Flags1")] [NativeName(NativeNameType.Type, "UINT")] uint flags1, [NativeName(NativeNameType.Param, "Flags2")] [NativeName(NativeNameType.Type, "UINT")] uint flags2, [NativeName(NativeNameType.Param, "ppCode")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCode, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (pEntrypoint != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(pEntrypoint);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(pEntrypoint, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte* pStr2 = null;
					int pStrSize2 = 0;
					if (pTarget != null)
					{
						pStrSize2 = Utils.GetByteCountUTF8(pTarget);
						if (pStrSize2 >= Utils.MaxStackallocSize)
						{
							pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
						}
						else
						{
							byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
							pStr2 = pStrStack2;
						}
						int pStrOffset2 = Utils.EncodeStringUTF8(pTarget, pStr2, pStrSize2);
						pStr2[pStrOffset2] = 0;
					}
					fixed (ID3D10Blob** pppCode = &ppCode)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = CompileFromFileNative(pStr0, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, pStr1, pStr2, flags1, flags2, (ID3D10Blob**)pppCode, (ID3D10Blob**)pppErrorMsgs);
							if (pStrSize2 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr2);
							}
							if (pStrSize1 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr1);
							}
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int PreprocessNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, byte*, D3DShaderMacro*, ID3DInclude*, ID3D10Blob**, ID3D10Blob**, int>)funcTable[5])(pSrcData, srcDataSize, pSourceName, pDefines, pInclude, ppCodeText, ppErrorMsgs);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, nint, nint, nint, nint, nint, int>)funcTable[5])((nint)pSrcData, srcDataSize, (nint)pSourceName, (nint)pDefines, (nint)pInclude, (nint)ppCodeText, (nint)ppErrorMsgs);
			#endif
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, pDefines, pInclude, ppCodeText, ppErrorMsgs);
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, pDefines, pInclude, ppCodeText, ppErrorMsgs);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, pDefines, pInclude, ppCodeText, ppErrorMsgs);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, (D3DShaderMacro*)ppDefines, pInclude, ppCodeText, ppErrorMsgs);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (D3DShaderMacro* ppDefines = &pDefines)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, (D3DShaderMacro*)ppDefines, pInclude, ppCodeText, ppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, (D3DShaderMacro*)ppDefines, pInclude, ppCodeText, ppErrorMsgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, pDefines, (ID3DInclude*)ppInclude, ppCodeText, ppErrorMsgs);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ComPtr<ID3DInclude> pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, pDefines, (ID3DInclude*)pInclude.GetAddressOf(), ppCodeText, ppErrorMsgs);
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, pDefines, (ID3DInclude*)ppInclude, ppCodeText, ppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, pDefines, (ID3DInclude*)ppInclude, ppCodeText, ppErrorMsgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, ppCodeText, ppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ComPtr<ID3DInclude> pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)pInclude.GetAddressOf(), ppCodeText, ppErrorMsgs);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (D3DShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, ppCodeText, ppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, ppCodeText, ppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (ID3D10Blob** pppCodeText = &ppCodeText)
			{
				int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, pDefines, pInclude, (ID3D10Blob**)pppCodeText, ppErrorMsgs);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (ID3D10Blob** pppCodeText = &ppCodeText)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, pDefines, pInclude, (ID3D10Blob**)pppCodeText, ppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppCodeText = &ppCodeText)
			{
				int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, pDefines, pInclude, (ID3D10Blob**)pppCodeText, ppErrorMsgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppCodeText = &ppCodeText)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, (D3DShaderMacro*)ppDefines, pInclude, (ID3D10Blob**)pppCodeText, ppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (D3DShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3D10Blob** pppCodeText = &ppCodeText)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, (D3DShaderMacro*)ppDefines, pInclude, (ID3D10Blob**)pppCodeText, ppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppCodeText = &ppCodeText)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, (D3DShaderMacro*)ppDefines, pInclude, (ID3D10Blob**)pppCodeText, ppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (ID3D10Blob** pppCodeText = &ppCodeText)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, pDefines, (ID3DInclude*)ppInclude, (ID3D10Blob**)pppCodeText, ppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ComPtr<ID3DInclude> pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (ID3D10Blob** pppCodeText = &ppCodeText)
			{
				int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, pDefines, (ID3DInclude*)pInclude.GetAddressOf(), (ID3D10Blob**)pppCodeText, ppErrorMsgs);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppCodeText = &ppCodeText)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, pDefines, (ID3DInclude*)ppInclude, (ID3D10Blob**)pppCodeText, ppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (ID3D10Blob** pppCodeText = &ppCodeText)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, pDefines, (ID3DInclude*)ppInclude, (ID3D10Blob**)pppCodeText, ppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppCodeText = &ppCodeText)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (ID3D10Blob**)pppCodeText, ppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ComPtr<ID3DInclude> pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppCodeText = &ppCodeText)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)pInclude.GetAddressOf(), (ID3D10Blob**)pppCodeText, ppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (D3DShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (ID3D10Blob** pppCodeText = &ppCodeText)
						{
							int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (ID3D10Blob**)pppCodeText, ppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppCodeText = &ppCodeText)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (ID3D10Blob**)pppCodeText, ppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
			{
				int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, pDefines, pInclude, ppCodeText, (ID3D10Blob**)pppErrorMsgs);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, pDefines, pInclude, ppCodeText, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
			{
				int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, pDefines, pInclude, ppCodeText, (ID3D10Blob**)pppErrorMsgs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, (D3DShaderMacro*)ppDefines, pInclude, ppCodeText, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (D3DShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, (D3DShaderMacro*)ppDefines, pInclude, ppCodeText, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, (D3DShaderMacro*)ppDefines, pInclude, ppCodeText, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, pDefines, (ID3DInclude*)ppInclude, ppCodeText, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ComPtr<ID3DInclude> pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
			{
				int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, pDefines, (ID3DInclude*)pInclude.GetAddressOf(), ppCodeText, (ID3D10Blob**)pppErrorMsgs);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, pDefines, (ID3DInclude*)ppInclude, ppCodeText, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, pDefines, (ID3DInclude*)ppInclude, ppCodeText, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, ppCodeText, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ComPtr<ID3DInclude> pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)pInclude.GetAddressOf(), ppCodeText, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (D3DShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, ppCodeText, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, ppCodeText, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3D10Blob** pppCodeText = &ppCodeText)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, pDefines, pInclude, (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (ID3D10Blob** pppCodeText = &ppCodeText)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, pDefines, pInclude, (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppCodeText = &ppCodeText)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, pDefines, pInclude, (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppCodeText = &ppCodeText)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, (D3DShaderMacro*)ppDefines, pInclude, (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (D3DShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3D10Blob** pppCodeText = &ppCodeText)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, (D3DShaderMacro*)ppDefines, pInclude, (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ID3DInclude* pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppCodeText = &ppCodeText)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, (D3DShaderMacro*)ppDefines, pInclude, (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (ID3D10Blob** pppCodeText = &ppCodeText)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, pDefines, (ID3DInclude*)ppInclude, (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ComPtr<ID3DInclude> pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (ID3D10Blob** pppCodeText = &ppCodeText)
			{
				fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
				{
					int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, pDefines, (ID3DInclude*)pInclude.GetAddressOf(), (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppCodeText = &ppCodeText)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, pDefines, (ID3DInclude*)ppInclude, (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] D3DShaderMacro* pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3DInclude* ppInclude = &pInclude)
			{
				fixed (ID3D10Blob** pppCodeText = &ppCodeText)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, pDefines, (ID3DInclude*)ppInclude, (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppCodeText = &ppCodeText)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ComPtr<ID3DInclude> pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3D10Blob** pppCodeText = &ppCodeText)
				{
					fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
					{
						int ret = PreprocessNative(pSrcData, srcDataSize, pSourceName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)pInclude.GetAddressOf(), (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			fixed (byte* ppSourceName = pSourceName)
			{
				fixed (D3DShaderMacro* ppDefines = &pDefines)
				{
					fixed (ID3DInclude* ppInclude = &pInclude)
					{
						fixed (ID3D10Blob** pppCodeText = &ppCodeText)
						{
							fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
							{
								int ret = PreprocessNative(pSrcData, srcDataSize, (byte*)ppSourceName, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DPreprocess:<br/>
		/// -------------<br/>
		/// Process source text with the compiler's preprocessor and return<br/>
		/// the resulting text.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DPreprocess")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Preprocess([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pSourceName")] [NativeName(NativeNameType.Type, "LPCSTR")] string pSourceName, [NativeName(NativeNameType.Param, "pDefines")] [NativeName(NativeNameType.Type, "const D3D_SHADER_MACRO*")] ref D3DShaderMacro pDefines, [NativeName(NativeNameType.Param, "pInclude")] [NativeName(NativeNameType.Type, "ID3DInclude*")] ref ID3DInclude pInclude, [NativeName(NativeNameType.Param, "ppCodeText")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCodeText, [NativeName(NativeNameType.Param, "ppErrorMsgs")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppErrorMsgs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pSourceName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pSourceName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pSourceName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (D3DShaderMacro* ppDefines = &pDefines)
			{
				fixed (ID3DInclude* ppInclude = &pInclude)
				{
					fixed (ID3D10Blob** pppCodeText = &ppCodeText)
					{
						fixed (ID3D10Blob** pppErrorMsgs = &ppErrorMsgs)
						{
							int ret = PreprocessNative(pSrcData, srcDataSize, pStr0, (D3DShaderMacro*)ppDefines, (ID3DInclude*)ppInclude, (ID3D10Blob**)pppCodeText, (ID3D10Blob**)pppErrorMsgs);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DGetDebugInfo:<br/>
		/// -----------------------<br/>
		/// Gets shader debug info.  Debug info is generated by D3DCompile and is<br/>
		/// embedded in the body of the shader.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetDebugInfo")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetDebugInfoNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "ppDebugInfo")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDebugInfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, ID3D10Blob**, int>)funcTable[6])(pSrcData, srcDataSize, ppDebugInfo);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, nint, int>)funcTable[6])((nint)pSrcData, srcDataSize, (nint)ppDebugInfo);
			#endif
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DGetDebugInfo:<br/>
		/// -----------------------<br/>
		/// Gets shader debug info.  Debug info is generated by D3DCompile and is<br/>
		/// embedded in the body of the shader.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetDebugInfo")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDebugInfo([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "ppDebugInfo")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDebugInfo)
		{
			int ret = GetDebugInfoNative(pSrcData, srcDataSize, ppDebugInfo);
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DGetDebugInfo:<br/>
		/// -----------------------<br/>
		/// Gets shader debug info.  Debug info is generated by D3DCompile and is<br/>
		/// embedded in the body of the shader.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetDebugInfo")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetDebugInfo([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "ppDebugInfo")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppDebugInfo)
		{
			fixed (ID3D10Blob** pppDebugInfo = &ppDebugInfo)
			{
				int ret = GetDebugInfoNative(pSrcData, srcDataSize, (ID3D10Blob**)pppDebugInfo);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DReflect:<br/>
		/// ----------<br/>
		/// Shader code contains metadata that can be inspected via the<br/>
		/// reflection APIs.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DReflect")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ReflectNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pInterface")] [NativeName(NativeNameType.Type, "const IID&")] Guid* pInterface, [NativeName(NativeNameType.Param, "ppReflector")] [NativeName(NativeNameType.Type, "void**")] void** ppReflector)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, Guid*, void**, int>)funcTable[7])(pSrcData, srcDataSize, pInterface, ppReflector);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, nint, nint, int>)funcTable[7])((nint)pSrcData, srcDataSize, (nint)pInterface, (nint)ppReflector);
			#endif
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DReflect:<br/>
		/// ----------<br/>
		/// Shader code contains metadata that can be inspected via the<br/>
		/// reflection APIs.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DReflect")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Reflect([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pInterface")] [NativeName(NativeNameType.Type, "const IID&")] Guid* pInterface, [NativeName(NativeNameType.Param, "ppReflector")] [NativeName(NativeNameType.Type, "void**")] void** ppReflector)
		{
			int ret = ReflectNative(pSrcData, srcDataSize, pInterface, ppReflector);
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DReflect:<br/>
		/// ----------<br/>
		/// Shader code contains metadata that can be inspected via the<br/>
		/// reflection APIs.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DReflect")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Reflect([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pInterface")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid pInterface, [NativeName(NativeNameType.Param, "ppReflector")] [NativeName(NativeNameType.Type, "void**")] void** ppReflector)
		{
			fixed (Guid* ppInterface = &pInterface)
			{
				int ret = ReflectNative(pSrcData, srcDataSize, (Guid*)ppInterface, ppReflector);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DReflect:<br/>
		/// ----------<br/>
		/// Shader code contains metadata that can be inspected via the<br/>
		/// reflection APIs.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DReflect")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Reflect<T>([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "ppReflector")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppReflector) where T : unmanaged, IComObject, IComObject<T>
		{
			ppReflector = default;
			int ret = ReflectNative(pSrcData, srcDataSize, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppReflector.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DReflect:<br/>
		/// ----------<br/>
		/// Shader code contains metadata that can be inspected via the<br/>
		/// reflection APIs.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DReflect")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Reflect<T>([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "pInterface")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid pInterface, [NativeName(NativeNameType.Param, "ppReflector")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppReflector) where T : unmanaged, IComObject, IComObject<T>
		{
			fixed (Guid* ppInterface = &pInterface)
			{
				ppReflector = default;
				int ret = ReflectNative(pSrcData, srcDataSize, (Guid*)ppInterface, (void**)ppReflector.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DReflectLibrary:<br/>
		/// ----------<br/>
		/// Library code contains metadata that can be inspected via the library<br/>
		/// reflection APIs.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DReflectLibrary")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ReflectLibraryNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppReflector")] [NativeName(NativeNameType.Type, "LPVOID*")] void** ppReflector)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, Guid*, void**, int>)funcTable[8])(pSrcData, srcDataSize, riid, ppReflector);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, nint, nint, int>)funcTable[8])((nint)pSrcData, srcDataSize, (nint)riid, (nint)ppReflector);
			#endif
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DReflectLibrary:<br/>
		/// ----------<br/>
		/// Library code contains metadata that can be inspected via the library<br/>
		/// reflection APIs.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DReflectLibrary")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int ReflectLibrary([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppReflector")] [NativeName(NativeNameType.Type, "LPVOID*")] void** ppReflector)
		{
			int ret = ReflectLibraryNative(pSrcData, srcDataSize, riid, ppReflector);
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DReflectLibrary:<br/>
		/// ----------<br/>
		/// Library code contains metadata that can be inspected via the library<br/>
		/// reflection APIs.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DReflectLibrary")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int ReflectLibrary([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppReflector")] [NativeName(NativeNameType.Type, "LPVOID*")] void** ppReflector)
		{
			fixed (Guid* priid = &riid)
			{
				int ret = ReflectLibraryNative(pSrcData, srcDataSize, (Guid*)priid, ppReflector);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DReflectLibrary:<br/>
		/// ----------<br/>
		/// Library code contains metadata that can be inspected via the library<br/>
		/// reflection APIs.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DReflectLibrary")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int ReflectLibrary([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppReflector")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppReflector)
		{
			fixed (void** pppReflector = &ppReflector)
			{
				int ret = ReflectLibraryNative(pSrcData, srcDataSize, riid, (void**)pppReflector);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DReflectLibrary:<br/>
		/// ----------<br/>
		/// Library code contains metadata that can be inspected via the library<br/>
		/// reflection APIs.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DReflectLibrary")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int ReflectLibrary([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppReflector")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppReflector)
		{
			fixed (Guid* priid = &riid)
			{
				fixed (void** pppReflector = &ppReflector)
				{
					int ret = ReflectLibraryNative(pSrcData, srcDataSize, (Guid*)priid, (void**)pppReflector);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassemble")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int DisassembleNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* szComments, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, uint, byte*, ID3D10Blob**, int>)funcTable[9])(pSrcData, srcDataSize, flags, szComments, ppDisassembly);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, uint, nint, nint, int>)funcTable[9])((nint)pSrcData, srcDataSize, flags, (nint)szComments, (nint)ppDisassembly);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassemble")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Disassemble([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* szComments, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			int ret = DisassembleNative(pSrcData, srcDataSize, flags, szComments, ppDisassembly);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassemble")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Disassemble([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> szComments, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			fixed (byte* pszComments = szComments)
			{
				int ret = DisassembleNative(pSrcData, srcDataSize, flags, (byte*)pszComments, ppDisassembly);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassemble")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Disassemble([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] string szComments, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szComments != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szComments);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szComments, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = DisassembleNative(pSrcData, srcDataSize, flags, pStr0, ppDisassembly);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassemble")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Disassemble([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* szComments, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppDisassembly)
		{
			fixed (ID3D10Blob** pppDisassembly = &ppDisassembly)
			{
				int ret = DisassembleNative(pSrcData, srcDataSize, flags, szComments, (ID3D10Blob**)pppDisassembly);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassemble")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Disassemble([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> szComments, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppDisassembly)
		{
			fixed (byte* pszComments = szComments)
			{
				fixed (ID3D10Blob** pppDisassembly = &ppDisassembly)
				{
					int ret = DisassembleNative(pSrcData, srcDataSize, flags, (byte*)pszComments, (ID3D10Blob**)pppDisassembly);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassemble")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Disassemble([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] string szComments, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppDisassembly)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szComments != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szComments);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szComments, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppDisassembly = &ppDisassembly)
			{
				int ret = DisassembleNative(pSrcData, srcDataSize, flags, pStr0, (ID3D10Blob**)pppDisassembly);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassembleRegion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int DisassembleRegionNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* szComments, [NativeName(NativeNameType.Param, "StartByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startByteOffset, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pFinishByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFinishByteOffset, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, uint, byte*, nuint, nuint, nuint*, ID3D10Blob**, int>)funcTable[10])(pSrcData, srcDataSize, flags, szComments, startByteOffset, numInsts, pFinishByteOffset, ppDisassembly);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, uint, nint, nuint, nuint, nint, nint, int>)funcTable[10])((nint)pSrcData, srcDataSize, flags, (nint)szComments, startByteOffset, numInsts, (nint)pFinishByteOffset, (nint)ppDisassembly);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassembleRegion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DisassembleRegion([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* szComments, [NativeName(NativeNameType.Param, "StartByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startByteOffset, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pFinishByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFinishByteOffset, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			int ret = DisassembleRegionNative(pSrcData, srcDataSize, flags, szComments, startByteOffset, numInsts, pFinishByteOffset, ppDisassembly);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassembleRegion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DisassembleRegion([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> szComments, [NativeName(NativeNameType.Param, "StartByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startByteOffset, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pFinishByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFinishByteOffset, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			fixed (byte* pszComments = szComments)
			{
				int ret = DisassembleRegionNative(pSrcData, srcDataSize, flags, (byte*)pszComments, startByteOffset, numInsts, pFinishByteOffset, ppDisassembly);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassembleRegion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DisassembleRegion([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] string szComments, [NativeName(NativeNameType.Param, "StartByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startByteOffset, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pFinishByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFinishByteOffset, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szComments != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szComments);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szComments, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = DisassembleRegionNative(pSrcData, srcDataSize, flags, pStr0, startByteOffset, numInsts, pFinishByteOffset, ppDisassembly);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassembleRegion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DisassembleRegion([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* szComments, [NativeName(NativeNameType.Param, "StartByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startByteOffset, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pFinishByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFinishByteOffset, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			fixed (nuint* ppFinishByteOffset = &pFinishByteOffset)
			{
				int ret = DisassembleRegionNative(pSrcData, srcDataSize, flags, szComments, startByteOffset, numInsts, (nuint*)ppFinishByteOffset, ppDisassembly);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassembleRegion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DisassembleRegion([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> szComments, [NativeName(NativeNameType.Param, "StartByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startByteOffset, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pFinishByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFinishByteOffset, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			fixed (byte* pszComments = szComments)
			{
				fixed (nuint* ppFinishByteOffset = &pFinishByteOffset)
				{
					int ret = DisassembleRegionNative(pSrcData, srcDataSize, flags, (byte*)pszComments, startByteOffset, numInsts, (nuint*)ppFinishByteOffset, ppDisassembly);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassembleRegion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DisassembleRegion([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] string szComments, [NativeName(NativeNameType.Param, "StartByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startByteOffset, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pFinishByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFinishByteOffset, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szComments != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szComments);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szComments, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (nuint* ppFinishByteOffset = &pFinishByteOffset)
			{
				int ret = DisassembleRegionNative(pSrcData, srcDataSize, flags, pStr0, startByteOffset, numInsts, (nuint*)ppFinishByteOffset, ppDisassembly);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassembleRegion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DisassembleRegion([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* szComments, [NativeName(NativeNameType.Param, "StartByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startByteOffset, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pFinishByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFinishByteOffset, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppDisassembly)
		{
			fixed (ID3D10Blob** pppDisassembly = &ppDisassembly)
			{
				int ret = DisassembleRegionNative(pSrcData, srcDataSize, flags, szComments, startByteOffset, numInsts, pFinishByteOffset, (ID3D10Blob**)pppDisassembly);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassembleRegion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DisassembleRegion([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> szComments, [NativeName(NativeNameType.Param, "StartByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startByteOffset, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pFinishByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFinishByteOffset, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppDisassembly)
		{
			fixed (byte* pszComments = szComments)
			{
				fixed (ID3D10Blob** pppDisassembly = &ppDisassembly)
				{
					int ret = DisassembleRegionNative(pSrcData, srcDataSize, flags, (byte*)pszComments, startByteOffset, numInsts, pFinishByteOffset, (ID3D10Blob**)pppDisassembly);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassembleRegion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DisassembleRegion([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] string szComments, [NativeName(NativeNameType.Param, "StartByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startByteOffset, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pFinishByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFinishByteOffset, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppDisassembly)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szComments != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szComments);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szComments, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ID3D10Blob** pppDisassembly = &ppDisassembly)
			{
				int ret = DisassembleRegionNative(pSrcData, srcDataSize, flags, pStr0, startByteOffset, numInsts, pFinishByteOffset, (ID3D10Blob**)pppDisassembly);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassembleRegion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DisassembleRegion([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* szComments, [NativeName(NativeNameType.Param, "StartByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startByteOffset, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pFinishByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFinishByteOffset, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppDisassembly)
		{
			fixed (nuint* ppFinishByteOffset = &pFinishByteOffset)
			{
				fixed (ID3D10Blob** pppDisassembly = &ppDisassembly)
				{
					int ret = DisassembleRegionNative(pSrcData, srcDataSize, flags, szComments, startByteOffset, numInsts, (nuint*)ppFinishByteOffset, (ID3D10Blob**)pppDisassembly);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassembleRegion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DisassembleRegion([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] ReadOnlySpan<byte> szComments, [NativeName(NativeNameType.Param, "StartByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startByteOffset, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pFinishByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFinishByteOffset, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppDisassembly)
		{
			fixed (byte* pszComments = szComments)
			{
				fixed (nuint* ppFinishByteOffset = &pFinishByteOffset)
				{
					fixed (ID3D10Blob** pppDisassembly = &ppDisassembly)
					{
						int ret = DisassembleRegionNative(pSrcData, srcDataSize, flags, (byte*)pszComments, startByteOffset, numInsts, (nuint*)ppFinishByteOffset, (ID3D10Blob**)pppDisassembly);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassembleRegion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DisassembleRegion([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "szComments")] [NativeName(NativeNameType.Type, "LPCSTR")] string szComments, [NativeName(NativeNameType.Param, "StartByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startByteOffset, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pFinishByteOffset")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFinishByteOffset, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppDisassembly)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szComments != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szComments);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szComments, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (nuint* ppFinishByteOffset = &pFinishByteOffset)
			{
				fixed (ID3D10Blob** pppDisassembly = &ppDisassembly)
				{
					int ret = DisassembleRegionNative(pSrcData, srcDataSize, flags, pStr0, startByteOffset, numInsts, (nuint*)ppFinishByteOffset, (ID3D10Blob**)pppDisassembly);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// Shader linking and Function Linking Graph (FLG) APIs<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCreateLinker")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int CreateLinkerNative([NativeName(NativeNameType.Param, "ppLinker")] [NativeName(NativeNameType.Type, "ID3D11Linker**")] ID3D11Linker** ppLinker)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ID3D11Linker**, int>)funcTable[11])(ppLinker);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[11])((nint)ppLinker);
			#endif
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// Shader linking and Function Linking Graph (FLG) APIs<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCreateLinker")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateLinker([NativeName(NativeNameType.Param, "ppLinker")] [NativeName(NativeNameType.Type, "ID3D11Linker**")] ID3D11Linker** ppLinker)
		{
			int ret = CreateLinkerNative(ppLinker);
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// Shader linking and Function Linking Graph (FLG) APIs<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCreateLinker")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateLinker([NativeName(NativeNameType.Param, "ppLinker")] [NativeName(NativeNameType.Type, "ID3D11Linker**")] ref ID3D11Linker* ppLinker)
		{
			fixed (ID3D11Linker** pppLinker = &ppLinker)
			{
				int ret = CreateLinkerNative((ID3D11Linker**)pppLinker);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// Shader linking and Function Linking Graph (FLG) APIs<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCreateLinker")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateLinker([NativeName(NativeNameType.Param, "ppLinker")] [NativeName(NativeNameType.Type, "ID3D11Linker**")] out ComPtr<ID3D11Linker> ppLinker)
		{
			ppLinker = default;
			int ret = CreateLinkerNative((ID3D11Linker**)ppLinker.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DLoadModule")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int LoadModuleNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "cbSrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint cbSrcDataSize, [NativeName(NativeNameType.Param, "ppModule")] [NativeName(NativeNameType.Type, "ID3D11Module**")] ID3D11Module** ppModule)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, ID3D11Module**, int>)funcTable[12])(pSrcData, cbSrcDataSize, ppModule);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, nint, int>)funcTable[12])((nint)pSrcData, cbSrcDataSize, (nint)ppModule);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DLoadModule")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int LoadModule([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "cbSrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint cbSrcDataSize, [NativeName(NativeNameType.Param, "ppModule")] [NativeName(NativeNameType.Type, "ID3D11Module**")] ID3D11Module** ppModule)
		{
			int ret = LoadModuleNative(pSrcData, cbSrcDataSize, ppModule);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DLoadModule")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int LoadModule([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "cbSrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint cbSrcDataSize, [NativeName(NativeNameType.Param, "ppModule")] [NativeName(NativeNameType.Type, "ID3D11Module**")] ref ID3D11Module* ppModule)
		{
			fixed (ID3D11Module** pppModule = &ppModule)
			{
				int ret = LoadModuleNative(pSrcData, cbSrcDataSize, (ID3D11Module**)pppModule);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DLoadModule")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int LoadModule([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "cbSrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint cbSrcDataSize, [NativeName(NativeNameType.Param, "ppModule")] [NativeName(NativeNameType.Type, "ID3D11Module**")] out ComPtr<ID3D11Module> ppModule)
		{
			ppModule = default;
			int ret = LoadModuleNative(pSrcData, cbSrcDataSize, (ID3D11Module**)ppModule.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCreateFunctionLinkingGraph")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int CreateFunctionLinkingGraphNative([NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppFunctionLinkingGraph")] [NativeName(NativeNameType.Type, "ID3D11FunctionLinkingGraph**")] ID3D11FunctionLinkingGraph** ppFunctionLinkingGraph)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ID3D11FunctionLinkingGraph**, int>)funcTable[13])(uFlags, ppFunctionLinkingGraph);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, int>)funcTable[13])(uFlags, (nint)ppFunctionLinkingGraph);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCreateFunctionLinkingGraph")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateFunctionLinkingGraph([NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppFunctionLinkingGraph")] [NativeName(NativeNameType.Type, "ID3D11FunctionLinkingGraph**")] ID3D11FunctionLinkingGraph** ppFunctionLinkingGraph)
		{
			int ret = CreateFunctionLinkingGraphNative(uFlags, ppFunctionLinkingGraph);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCreateFunctionLinkingGraph")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateFunctionLinkingGraph([NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppFunctionLinkingGraph")] [NativeName(NativeNameType.Type, "ID3D11FunctionLinkingGraph**")] ref ID3D11FunctionLinkingGraph* ppFunctionLinkingGraph)
		{
			fixed (ID3D11FunctionLinkingGraph** pppFunctionLinkingGraph = &ppFunctionLinkingGraph)
			{
				int ret = CreateFunctionLinkingGraphNative(uFlags, (ID3D11FunctionLinkingGraph**)pppFunctionLinkingGraph);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCreateFunctionLinkingGraph")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateFunctionLinkingGraph([NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppFunctionLinkingGraph")] [NativeName(NativeNameType.Type, "ID3D11FunctionLinkingGraph**")] out ComPtr<ID3D11FunctionLinkingGraph> ppFunctionLinkingGraph)
		{
			ppFunctionLinkingGraph = default;
			int ret = CreateFunctionLinkingGraphNative(uFlags, (ID3D11FunctionLinkingGraph**)ppFunctionLinkingGraph.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetTraceInstructionOffsets")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetTraceInstructionOffsetsNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "StartInstIndex")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startInstIndex, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pOffsets")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pOffsets, [NativeName(NativeNameType.Param, "pTotalInsts")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pTotalInsts)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, uint, nuint, nuint, nuint*, nuint*, int>)funcTable[14])(pSrcData, srcDataSize, flags, startInstIndex, numInsts, pOffsets, pTotalInsts);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, uint, nuint, nuint, nint, nint, int>)funcTable[14])((nint)pSrcData, srcDataSize, flags, startInstIndex, numInsts, (nint)pOffsets, (nint)pTotalInsts);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetTraceInstructionOffsets")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetTraceInstructionOffsets([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "StartInstIndex")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startInstIndex, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pOffsets")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pOffsets, [NativeName(NativeNameType.Param, "pTotalInsts")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pTotalInsts)
		{
			int ret = GetTraceInstructionOffsetsNative(pSrcData, srcDataSize, flags, startInstIndex, numInsts, pOffsets, pTotalInsts);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetTraceInstructionOffsets")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetTraceInstructionOffsets([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "StartInstIndex")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startInstIndex, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pOffsets")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pOffsets, [NativeName(NativeNameType.Param, "pTotalInsts")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pTotalInsts)
		{
			fixed (nuint* ppOffsets = &pOffsets)
			{
				int ret = GetTraceInstructionOffsetsNative(pSrcData, srcDataSize, flags, startInstIndex, numInsts, (nuint*)ppOffsets, pTotalInsts);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetTraceInstructionOffsets")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetTraceInstructionOffsets([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "StartInstIndex")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startInstIndex, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pOffsets")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pOffsets, [NativeName(NativeNameType.Param, "pTotalInsts")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pTotalInsts)
		{
			fixed (nuint* ppTotalInsts = &pTotalInsts)
			{
				int ret = GetTraceInstructionOffsetsNative(pSrcData, srcDataSize, flags, startInstIndex, numInsts, pOffsets, (nuint*)ppTotalInsts);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetTraceInstructionOffsets")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetTraceInstructionOffsets([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "StartInstIndex")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint startInstIndex, [NativeName(NativeNameType.Param, "NumInsts")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint numInsts, [NativeName(NativeNameType.Param, "pOffsets")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pOffsets, [NativeName(NativeNameType.Param, "pTotalInsts")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pTotalInsts)
		{
			fixed (nuint* ppOffsets = &pOffsets)
			{
				fixed (nuint* ppTotalInsts = &pTotalInsts)
				{
					int ret = GetTraceInstructionOffsetsNative(pSrcData, srcDataSize, flags, startInstIndex, numInsts, (nuint*)ppOffsets, (nuint*)ppTotalInsts);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DGetInputSignatureBlob:<br/>
		/// -----------------------<br/>
		/// Retrieve the input signature from a compilation result.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetInputSignatureBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetInputSignatureBlobNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "ppSignatureBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppSignatureBlob)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, ID3D10Blob**, int>)funcTable[15])(pSrcData, srcDataSize, ppSignatureBlob);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, nint, int>)funcTable[15])((nint)pSrcData, srcDataSize, (nint)ppSignatureBlob);
			#endif
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DGetInputSignatureBlob:<br/>
		/// -----------------------<br/>
		/// Retrieve the input signature from a compilation result.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetInputSignatureBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetInputSignatureBlob([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "ppSignatureBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppSignatureBlob)
		{
			int ret = GetInputSignatureBlobNative(pSrcData, srcDataSize, ppSignatureBlob);
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DGetInputSignatureBlob:<br/>
		/// -----------------------<br/>
		/// Retrieve the input signature from a compilation result.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetInputSignatureBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetInputSignatureBlob([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "ppSignatureBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppSignatureBlob)
		{
			fixed (ID3D10Blob** pppSignatureBlob = &ppSignatureBlob)
			{
				int ret = GetInputSignatureBlobNative(pSrcData, srcDataSize, (ID3D10Blob**)pppSignatureBlob);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DGetOutputSignatureBlob:<br/>
		/// -----------------------<br/>
		/// Retrieve the output signature from a compilation result.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetOutputSignatureBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetOutputSignatureBlobNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "ppSignatureBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppSignatureBlob)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, ID3D10Blob**, int>)funcTable[16])(pSrcData, srcDataSize, ppSignatureBlob);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, nint, int>)funcTable[16])((nint)pSrcData, srcDataSize, (nint)ppSignatureBlob);
			#endif
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DGetOutputSignatureBlob:<br/>
		/// -----------------------<br/>
		/// Retrieve the output signature from a compilation result.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetOutputSignatureBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetOutputSignatureBlob([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "ppSignatureBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppSignatureBlob)
		{
			int ret = GetOutputSignatureBlobNative(pSrcData, srcDataSize, ppSignatureBlob);
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DGetOutputSignatureBlob:<br/>
		/// -----------------------<br/>
		/// Retrieve the output signature from a compilation result.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetOutputSignatureBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetOutputSignatureBlob([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "ppSignatureBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppSignatureBlob)
		{
			fixed (ID3D10Blob** pppSignatureBlob = &ppSignatureBlob)
			{
				int ret = GetOutputSignatureBlobNative(pSrcData, srcDataSize, (ID3D10Blob**)pppSignatureBlob);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DGetInputAndOutputSignatureBlob:<br/>
		/// -----------------------<br/>
		/// Retrieve the input and output signatures from a compilation result.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetInputAndOutputSignatureBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetInputAndOutputSignatureBlobNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "ppSignatureBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppSignatureBlob)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, ID3D10Blob**, int>)funcTable[17])(pSrcData, srcDataSize, ppSignatureBlob);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, nint, int>)funcTable[17])((nint)pSrcData, srcDataSize, (nint)ppSignatureBlob);
			#endif
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DGetInputAndOutputSignatureBlob:<br/>
		/// -----------------------<br/>
		/// Retrieve the input and output signatures from a compilation result.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetInputAndOutputSignatureBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetInputAndOutputSignatureBlob([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "ppSignatureBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppSignatureBlob)
		{
			int ret = GetInputAndOutputSignatureBlobNative(pSrcData, srcDataSize, ppSignatureBlob);
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DGetInputAndOutputSignatureBlob:<br/>
		/// -----------------------<br/>
		/// Retrieve the input and output signatures from a compilation result.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetInputAndOutputSignatureBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetInputAndOutputSignatureBlob([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "ppSignatureBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppSignatureBlob)
		{
			fixed (ID3D10Blob** pppSignatureBlob = &ppSignatureBlob)
			{
				int ret = GetInputAndOutputSignatureBlobNative(pSrcData, srcDataSize, (ID3D10Blob**)pppSignatureBlob);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DStripShader")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int StripShaderNative([NativeName(NativeNameType.Param, "pShaderBytecode")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pShaderBytecode, [NativeName(NativeNameType.Param, "BytecodeLength")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint bytecodeLength, [NativeName(NativeNameType.Param, "uStripFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uStripFlags, [NativeName(NativeNameType.Param, "ppStrippedBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppStrippedBlob)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, uint, ID3D10Blob**, int>)funcTable[18])(pShaderBytecode, bytecodeLength, uStripFlags, ppStrippedBlob);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, uint, nint, int>)funcTable[18])((nint)pShaderBytecode, bytecodeLength, uStripFlags, (nint)ppStrippedBlob);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DStripShader")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int StripShader([NativeName(NativeNameType.Param, "pShaderBytecode")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pShaderBytecode, [NativeName(NativeNameType.Param, "BytecodeLength")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint bytecodeLength, [NativeName(NativeNameType.Param, "uStripFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uStripFlags, [NativeName(NativeNameType.Param, "ppStrippedBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppStrippedBlob)
		{
			int ret = StripShaderNative(pShaderBytecode, bytecodeLength, uStripFlags, ppStrippedBlob);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DStripShader")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int StripShader([NativeName(NativeNameType.Param, "pShaderBytecode")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pShaderBytecode, [NativeName(NativeNameType.Param, "BytecodeLength")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint bytecodeLength, [NativeName(NativeNameType.Param, "uStripFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uStripFlags, [NativeName(NativeNameType.Param, "ppStrippedBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppStrippedBlob)
		{
			fixed (ID3D10Blob** pppStrippedBlob = &ppStrippedBlob)
			{
				int ret = StripShaderNative(pShaderBytecode, bytecodeLength, uStripFlags, (ID3D10Blob**)pppStrippedBlob);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetBlobPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetBlobPartNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Part")] [NativeName(NativeNameType.Type, "D3D_BLOB_PART")] D3DBlobPart part, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "ppPart")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppPart)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, D3DBlobPart, uint, ID3D10Blob**, int>)funcTable[19])(pSrcData, srcDataSize, part, flags, ppPart);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, D3DBlobPart, uint, nint, int>)funcTable[19])((nint)pSrcData, srcDataSize, part, flags, (nint)ppPart);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetBlobPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetBlobPart([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Part")] [NativeName(NativeNameType.Type, "D3D_BLOB_PART")] D3DBlobPart part, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "ppPart")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppPart)
		{
			int ret = GetBlobPartNative(pSrcData, srcDataSize, part, flags, ppPart);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DGetBlobPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int GetBlobPart([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Part")] [NativeName(NativeNameType.Type, "D3D_BLOB_PART")] D3DBlobPart part, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "ppPart")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppPart)
		{
			fixed (ID3D10Blob** pppPart = &ppPart)
			{
				int ret = GetBlobPartNative(pSrcData, srcDataSize, part, flags, (ID3D10Blob**)pppPart);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DSetBlobPart:<br/>
		/// -----------------------<br/>
		/// Update information in a compilation result.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DSetBlobPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetBlobPartNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Part")] [NativeName(NativeNameType.Type, "D3D_BLOB_PART")] D3DBlobPart part, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "pPart")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pPart, [NativeName(NativeNameType.Param, "PartSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint partSize, [NativeName(NativeNameType.Param, "ppNewShader")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppNewShader)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, D3DBlobPart, uint, void*, nuint, ID3D10Blob**, int>)funcTable[20])(pSrcData, srcDataSize, part, flags, pPart, partSize, ppNewShader);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, D3DBlobPart, uint, nint, nuint, nint, int>)funcTable[20])((nint)pSrcData, srcDataSize, part, flags, (nint)pPart, partSize, (nint)ppNewShader);
			#endif
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DSetBlobPart:<br/>
		/// -----------------------<br/>
		/// Update information in a compilation result.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DSetBlobPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int SetBlobPart([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Part")] [NativeName(NativeNameType.Type, "D3D_BLOB_PART")] D3DBlobPart part, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "pPart")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pPart, [NativeName(NativeNameType.Param, "PartSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint partSize, [NativeName(NativeNameType.Param, "ppNewShader")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppNewShader)
		{
			int ret = SetBlobPartNative(pSrcData, srcDataSize, part, flags, pPart, partSize, ppNewShader);
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DSetBlobPart:<br/>
		/// -----------------------<br/>
		/// Update information in a compilation result.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DSetBlobPart")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int SetBlobPart([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "Part")] [NativeName(NativeNameType.Type, "D3D_BLOB_PART")] D3DBlobPart part, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "pPart")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pPart, [NativeName(NativeNameType.Param, "PartSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint partSize, [NativeName(NativeNameType.Param, "ppNewShader")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppNewShader)
		{
			fixed (ID3D10Blob** pppNewShader = &ppNewShader)
			{
				int ret = SetBlobPartNative(pSrcData, srcDataSize, part, flags, pPart, partSize, (ID3D10Blob**)pppNewShader);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DCreateBlob:<br/>
		/// -----------------------<br/>
		/// Create an ID3DBlob instance.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCreateBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int CreateBlobNative([NativeName(NativeNameType.Param, "Size")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint size, [NativeName(NativeNameType.Param, "ppBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppBlob)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nuint, ID3D10Blob**, int>)funcTable[21])(size, ppBlob);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nuint, nint, int>)funcTable[21])(size, (nint)ppBlob);
			#endif
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DCreateBlob:<br/>
		/// -----------------------<br/>
		/// Create an ID3DBlob instance.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCreateBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateBlob([NativeName(NativeNameType.Param, "Size")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint size, [NativeName(NativeNameType.Param, "ppBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppBlob)
		{
			int ret = CreateBlobNative(size, ppBlob);
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DCreateBlob:<br/>
		/// -----------------------<br/>
		/// Create an ID3DBlob instance.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCreateBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CreateBlob([NativeName(NativeNameType.Param, "Size")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint size, [NativeName(NativeNameType.Param, "ppBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppBlob)
		{
			fixed (ID3D10Blob** pppBlob = &ppBlob)
			{
				int ret = CreateBlobNative(size, (ID3D10Blob**)pppBlob);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int CompressShadersNative([NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "pShaderData")] [NativeName(NativeNameType.Type, "D3D_SHADER_DATA*")] D3DShaderData* pShaderData, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppCompressedData")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCompressedData)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, D3DShaderData*, uint, ID3D10Blob**, int>)funcTable[22])(uNumShaders, pShaderData, uFlags, ppCompressedData);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, uint, nint, int>)funcTable[22])(uNumShaders, (nint)pShaderData, uFlags, (nint)ppCompressedData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompressShaders([NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "pShaderData")] [NativeName(NativeNameType.Type, "D3D_SHADER_DATA*")] D3DShaderData* pShaderData, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppCompressedData")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCompressedData)
		{
			int ret = CompressShadersNative(uNumShaders, pShaderData, uFlags, ppCompressedData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompressShaders([NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "pShaderData")] [NativeName(NativeNameType.Type, "D3D_SHADER_DATA*")] ref D3DShaderData pShaderData, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppCompressedData")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppCompressedData)
		{
			fixed (D3DShaderData* ppShaderData = &pShaderData)
			{
				int ret = CompressShadersNative(uNumShaders, (D3DShaderData*)ppShaderData, uFlags, ppCompressedData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompressShaders([NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "pShaderData")] [NativeName(NativeNameType.Type, "D3D_SHADER_DATA*")] D3DShaderData* pShaderData, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppCompressedData")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCompressedData)
		{
			fixed (ID3D10Blob** pppCompressedData = &ppCompressedData)
			{
				int ret = CompressShadersNative(uNumShaders, pShaderData, uFlags, (ID3D10Blob**)pppCompressedData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DCompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int CompressShaders([NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "pShaderData")] [NativeName(NativeNameType.Type, "D3D_SHADER_DATA*")] ref D3DShaderData pShaderData, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppCompressedData")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppCompressedData)
		{
			fixed (D3DShaderData* ppShaderData = &pShaderData)
			{
				fixed (ID3D10Blob** pppCompressedData = &ppCompressedData)
				{
					int ret = CompressShadersNative(uNumShaders, (D3DShaderData*)ppShaderData, uFlags, (ID3D10Blob**)pppCompressedData);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDecompressShaders:<br/>
		/// -----------------------<br/>
		/// Decompresses one or more shaders from a compressed set.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDecompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int DecompressShadersNative([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "uStartIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uStartIndex, [NativeName(NativeNameType.Param, "pIndices")] [NativeName(NativeNameType.Type, "UINT*")] uint* pIndices, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaders")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaders, [NativeName(NativeNameType.Param, "pTotalShaders")] [NativeName(NativeNameType.Type, "UINT*")] uint* pTotalShaders)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, uint, uint, uint*, uint, ID3D10Blob**, uint*, int>)funcTable[23])(pSrcData, srcDataSize, uNumShaders, uStartIndex, pIndices, uFlags, ppShaders, pTotalShaders);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nuint, uint, uint, nint, uint, nint, nint, int>)funcTable[23])((nint)pSrcData, srcDataSize, uNumShaders, uStartIndex, (nint)pIndices, uFlags, (nint)ppShaders, (nint)pTotalShaders);
			#endif
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDecompressShaders:<br/>
		/// -----------------------<br/>
		/// Decompresses one or more shaders from a compressed set.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDecompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DecompressShaders([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "uStartIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uStartIndex, [NativeName(NativeNameType.Param, "pIndices")] [NativeName(NativeNameType.Type, "UINT*")] uint* pIndices, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaders")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaders, [NativeName(NativeNameType.Param, "pTotalShaders")] [NativeName(NativeNameType.Type, "UINT*")] uint* pTotalShaders)
		{
			int ret = DecompressShadersNative(pSrcData, srcDataSize, uNumShaders, uStartIndex, pIndices, uFlags, ppShaders, pTotalShaders);
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDecompressShaders:<br/>
		/// -----------------------<br/>
		/// Decompresses one or more shaders from a compressed set.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDecompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DecompressShaders([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "uStartIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uStartIndex, [NativeName(NativeNameType.Param, "pIndices")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pIndices, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaders")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaders, [NativeName(NativeNameType.Param, "pTotalShaders")] [NativeName(NativeNameType.Type, "UINT*")] uint* pTotalShaders)
		{
			fixed (uint* ppIndices = &pIndices)
			{
				int ret = DecompressShadersNative(pSrcData, srcDataSize, uNumShaders, uStartIndex, (uint*)ppIndices, uFlags, ppShaders, pTotalShaders);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDecompressShaders:<br/>
		/// -----------------------<br/>
		/// Decompresses one or more shaders from a compressed set.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDecompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DecompressShaders([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "uStartIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uStartIndex, [NativeName(NativeNameType.Param, "pIndices")] [NativeName(NativeNameType.Type, "UINT*")] uint* pIndices, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaders")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaders, [NativeName(NativeNameType.Param, "pTotalShaders")] [NativeName(NativeNameType.Type, "UINT*")] uint* pTotalShaders)
		{
			fixed (ID3D10Blob** pppShaders = &ppShaders)
			{
				int ret = DecompressShadersNative(pSrcData, srcDataSize, uNumShaders, uStartIndex, pIndices, uFlags, (ID3D10Blob**)pppShaders, pTotalShaders);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDecompressShaders:<br/>
		/// -----------------------<br/>
		/// Decompresses one or more shaders from a compressed set.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDecompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DecompressShaders([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "uStartIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uStartIndex, [NativeName(NativeNameType.Param, "pIndices")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pIndices, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaders")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaders, [NativeName(NativeNameType.Param, "pTotalShaders")] [NativeName(NativeNameType.Type, "UINT*")] uint* pTotalShaders)
		{
			fixed (uint* ppIndices = &pIndices)
			{
				fixed (ID3D10Blob** pppShaders = &ppShaders)
				{
					int ret = DecompressShadersNative(pSrcData, srcDataSize, uNumShaders, uStartIndex, (uint*)ppIndices, uFlags, (ID3D10Blob**)pppShaders, pTotalShaders);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDecompressShaders:<br/>
		/// -----------------------<br/>
		/// Decompresses one or more shaders from a compressed set.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDecompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DecompressShaders([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "uStartIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uStartIndex, [NativeName(NativeNameType.Param, "pIndices")] [NativeName(NativeNameType.Type, "UINT*")] uint* pIndices, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaders")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaders, [NativeName(NativeNameType.Param, "pTotalShaders")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pTotalShaders)
		{
			fixed (uint* ppTotalShaders = &pTotalShaders)
			{
				int ret = DecompressShadersNative(pSrcData, srcDataSize, uNumShaders, uStartIndex, pIndices, uFlags, ppShaders, (uint*)ppTotalShaders);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDecompressShaders:<br/>
		/// -----------------------<br/>
		/// Decompresses one or more shaders from a compressed set.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDecompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DecompressShaders([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "uStartIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uStartIndex, [NativeName(NativeNameType.Param, "pIndices")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pIndices, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaders")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppShaders, [NativeName(NativeNameType.Param, "pTotalShaders")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pTotalShaders)
		{
			fixed (uint* ppIndices = &pIndices)
			{
				fixed (uint* ppTotalShaders = &pTotalShaders)
				{
					int ret = DecompressShadersNative(pSrcData, srcDataSize, uNumShaders, uStartIndex, (uint*)ppIndices, uFlags, ppShaders, (uint*)ppTotalShaders);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDecompressShaders:<br/>
		/// -----------------------<br/>
		/// Decompresses one or more shaders from a compressed set.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDecompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DecompressShaders([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "uStartIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uStartIndex, [NativeName(NativeNameType.Param, "pIndices")] [NativeName(NativeNameType.Type, "UINT*")] uint* pIndices, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaders")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaders, [NativeName(NativeNameType.Param, "pTotalShaders")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pTotalShaders)
		{
			fixed (ID3D10Blob** pppShaders = &ppShaders)
			{
				fixed (uint* ppTotalShaders = &pTotalShaders)
				{
					int ret = DecompressShadersNative(pSrcData, srcDataSize, uNumShaders, uStartIndex, pIndices, uFlags, (ID3D10Blob**)pppShaders, (uint*)ppTotalShaders);
					return ret;
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDecompressShaders:<br/>
		/// -----------------------<br/>
		/// Decompresses one or more shaders from a compressed set.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDecompressShaders")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int DecompressShaders([NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "LPCVOID")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcDataSize")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint srcDataSize, [NativeName(NativeNameType.Param, "uNumShaders")] [NativeName(NativeNameType.Type, "UINT")] uint uNumShaders, [NativeName(NativeNameType.Param, "uStartIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uStartIndex, [NativeName(NativeNameType.Param, "pIndices")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pIndices, [NativeName(NativeNameType.Param, "uFlags")] [NativeName(NativeNameType.Type, "UINT")] uint uFlags, [NativeName(NativeNameType.Param, "ppShaders")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppShaders, [NativeName(NativeNameType.Param, "pTotalShaders")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pTotalShaders)
		{
			fixed (uint* ppIndices = &pIndices)
			{
				fixed (ID3D10Blob** pppShaders = &ppShaders)
				{
					fixed (uint* ppTotalShaders = &pTotalShaders)
					{
						int ret = DecompressShadersNative(pSrcData, srcDataSize, uNumShaders, uStartIndex, (uint*)ppIndices, uFlags, (ID3D10Blob**)pppShaders, (uint*)ppTotalShaders);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDisassemble10Effect:<br/>
		/// -----------------------<br/>
		/// Takes a D3D10 effect interface and returns a<br/>
		/// buffer containing text assembly.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassemble10Effect")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int Disassemble10EffectNative([NativeName(NativeNameType.Param, "pEffect")] [NativeName(NativeNameType.Type, "ID3D10Effect*")] ID3D10Effect* pEffect, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ID3D10Effect*, uint, ID3D10Blob**, int>)funcTable[24])(pEffect, flags, ppDisassembly);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, uint, nint, int>)funcTable[24])((nint)pEffect, flags, (nint)ppDisassembly);
			#endif
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDisassemble10Effect:<br/>
		/// -----------------------<br/>
		/// Takes a D3D10 effect interface and returns a<br/>
		/// buffer containing text assembly.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassemble10Effect")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Disassemble10Effect([NativeName(NativeNameType.Param, "pEffect")] [NativeName(NativeNameType.Type, "ID3D10Effect*")] ID3D10Effect* pEffect, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			int ret = Disassemble10EffectNative(pEffect, flags, ppDisassembly);
			return ret;
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDisassemble10Effect:<br/>
		/// -----------------------<br/>
		/// Takes a D3D10 effect interface and returns a<br/>
		/// buffer containing text assembly.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassemble10Effect")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Disassemble10Effect([NativeName(NativeNameType.Param, "pEffect")] [NativeName(NativeNameType.Type, "ID3D10Effect*")] ref ID3D10Effect pEffect, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppDisassembly)
		{
			fixed (ID3D10Effect* ppEffect = &pEffect)
			{
				int ret = Disassemble10EffectNative((ID3D10Effect*)ppEffect, flags, ppDisassembly);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDisassemble10Effect:<br/>
		/// -----------------------<br/>
		/// Takes a D3D10 effect interface and returns a<br/>
		/// buffer containing text assembly.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassemble10Effect")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Disassemble10Effect([NativeName(NativeNameType.Param, "pEffect")] [NativeName(NativeNameType.Type, "ID3D10Effect*")] ID3D10Effect* pEffect, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppDisassembly)
		{
			fixed (ID3D10Blob** pppDisassembly = &ppDisassembly)
			{
				int ret = Disassemble10EffectNative(pEffect, flags, (ID3D10Blob**)pppDisassembly);
				return ret;
			}
		}

		/// <summary>
		/// ----------------------------------------------------------------------------<br/>
		/// D3DDisassemble10Effect:<br/>
		/// -----------------------<br/>
		/// Takes a D3D10 effect interface and returns a<br/>
		/// buffer containing text assembly.<br/>
		/// ----------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "D3DDisassemble10Effect")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static int Disassemble10Effect([NativeName(NativeNameType.Param, "pEffect")] [NativeName(NativeNameType.Type, "ID3D10Effect*")] ref ID3D10Effect pEffect, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "UINT")] uint flags, [NativeName(NativeNameType.Param, "ppDisassembly")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppDisassembly)
		{
			fixed (ID3D10Effect* ppEffect = &pEffect)
			{
				fixed (ID3D10Blob** pppDisassembly = &ppDisassembly)
				{
					int ret = Disassemble10EffectNative((ID3D10Effect*)ppEffect, flags, (ID3D10Blob**)pppDisassembly);
					return ret;
				}
			}
		}

	}
}
