// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3DCommon
{
	public static unsafe partial class Extensions
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D10Blob> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D10Blob* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3D10Blob> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D10Blob* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D10Blob> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D10Blob* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3D10Blob> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D10Blob* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3D10Blob> comObj) 
		{
			ID3D10Blob* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3D10Blob> comObj) 
		{
			ID3D10Blob* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* GetBufferPointer(this ComPtr<ID3D10Blob> comObj) 
		{
			ID3D10Blob* handle = comObj.Handle;
			void* ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, void*>)(handle->LpVtbl[3]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static nuint GetBufferSize(this ComPtr<ID3D10Blob> comObj) 
		{
			ID3D10Blob* handle = comObj.Handle;
			nuint ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, nuint>)(handle->LpVtbl[4]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3DDestructionNotifier> comObj, Guid* riid, void** ppvObject) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface(this ComPtr<ID3DDestructionNotifier> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3DDestructionNotifier> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			ppvObject = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult QueryInterface<T>(this ComPtr<ID3DDestructionNotifier> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint AddRef(this ComPtr<ID3DDestructionNotifier> comObj) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint Release(this ComPtr<ID3DDestructionNotifier> comObj) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterDestructionCallback(this ComPtr<ID3DDestructionNotifier> comObj, PfnDestructionCallback callbackFn, void* pData, uint* pCallbackID) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, PfnDestructionCallback, void*, uint*, HResult>)(handle->LpVtbl[3]))(handle, callbackFn, pData, pCallbackID);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterDestructionCallback<T>(this ComPtr<ID3DDestructionNotifier> comObj, PfnDestructionCallback callbackFn, ComPtr<T> pData, uint* pCallbackID) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, PfnDestructionCallback, void*, uint*, HResult>)(handle->LpVtbl[3]))(handle, callbackFn, (void*)pData.Handle, pCallbackID);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterDestructionCallback(this ComPtr<ID3DDestructionNotifier> comObj, PfnDestructionCallback callbackFn, void* pData, ref uint pCallbackID) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			fixed (uint* ppCallbackID = &pCallbackID)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, PfnDestructionCallback, void*, uint*, HResult>)(handle->LpVtbl[3]))(handle, callbackFn, pData, (uint*)ppCallbackID);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult RegisterDestructionCallback<T>(this ComPtr<ID3DDestructionNotifier> comObj, PfnDestructionCallback callbackFn, ComPtr<T> pData, ref uint pCallbackID) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			fixed (uint* ppCallbackID = &pCallbackID)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, PfnDestructionCallback, void*, uint*, HResult>)(handle->LpVtbl[3]))(handle, callbackFn, (void*)pData.Handle, (uint*)ppCallbackID);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult UnregisterDestructionCallback(this ComPtr<ID3DDestructionNotifier> comObj, uint callbackID) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, uint, HResult>)(handle->LpVtbl[4]))(handle, callbackID);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Open(this ComPtr<ID3DInclude> comObj, IncludeType includeType, byte* pFileName, void* pParentData, void** ppData, uint* pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, IncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, pFileName, pParentData, ppData, pBytes);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Open(this ComPtr<ID3DInclude> comObj, IncludeType includeType, ReadOnlySpan<byte> pFileName, void* pParentData, void** ppData, uint* pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			fixed (byte* ppFileName = pFileName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, IncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, (byte*)ppFileName, pParentData, ppData, pBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Open(this ComPtr<ID3DInclude> comObj, IncludeType includeType, string pFileName, void* pParentData, void** ppData, uint* pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, IncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, pStr0, pParentData, ppData, pBytes);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Open(this ComPtr<ID3DInclude> comObj, IncludeType includeType, byte* pFileName, void* pParentData, ref void* ppData, uint* pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			fixed (void** pppData = &ppData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, IncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, pFileName, pParentData, (void**)pppData, pBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Open(this ComPtr<ID3DInclude> comObj, IncludeType includeType, ReadOnlySpan<byte> pFileName, void* pParentData, ref void* ppData, uint* pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			fixed (byte* ppFileName = pFileName)
			{
				fixed (void** pppData = &ppData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, IncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, (byte*)ppFileName, pParentData, (void**)pppData, pBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Open(this ComPtr<ID3DInclude> comObj, IncludeType includeType, string pFileName, void* pParentData, ref void* ppData, uint* pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (void** pppData = &ppData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, IncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, pStr0, pParentData, (void**)pppData, pBytes);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Open(this ComPtr<ID3DInclude> comObj, IncludeType includeType, byte* pFileName, void* pParentData, void** ppData, ref uint pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			fixed (uint* ppBytes = &pBytes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, IncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, pFileName, pParentData, ppData, (uint*)ppBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Open(this ComPtr<ID3DInclude> comObj, IncludeType includeType, ReadOnlySpan<byte> pFileName, void* pParentData, void** ppData, ref uint pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			fixed (byte* ppFileName = pFileName)
			{
				fixed (uint* ppBytes = &pBytes)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, IncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, (byte*)ppFileName, pParentData, ppData, (uint*)ppBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Open(this ComPtr<ID3DInclude> comObj, IncludeType includeType, string pFileName, void* pParentData, void** ppData, ref uint pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppBytes = &pBytes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, IncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, pStr0, pParentData, ppData, (uint*)ppBytes);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Open(this ComPtr<ID3DInclude> comObj, IncludeType includeType, byte* pFileName, void* pParentData, ref void* ppData, ref uint pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			fixed (void** pppData = &ppData)
			{
				fixed (uint* ppBytes = &pBytes)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, IncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, pFileName, pParentData, (void**)pppData, (uint*)ppBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Open(this ComPtr<ID3DInclude> comObj, IncludeType includeType, ReadOnlySpan<byte> pFileName, void* pParentData, ref void* ppData, ref uint pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			fixed (byte* ppFileName = pFileName)
			{
				fixed (void** pppData = &ppData)
				{
					fixed (uint* ppBytes = &pBytes)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, IncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, (byte*)ppFileName, pParentData, (void**)pppData, (uint*)ppBytes);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Open(this ComPtr<ID3DInclude> comObj, IncludeType includeType, string pFileName, void* pParentData, ref void* ppData, ref uint pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (void** pppData = &ppData)
			{
				fixed (uint* ppBytes = &pBytes)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, IncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, pStr0, pParentData, (void**)pppData, (uint*)ppBytes);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static HResult Close(this ComPtr<ID3DInclude> comObj, void* pData) 
		{
			ID3DInclude* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, void*, HResult>)(handle->LpVtbl[1]))(handle, pData);
			return ret;
		}

	}
}
